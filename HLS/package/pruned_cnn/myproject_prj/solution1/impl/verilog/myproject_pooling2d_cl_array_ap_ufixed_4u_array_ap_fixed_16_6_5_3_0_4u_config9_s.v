// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer8_out_dout,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_empty_n,
        layer8_out_read,
        layer9_out_din,
        layer9_out_num_data_valid,
        layer9_out_fifo_cap,
        layer9_out_full_n,
        layer9_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [95:0] layer8_out_dout;
input  [5:0] layer8_out_num_data_valid;
input  [5:0] layer8_out_fifo_cap;
input   layer8_out_empty_n;
output   layer8_out_read;
output  [63:0] layer9_out_din;
input  [3:0] layer9_out_num_data_valid;
input  [3:0] layer9_out_fifo_cap;
input   layer9_out_full_n;
output   layer9_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer8_out_read;
reg layer9_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln55_reg_817;
reg   [0:0] and_ln55_1_reg_821;
reg    ap_predicate_op127_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln109_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [23:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_2;
reg   [23:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_1;
reg   [23:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel;
reg   [23:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_3;
reg   [23:0] p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_3;
reg   [23:0] p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_2;
reg   [23:0] p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_1;
reg   [23:0] p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_q0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_d0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_q0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_d0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_q0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_d0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_q0;
reg    layer8_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer9_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln55_fu_157_p2;
wire   [0:0] and_ln55_1_fu_199_p2;
wire   [0:0] icmp_ln76_fu_211_p2;
wire   [0:0] icmp_ln80_fu_265_p2;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_126_p4;
wire   [31:0] add_ln86_fu_295_p2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_reg_123;
wire   [31:0] add_ln80_fu_259_p2;
wire   [31:0] add_ln76_fu_205_p2;
wire   [31:0] add_ln91_fu_231_p2;
wire   [23:0] pool_window_4_fu_319_p1;
wire   [23:0] pool_window_7_fu_343_p4;
wire   [23:0] pool_window_13_fu_323_p4;
wire   [23:0] pool_window_3_fu_333_p4;
reg   [4:0] indvar_flatten_fu_106;
wire   [4:0] add_ln109_fu_147_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln55_2_fu_181_p2;
wire   [0:0] icmp_ln55_3_fu_187_p2;
wire   [0:0] and_ln55_fu_193_p2;
wire   [0:0] icmp_ln55_1_fu_171_p2;
wire   [31:0] select_ln91_fu_223_p3;
wire   [0:0] icmp_ln86_fu_281_p2;
wire   [31:0] select_ln86_fu_287_p3;
wire   [0:0] icmp_ln65_fu_473_p2;
wire   [0:0] xor_ln65_fu_479_p2;
wire   [0:0] icmp_ln65_1_fu_493_p2;
wire   [0:0] xor_ln65_1_fu_499_p2;
wire   [23:0] select_ln65_fu_485_p3;
wire   [23:0] select_ln65_1_fu_505_p3;
wire   [0:0] icmp_ln65_2_fu_513_p2;
wire   [0:0] xor_ln65_2_fu_519_p2;
wire   [15:0] tmp_fu_525_p4;
wire   [15:0] tmp_9_fu_535_p4;
wire   [0:0] icmp_ln65_3_fu_553_p2;
wire   [0:0] xor_ln65_3_fu_559_p2;
wire   [0:0] icmp_ln65_4_fu_573_p2;
wire   [0:0] xor_ln65_4_fu_579_p2;
wire   [23:0] select_ln65_3_fu_565_p3;
wire   [23:0] select_ln65_4_fu_585_p3;
wire   [0:0] icmp_ln65_5_fu_593_p2;
wire   [0:0] xor_ln65_5_fu_599_p2;
wire   [15:0] tmp_s_fu_605_p4;
wire   [15:0] tmp_1_fu_615_p4;
wire   [0:0] icmp_ln65_6_fu_633_p2;
wire   [0:0] xor_ln65_6_fu_639_p2;
wire   [0:0] icmp_ln65_7_fu_653_p2;
wire   [0:0] xor_ln65_7_fu_659_p2;
wire   [23:0] select_ln65_6_fu_645_p3;
wire   [23:0] select_ln65_7_fu_665_p3;
wire   [0:0] icmp_ln65_8_fu_673_p2;
wire   [0:0] xor_ln65_8_fu_679_p2;
wire   [15:0] tmp_2_fu_685_p4;
wire   [15:0] tmp_3_fu_695_p4;
wire   [0:0] icmp_ln65_9_fu_713_p2;
wire   [0:0] xor_ln65_9_fu_719_p2;
wire   [0:0] icmp_ln65_10_fu_733_p2;
wire   [0:0] xor_ln65_10_fu_739_p2;
wire   [23:0] select_ln65_9_fu_725_p3;
wire   [23:0] select_ln65_10_fu_745_p3;
wire   [0:0] icmp_ln65_11_fu_753_p2;
wire   [0:0] xor_ln65_11_fu_759_p2;
wire   [15:0] tmp_4_fu_765_p4;
wire   [15:0] tmp_5_fu_775_p4;
wire   [15:0] res_pack_fu_785_p3;
wire   [15:0] res_pack_6_fu_705_p3;
wire   [15:0] res_pack_5_fu_625_p3;
wire   [15:0] res_pack_4_fu_545_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_172;
reg    ap_condition_239;
reg    ap_condition_180;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_2 = 24'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_1 = 24'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel = 24'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_3 = 24'd0;
#0 p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_3 = 24'd0;
#0 p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_2 = 24'd0;
#0 p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_1 = 24'd0;
#0 p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a = 24'd0;
end

myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_void_pmb6 #(
    .DataWidth( 24 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_we0),
    .d0(pool_window_4_fu_319_p1),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_q0)
);

myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_void_pmb6 #(
    .DataWidth( 24 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_we0),
    .d0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_d0),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_q0)
);

myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_void_pmb6 #(
    .DataWidth( 24 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_we0),
    .d0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_d0),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_q0)
);

myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_void_pmb6 #(
    .DataWidth( 24 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_we0),
    .d0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_d0),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_q0)
);

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_172)) begin
        if ((icmp_ln109_fu_141_p2 == 1'd0)) begin
            indvar_flatten_fu_106 <= add_ln109_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_106 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((icmp_ln76_fu_211_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln76_fu_211_p2 == 1'd0)) begin
            pX <= add_ln76_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_180)) begin
        if ((icmp_ln80_fu_265_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln80_fu_265_p2 == 1'd0)) begin
            pY <= add_ln80_fu_259_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((icmp_ln76_fu_211_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln76_fu_211_p2 == 1'd0)) begin
            sX <= add_ln91_fu_231_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_157_p2 == 1'd1))) begin
        and_ln55_1_reg_821 <= and_ln55_1_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_817 <= icmp_ln55_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a <= {{layer8_out_dout[95:72]}};
        p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_1 <= {{layer8_out_dout[71:48]}};
        p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_2 <= {{layer8_out_dout[47:24]}};
        p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_3 <= pool_window_4_fu_319_p1;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel <= void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_q0;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_1 <= void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_q0;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_2 <= void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_q0;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_3 <= void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_211_p2 == 1'd1))) begin
        sY <= ap_phi_mux_storemerge_phi_fu_126_p4;
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_141_p2 == 1'd0) & (icmp_ln76_fu_211_p2 == 1'd1))) begin
        if ((icmp_ln80_fu_265_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_126_p4 = 32'd0;
        end else if ((icmp_ln80_fu_265_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_126_p4 = add_ln86_fu_295_p2;
        end else begin
            ap_phi_mux_storemerge_phi_fu_126_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_123;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_126_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_123;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_blk_n = layer8_out_empty_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_read = 1'b1;
    end else begin
        layer8_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer9_out_blk_n = layer9_out_full_n;
    end else begin
        layer9_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op127_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer9_out_write = 1'b1;
    end else begin
        layer9_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_147_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln76_fu_205_p2 = (pX + 32'd1);

assign add_ln80_fu_259_p2 = (pY + 32'd1);

assign add_ln86_fu_295_p2 = (sY + select_ln86_fu_287_p3);

assign add_ln91_fu_231_p2 = (sX + select_ln91_fu_223_p3);

assign and_ln55_1_fu_199_p2 = (icmp_ln55_1_fu_171_p2 & and_ln55_fu_193_p2);

assign and_ln55_fu_193_p2 = (icmp_ln55_3_fu_187_p2 & icmp_ln55_2_fu_181_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_empty_n == 1'b0) | ((ap_predicate_op127_write_state2 == 1'b1) & (layer9_out_full_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_empty_n == 1'b0) | ((ap_predicate_op127_write_state2 == 1'b1) & (layer9_out_full_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_empty_n == 1'b0) | ((ap_predicate_op127_write_state2 == 1'b1) & (layer9_out_full_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((layer8_out_empty_n == 1'b0) | ((ap_predicate_op127_write_state2 == 1'b1) & (layer9_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_172 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_180 = ((icmp_ln109_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_211_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_239 = ((icmp_ln109_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_storemerge_reg_123 = 'bx;

always @ (*) begin
    ap_predicate_op127_write_state2 = ((1'd1 == and_ln55_1_reg_821) & (icmp_ln55_reg_817 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln109_fu_141_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_171_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_181_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_3_fu_187_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_157_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln65_10_fu_733_p2 = (($signed(p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a) < $signed(pool_window_3_fu_333_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_11_fu_753_p2 = (($signed(select_ln65_9_fu_725_p3) < $signed(select_ln65_10_fu_745_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_493_p2 = (($signed(p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_3) < $signed(pool_window_4_fu_319_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_513_p2 = (($signed(select_ln65_fu_485_p3) < $signed(select_ln65_1_fu_505_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_553_p2 = (($signed(void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_1) < $signed(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_573_p2 = (($signed(p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_2) < $signed(pool_window_7_fu_343_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_593_p2 = (($signed(select_ln65_3_fu_565_p3) < $signed(select_ln65_4_fu_585_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_633_p2 = (($signed(void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel) < $signed(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln65_7_fu_653_p2 = (($signed(p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_1) < $signed(pool_window_13_fu_323_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_8_fu_673_p2 = (($signed(select_ln65_6_fu_645_p3) < $signed(select_ln65_7_fu_665_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_9_fu_713_p2 = (($signed(void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_3) < $signed(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_q0)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_473_p2 = (($signed(void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_2) < $signed(void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_211_p2 = ((add_ln76_fu_205_p2 == 32'd6) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_265_p2 = ((add_ln80_fu_259_p2 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_281_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign layer9_out_din = {{{{res_pack_fu_785_p3}, {res_pack_6_fu_705_p3}}, {res_pack_5_fu_625_p3}}, {res_pack_4_fu_545_p3}};

assign pool_window_13_fu_323_p4 = {{layer8_out_dout[71:48]}};

assign pool_window_3_fu_333_p4 = {{layer8_out_dout[95:72]}};

assign pool_window_4_fu_319_p1 = layer8_out_dout[23:0];

assign pool_window_7_fu_343_p4 = {{layer8_out_dout[47:24]}};

assign res_pack_4_fu_545_p3 = ((xor_ln65_2_fu_519_p2[0:0] == 1'b1) ? tmp_fu_525_p4 : tmp_9_fu_535_p4);

assign res_pack_5_fu_625_p3 = ((xor_ln65_5_fu_599_p2[0:0] == 1'b1) ? tmp_s_fu_605_p4 : tmp_1_fu_615_p4);

assign res_pack_6_fu_705_p3 = ((xor_ln65_8_fu_679_p2[0:0] == 1'b1) ? tmp_2_fu_685_p4 : tmp_3_fu_695_p4);

assign res_pack_fu_785_p3 = ((xor_ln65_11_fu_759_p2[0:0] == 1'b1) ? tmp_4_fu_765_p4 : tmp_5_fu_775_p4);

assign select_ln65_10_fu_745_p3 = ((xor_ln65_10_fu_739_p2[0:0] == 1'b1) ? p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a : pool_window_3_fu_333_p4);

assign select_ln65_1_fu_505_p3 = ((xor_ln65_1_fu_499_p2[0:0] == 1'b1) ? p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_3 : pool_window_4_fu_319_p1);

assign select_ln65_3_fu_565_p3 = ((xor_ln65_3_fu_559_p2[0:0] == 1'b1) ? void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_1 : void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_q0);

assign select_ln65_4_fu_585_p3 = ((xor_ln65_4_fu_579_p2[0:0] == 1'b1) ? p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_2 : pool_window_7_fu_343_p4);

assign select_ln65_6_fu_645_p3 = ((xor_ln65_6_fu_639_p2[0:0] == 1'b1) ? void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel : void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_q0);

assign select_ln65_7_fu_665_p3 = ((xor_ln65_7_fu_659_p2[0:0] == 1'b1) ? p_ZZN4nnet22compute_pool_buffer_2dINS_5arrayI9ap_ufixedILi24ELi8EL9ap_q_mode4EL9a_1 : pool_window_13_fu_323_p4);

assign select_ln65_9_fu_725_p3 = ((xor_ln65_9_fu_719_p2[0:0] == 1'b1) ? void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_3 : void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_q0);

assign select_ln65_fu_485_p3 = ((xor_ln65_fu_479_p2[0:0] == 1'b1) ? void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_2 : void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_3_q0);

assign select_ln86_fu_287_p3 = ((icmp_ln86_fu_281_p2[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign select_ln91_fu_223_p3 = ((icmp_ln55_fu_157_p2[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign start_out = real_start;

assign tmp_1_fu_615_p4 = {{select_ln65_4_fu_585_p3[21:6]}};

assign tmp_2_fu_685_p4 = {{select_ln65_6_fu_645_p3[21:6]}};

assign tmp_3_fu_695_p4 = {{select_ln65_7_fu_665_p3[21:6]}};

assign tmp_4_fu_765_p4 = {{select_ln65_9_fu_725_p3[21:6]}};

assign tmp_5_fu_775_p4 = {{select_ln65_10_fu_745_p3[21:6]}};

assign tmp_9_fu_535_p4 = {{select_ln65_1_fu_505_p3[21:6]}};

assign tmp_fu_525_p4 = {{select_ln65_fu_485_p3[21:6]}};

assign tmp_s_fu_605_p4 = {{select_ln65_3_fu_565_p3[21:6]}};

assign void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_1_d0 = {{layer8_out_dout[71:48]}};

assign void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_2_d0 = {{layer8_out_dout[47:24]}};

assign void_pooling2d_cl_stream_stream_array_ap_fixed_4u_0_line_buffer_d0 = {{layer8_out_dout[95:72]}};

assign xor_ln65_10_fu_739_p2 = (icmp_ln65_10_fu_733_p2 ^ 1'd1);

assign xor_ln65_11_fu_759_p2 = (icmp_ln65_11_fu_753_p2 ^ 1'd1);

assign xor_ln65_1_fu_499_p2 = (icmp_ln65_1_fu_493_p2 ^ 1'd1);

assign xor_ln65_2_fu_519_p2 = (icmp_ln65_2_fu_513_p2 ^ 1'd1);

assign xor_ln65_3_fu_559_p2 = (icmp_ln65_3_fu_553_p2 ^ 1'd1);

assign xor_ln65_4_fu_579_p2 = (icmp_ln65_4_fu_573_p2 ^ 1'd1);

assign xor_ln65_5_fu_599_p2 = (icmp_ln65_5_fu_593_p2 ^ 1'd1);

assign xor_ln65_6_fu_639_p2 = (icmp_ln65_6_fu_633_p2 ^ 1'd1);

assign xor_ln65_7_fu_659_p2 = (icmp_ln65_7_fu_653_p2 ^ 1'd1);

assign xor_ln65_8_fu_679_p2 = (icmp_ln65_8_fu_673_p2 ^ 1'd1);

assign xor_ln65_9_fu_719_p2 = (icmp_ln65_9_fu_713_p2 ^ 1'd1);

assign xor_ln65_fu_479_p2 = (icmp_ln65_fu_473_p2 ^ 1'd1);

endmodule //myproject_pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s
