// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_4u_array_ap_ufixed_24_8_4_0_0_4u_relu_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer13_out_dout,
        layer13_out_num_data_valid,
        layer13_out_fifo_cap,
        layer13_out_empty_n,
        layer13_out_read,
        layer15_out_din,
        layer15_out_num_data_valid,
        layer15_out_fifo_cap,
        layer15_out_full_n,
        layer15_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] layer13_out_dout;
input  [1:0] layer13_out_num_data_valid;
input  [1:0] layer13_out_fifo_cap;
input   layer13_out_empty_n;
output   layer13_out_read;
output  [95:0] layer15_out_din;
input  [1:0] layer15_out_num_data_valid;
input  [1:0] layer15_out_fifo_cap;
input   layer15_out_full_n;
output   layer15_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer13_out_read;
reg layer15_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer13_out_blk_n;
reg    layer15_out_blk_n;
reg    ap_block_state1;
wire   [15:0] in_data_fu_63_p1;
wire   [14:0] trunc_ln52_fu_103_p1;
wire   [0:0] icmp_ln51_fu_97_p2;
wire   [20:0] out_data_fu_107_p3;
wire   [20:0] select_ln51_fu_115_p3;
wire   [15:0] in_data_4_fu_87_p4;
wire   [14:0] tmp_4_fu_133_p4;
wire   [0:0] icmp_ln51_4_fu_127_p2;
wire   [20:0] out_data_4_fu_143_p3;
wire   [20:0] select_ln51_2_fu_151_p3;
wire   [15:0] in_data_5_fu_67_p4;
wire   [14:0] tmp_5_fu_169_p4;
wire   [0:0] icmp_ln51_5_fu_163_p2;
wire   [20:0] shl_ln_fu_179_p3;
wire   [20:0] select_ln51_3_fu_187_p3;
wire   [15:0] in_data_6_fu_77_p4;
wire   [14:0] tmp_6_fu_205_p4;
wire   [0:0] icmp_ln51_6_fu_199_p2;
wire   [20:0] shl_ln52_2_fu_215_p3;
wire   [20:0] select_ln51_4_fu_223_p3;
wire   [23:0] zext_ln51_2_fu_195_p1;
wire   [23:0] zext_ln51_1_fu_159_p1;
wire   [23:0] zext_ln51_fu_123_p1;
wire   [92:0] or_ln57_s_fu_231_p5;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer13_out_blk_n = layer13_out_empty_n;
    end else begin
        layer13_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer13_out_read = 1'b1;
    end else begin
        layer13_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_blk_n = layer15_out_full_n;
    end else begin
        layer15_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_write = 1'b1;
    end else begin
        layer15_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln51_4_fu_127_p2 = (($signed(in_data_4_fu_87_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_163_p2 = (($signed(in_data_5_fu_67_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_199_p2 = (($signed(in_data_6_fu_77_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_97_p2 = (($signed(in_data_fu_63_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_4_fu_87_p4 = {{layer13_out_dout[31:16]}};

assign in_data_5_fu_67_p4 = {{layer13_out_dout[47:32]}};

assign in_data_6_fu_77_p4 = {{layer13_out_dout[63:48]}};

assign in_data_fu_63_p1 = layer13_out_dout[15:0];

assign layer15_out_din = or_ln57_s_fu_231_p5;

assign or_ln57_s_fu_231_p5 = {{{{select_ln51_4_fu_223_p3}, {zext_ln51_2_fu_195_p1}}, {zext_ln51_1_fu_159_p1}}, {zext_ln51_fu_123_p1}};

assign out_data_4_fu_143_p3 = {{tmp_4_fu_133_p4}, {6'd0}};

assign out_data_fu_107_p3 = {{trunc_ln52_fu_103_p1}, {6'd0}};

assign select_ln51_2_fu_151_p3 = ((icmp_ln51_4_fu_127_p2[0:0] == 1'b1) ? out_data_4_fu_143_p3 : 21'd0);

assign select_ln51_3_fu_187_p3 = ((icmp_ln51_5_fu_163_p2[0:0] == 1'b1) ? shl_ln_fu_179_p3 : 21'd0);

assign select_ln51_4_fu_223_p3 = ((icmp_ln51_6_fu_199_p2[0:0] == 1'b1) ? shl_ln52_2_fu_215_p3 : 21'd0);

assign select_ln51_fu_115_p3 = ((icmp_ln51_fu_97_p2[0:0] == 1'b1) ? out_data_fu_107_p3 : 21'd0);

assign shl_ln52_2_fu_215_p3 = {{tmp_6_fu_205_p4}, {6'd0}};

assign shl_ln_fu_179_p3 = {{tmp_5_fu_169_p4}, {6'd0}};

assign start_out = real_start;

assign tmp_4_fu_133_p4 = {{layer13_out_dout[30:16]}};

assign tmp_5_fu_169_p4 = {{layer13_out_dout[46:32]}};

assign tmp_6_fu_205_p4 = {{layer13_out_dout[62:48]}};

assign trunc_ln52_fu_103_p1 = layer13_out_dout[14:0];

assign zext_ln51_1_fu_159_p1 = select_ln51_2_fu_151_p3;

assign zext_ln51_2_fu_195_p1 = select_ln51_3_fu_187_p3;

assign zext_ln51_fu_123_p1 = select_ln51_fu_115_p3;

endmodule //myproject_relu_array_ap_fixed_4u_array_ap_ufixed_24_8_4_0_0_4u_relu_config15_s
