// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_pooling2d_cl_array_ap_ufixed_2u_array_ap_fixed_16_6_5_3_0_2u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer4_out_dout,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_empty_n,
        layer4_out_read,
        layer5_out_din,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_full_n,
        layer5_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] layer4_out_dout;
input  [7:0] layer4_out_num_data_valid;
input  [7:0] layer4_out_fifo_cap;
input   layer4_out_empty_n;
output   layer4_out_read;
output  [31:0] layer5_out_din;
input  [5:0] layer5_out_num_data_valid;
input  [5:0] layer5_out_fifo_cap;
input   layer5_out_full_n;
output   layer5_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer4_out_read;
reg layer5_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln55_reg_620;
reg   [0:0] icmp_ln55_reg_620_pp0_iter1_reg;
reg   [0:0] and_ln55_2_reg_642;
reg    ap_predicate_op102_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln109_fu_130_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] sY_1;
reg   [31:0] pY_1;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [21:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_7;
reg   [21:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_6;
reg   [21:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_5;
reg   [21:0] void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_4;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_q0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_ce0;
reg    void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_we0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_d0;
wire   [23:0] void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_q0;
reg    layer4_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer5_out_blk_n;
reg   [0:0] icmp_ln109_reg_616;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln55_fu_146_p2;
wire   [0:0] icmp_ln55_5_fu_160_p2;
reg   [0:0] icmp_ln55_5_reg_624;
wire   [0:0] icmp_ln55_6_fu_166_p2;
reg   [0:0] icmp_ln55_6_reg_629;
wire   [0:0] icmp_ln76_fu_178_p2;
reg   [0:0] icmp_ln76_reg_634;
wire   [0:0] icmp_ln80_fu_232_p2;
reg   [0:0] icmp_ln80_reg_638;
wire   [0:0] and_ln55_2_fu_365_p2;
wire   [15:0] res_pack_fu_463_p3;
reg   [15:0] res_pack_reg_646;
wire   [15:0] res_pack_7_fu_563_p3;
reg   [15:0] res_pack_7_reg_651;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_115_p4;
wire   [31:0] add_ln86_fu_589_p2;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_reg_111;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_reg_111;
wire   [31:0] add_ln80_fu_226_p2;
wire   [31:0] add_ln76_fu_172_p2;
wire   [31:0] add_ln91_fu_198_p2;
wire   [21:0] trunc_ln246_fu_293_p1;
wire   [21:0] trunc_ln201_fu_307_p1;
wire   [21:0] trunc_ln115_2_fu_259_p1;
reg   [6:0] indvar_flatten_fu_94;
wire   [6:0] add_ln109_fu_136_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] trunc_ln115_fu_255_p1;
wire   [31:0] select_ln91_fu_190_p3;
wire   [0:0] and_ln55_fu_361_p2;
wire   [0:0] icmp_ln55_4_fu_355_p2;
wire   [15:0] trunc_ln6_fu_371_p4;
wire   [15:0] trunc_ln63_s_fu_381_p4;
wire   [0:0] icmp_ln65_fu_411_p2;
wire   [0:0] xor_ln65_fu_417_p2;
wire   [15:0] trunc_ln63_1_fu_391_p4;
wire   [15:0] trunc_ln63_2_fu_401_p4;
wire   [0:0] icmp_ln65_12_fu_431_p2;
wire   [0:0] xor_ln65_12_fu_437_p2;
wire   [15:0] select_ln65_fu_423_p3;
wire   [15:0] select_ln65_12_fu_443_p3;
wire   [0:0] icmp_ln65_13_fu_451_p2;
wire   [0:0] xor_ln65_13_fu_457_p2;
wire   [15:0] trunc_ln63_3_fu_471_p4;
wire   [15:0] trunc_ln63_4_fu_481_p4;
wire   [0:0] icmp_ln65_14_fu_511_p2;
wire   [0:0] xor_ln65_14_fu_517_p2;
wire   [15:0] trunc_ln63_5_fu_491_p4;
wire   [15:0] trunc_ln63_6_fu_501_p4;
wire   [0:0] icmp_ln65_15_fu_531_p2;
wire   [0:0] xor_ln65_15_fu_537_p2;
wire   [15:0] select_ln65_14_fu_523_p3;
wire   [15:0] select_ln65_15_fu_543_p3;
wire   [0:0] icmp_ln65_16_fu_551_p2;
wire   [0:0] xor_ln65_16_fu_557_p2;
wire   [0:0] icmp_ln86_fu_575_p2;
wire   [31:0] select_ln86_fu_581_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_192;
reg    ap_condition_190;
reg    ap_condition_245;
reg    ap_condition_216;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 sY_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_7 = 22'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_6 = 22'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_5 = 22'd0;
#0 void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_4 = 22'd0;
end

myproject_pooling2d_cl_array_ap_ufixed_2u_array_ap_fixed_16_6_5_3_0_2u_config5_s_void_pdEe #(
    .DataWidth( 24 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_we0),
    .d0(trunc_ln115_fu_255_p1),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_q0)
);

myproject_pooling2d_cl_array_ap_ufixed_2u_array_ap_fixed_16_6_5_3_0_2u_config5_s_void_pdEe #(
    .DataWidth( 24 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_ce0),
    .we0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_we0),
    .d0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_d0),
    .q0(void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_q0)
);

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_190)) begin
        if ((1'b1 == ap_condition_192)) begin
            ap_phi_reg_pp0_iter1_storemerge_reg_111 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_reg_111 <= ap_phi_reg_pp0_iter0_storemerge_reg_111;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_190)) begin
        if ((icmp_ln109_fu_130_p2 == 1'd0)) begin
            indvar_flatten_fu_94 <= add_ln109_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        if ((icmp_ln76_fu_178_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln76_fu_178_p2 == 1'd0)) begin
            pX_1 <= add_ln76_fu_172_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_216)) begin
        if ((icmp_ln80_fu_232_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln80_fu_232_p2 == 1'd0)) begin
            pY_1 <= add_ln80_fu_226_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        if ((icmp_ln76_fu_178_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln76_fu_178_p2 == 1'd0)) begin
            sX_1 <= add_ln91_fu_198_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln55_2_reg_642 <= and_ln55_2_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln109_reg_616 <= icmp_ln109_fu_130_p2;
        icmp_ln55_reg_620_pp0_iter1_reg <= icmp_ln55_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_146_p2 == 1'd1))) begin
        icmp_ln55_5_reg_624 <= icmp_ln55_5_fu_160_p2;
        icmp_ln55_6_reg_629 <= icmp_ln55_6_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_620 <= icmp_ln55_fu_146_p2;
        icmp_ln76_reg_634 <= icmp_ln76_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_178_p2 == 1'd1))) begin
        icmp_ln80_reg_638 <= icmp_ln80_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln55_2_fu_365_p2) & (icmp_ln55_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_pack_7_reg_651 <= res_pack_7_fu_563_p3;
        res_pack_reg_646 <= res_pack_fu_463_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_reg_634 == 1'd1))) begin
        sY_1 <= ap_phi_mux_storemerge_phi_fu_115_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_4 <= {{layer4_out_dout[45:24]}};
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_5 <= trunc_ln115_2_fu_259_p1;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_6 <= trunc_ln201_fu_307_p1;
        void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_7 <= trunc_ln246_fu_293_p1;
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_638 == 1'd0) & (icmp_ln76_reg_634 == 1'd1) & (icmp_ln109_reg_616 == 1'd0))) begin
        ap_phi_mux_storemerge_phi_fu_115_p4 = add_ln86_fu_589_p2;
    end else begin
        ap_phi_mux_storemerge_phi_fu_115_p4 = ap_phi_reg_pp0_iter1_storemerge_reg_111;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_empty_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_read = 1'b1;
    end else begin
        layer4_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op102_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op102_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_write = 1'b1;
    end else begin
        layer5_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_ce0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_we0 = 1'd1;
    end else begin
        void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_136_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln76_fu_172_p2 = (pX_1 + 32'd1);

assign add_ln80_fu_226_p2 = (pY_1 + 32'd1);

assign add_ln86_fu_589_p2 = (sY_1 + select_ln86_fu_581_p3);

assign add_ln91_fu_198_p2 = (sX_1 + select_ln91_fu_190_p3);

assign and_ln55_2_fu_365_p2 = (icmp_ln55_4_fu_355_p2 & and_ln55_fu_361_p2);

assign and_ln55_fu_361_p2 = (icmp_ln55_6_reg_629 & icmp_ln55_5_reg_624);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op102_write_state3 == 1'b1) & (layer5_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer4_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op102_write_state3 == 1'b1) & (layer5_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer4_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_predicate_op102_write_state3 == 1'b1) & (layer5_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer4_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer4_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op102_write_state3 == 1'b1) & (layer5_out_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_190 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_192 = ((icmp_ln109_fu_130_p2 == 1'd0) & (icmp_ln80_fu_232_p2 == 1'd1) & (icmp_ln76_fu_178_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_216 = ((icmp_ln109_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_178_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_245 = ((icmp_ln109_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_storemerge_reg_111 = 'bx;

always @ (*) begin
    ap_predicate_op102_write_state3 = ((1'd1 == and_ln55_2_reg_642) & (icmp_ln55_reg_620_pp0_iter1_reg == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln109_fu_130_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln55_4_fu_355_p2 = ((sY_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln55_5_fu_160_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_6_fu_166_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_146_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln65_12_fu_431_p2 = (($signed(trunc_ln63_1_fu_391_p4) < $signed(trunc_ln63_2_fu_401_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_13_fu_451_p2 = (($signed(select_ln65_fu_423_p3) < $signed(select_ln65_12_fu_443_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_14_fu_511_p2 = (($signed(trunc_ln63_3_fu_471_p4) < $signed(trunc_ln63_4_fu_481_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_15_fu_531_p2 = (($signed(trunc_ln63_5_fu_491_p4) < $signed(trunc_ln63_6_fu_501_p4)) ? 1'b1 : 1'b0);

assign icmp_ln65_16_fu_551_p2 = (($signed(select_ln65_14_fu_523_p3) < $signed(select_ln65_15_fu_543_p3)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_411_p2 = (($signed(trunc_ln6_fu_371_p4) < $signed(trunc_ln63_s_fu_381_p4)) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_178_p2 = ((add_ln76_fu_172_p2 == 32'd13) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_232_p2 = ((add_ln80_fu_226_p2 == 32'd8) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_575_p2 = ((sY_1 == 32'd1) ? 1'b1 : 1'b0);

assign layer5_out_din = {{res_pack_7_reg_651}, {res_pack_reg_646}};

assign res_pack_7_fu_563_p3 = ((xor_ln65_16_fu_557_p2[0:0] == 1'b1) ? select_ln65_14_fu_523_p3 : select_ln65_15_fu_543_p3);

assign res_pack_fu_463_p3 = ((xor_ln65_13_fu_457_p2[0:0] == 1'b1) ? select_ln65_fu_423_p3 : select_ln65_12_fu_443_p3);

assign select_ln65_12_fu_443_p3 = ((xor_ln65_12_fu_437_p2[0:0] == 1'b1) ? trunc_ln63_1_fu_391_p4 : trunc_ln63_2_fu_401_p4);

assign select_ln65_14_fu_523_p3 = ((xor_ln65_14_fu_517_p2[0:0] == 1'b1) ? trunc_ln63_3_fu_471_p4 : trunc_ln63_4_fu_481_p4);

assign select_ln65_15_fu_543_p3 = ((xor_ln65_15_fu_537_p2[0:0] == 1'b1) ? trunc_ln63_5_fu_491_p4 : trunc_ln63_6_fu_501_p4);

assign select_ln65_fu_423_p3 = ((xor_ln65_fu_417_p2[0:0] == 1'b1) ? trunc_ln6_fu_371_p4 : trunc_ln63_s_fu_381_p4);

assign select_ln86_fu_581_p3 = ((icmp_ln86_fu_575_p2[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign select_ln91_fu_190_p3 = ((icmp_ln55_fu_146_p2[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign start_out = real_start;

assign trunc_ln115_2_fu_259_p1 = layer4_out_dout[21:0];

assign trunc_ln115_fu_255_p1 = layer4_out_dout[23:0];

assign trunc_ln201_fu_307_p1 = void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_q0[21:0];

assign trunc_ln246_fu_293_p1 = void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_q0[21:0];

assign trunc_ln63_1_fu_391_p4 = {{void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_5[21:6]}};

assign trunc_ln63_2_fu_401_p4 = {{layer4_out_dout[21:6]}};

assign trunc_ln63_3_fu_471_p4 = {{void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_6[21:6]}};

assign trunc_ln63_4_fu_481_p4 = {{void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_q0[21:6]}};

assign trunc_ln63_5_fu_491_p4 = {{void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_4[21:6]}};

assign trunc_ln63_6_fu_501_p4 = {{layer4_out_dout[45:30]}};

assign trunc_ln63_s_fu_381_p4 = {{void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_1_q0[21:6]}};

assign trunc_ln6_fu_371_p4 = {{void_compute_pool_buffer_2d_array_const_ap_shift_reg_n_filt_stream_kernel_7[21:6]}};

assign void_pooling2d_cl_stream_stream_array_ap_fixed_2u_0_line_buffer_d0 = {{layer4_out_dout[47:24]}};

assign xor_ln65_12_fu_437_p2 = (icmp_ln65_12_fu_431_p2 ^ 1'd1);

assign xor_ln65_13_fu_457_p2 = (icmp_ln65_13_fu_451_p2 ^ 1'd1);

assign xor_ln65_14_fu_517_p2 = (icmp_ln65_14_fu_511_p2 ^ 1'd1);

assign xor_ln65_15_fu_537_p2 = (icmp_ln65_15_fu_531_p2 ^ 1'd1);

assign xor_ln65_16_fu_557_p2 = (icmp_ln65_16_fu_551_p2 ^ 1'd1);

assign xor_ln65_fu_417_p2 = (icmp_ln65_fu_411_p2 ^ 1'd1);

endmodule //myproject_pooling2d_cl_array_ap_ufixed_2u_array_ap_fixed_16_6_5_3_0_2u_config5_s
