// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_1u_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer17_out_dout,
        layer17_out_num_data_valid,
        layer17_out_fifo_cap,
        layer17_out_empty_n,
        layer17_out_read,
        layer18_out_din,
        layer18_out_num_data_valid,
        layer18_out_fifo_cap,
        layer18_out_full_n,
        layer18_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] layer17_out_dout;
input  [1:0] layer17_out_num_data_valid;
input  [1:0] layer17_out_fifo_cap;
input   layer17_out_empty_n;
output   layer17_out_read;
output  [15:0] layer18_out_din;
input  [1:0] layer18_out_num_data_valid;
input  [1:0] layer18_out_fifo_cap;
input   layer18_out_full_n;
output   layer18_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer17_out_read;
reg layer18_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer17_out_blk_n;
reg    layer18_out_blk_n;
wire    ap_CS_fsm_state2;
reg   [13:0] trunc_ln_reg_292;
reg    ap_block_state1;
reg   [13:0] trunc_ln58_s_reg_297;
wire   [13:0] add_ln111_123_fu_268_p2;
reg   [13:0] add_ln111_123_reg_302;
wire  signed [12:0] mul_ln42_64_fu_71_p1;
wire  signed [12:0] mul_ln42_fu_72_p1;
wire  signed [13:0] mul_ln42_65_fu_73_p1;
wire  signed [9:0] mul_ln73_fu_74_p1;
wire  signed [15:0] data_fu_168_p1;
wire  signed [15:0] data_4_fu_192_p4;
wire  signed [15:0] data_5_fu_172_p4;
wire  signed [15:0] data_6_fu_182_p4;
wire   [25:0] mul_ln73_fu_74_p2;
wire   [25:0] mul_ln42_fu_72_p2;
wire   [25:0] mul_ln42_64_fu_71_p2;
wire   [25:0] mul_ln42_65_fu_73_p2;
wire   [13:0] trunc_ln58_85_fu_252_p4;
wire   [13:0] add_ln111_122_fu_262_p2;
wire   [13:0] trunc_ln58_84_fu_242_p4;
wire   [13:0] add_ln111_121_fu_274_p2;
wire   [13:0] add_ln111_fu_278_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

myproject_mul_16s_13s_26_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_16s_13s_26_1_0_U309(
    .din0(data_5_fu_172_p4),
    .din1(mul_ln42_64_fu_71_p1),
    .dout(mul_ln42_64_fu_71_p2)
);

myproject_mul_16s_13s_26_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_16s_13s_26_1_0_U310(
    .din0(data_fu_168_p1),
    .din1(mul_ln42_fu_72_p1),
    .dout(mul_ln42_fu_72_p2)
);

myproject_mul_16s_14s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14s_26_1_1_U311(
    .din0(data_6_fu_182_p4),
    .din1(mul_ln42_65_fu_73_p1),
    .dout(mul_ln42_65_fu_73_p2)
);

myproject_mul_16s_10s_26_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_16s_10s_26_1_0_U312(
    .din0(data_4_fu_192_p4),
    .din1(mul_ln73_fu_74_p1),
    .dout(mul_ln73_fu_74_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer18_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln111_123_reg_302 <= add_ln111_123_fu_268_p2;
        trunc_ln58_s_reg_297 <= {{mul_ln42_fu_72_p2[25:12]}};
        trunc_ln_reg_292 <= {{mul_ln73_fu_74_p2[25:12]}};
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((layer18_out_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer18_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer18_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer17_out_blk_n = layer17_out_empty_n;
    end else begin
        layer17_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer17_out_read = 1'b1;
    end else begin
        layer17_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer18_out_blk_n = layer18_out_full_n;
    end else begin
        layer18_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer18_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        layer18_out_write = 1'b1;
    end else begin
        layer18_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((layer18_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_121_fu_274_p2 = (trunc_ln_reg_292 + trunc_ln58_s_reg_297);

assign add_ln111_122_fu_262_p2 = (trunc_ln58_85_fu_252_p4 + 14'd27);

assign add_ln111_123_fu_268_p2 = (add_ln111_122_fu_262_p2 + trunc_ln58_84_fu_242_p4);

assign add_ln111_fu_278_p2 = (add_ln111_123_reg_302 + add_ln111_121_fu_274_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign data_4_fu_192_p4 = {{layer17_out_dout[31:16]}};

assign data_5_fu_172_p4 = {{layer17_out_dout[47:32]}};

assign data_6_fu_182_p4 = {{layer17_out_dout[63:48]}};

assign data_fu_168_p1 = layer17_out_dout[15:0];

assign layer18_out_din = {{add_ln111_fu_278_p2}, {2'd0}};

assign mul_ln42_64_fu_71_p1 = 26'd67106717;

assign mul_ln42_65_fu_73_p1 = 26'd67104361;

assign mul_ln42_fu_72_p1 = 26'd67105608;

assign mul_ln73_fu_74_p1 = 26'd67108439;

assign start_out = real_start;

assign trunc_ln58_84_fu_242_p4 = {{mul_ln42_64_fu_71_p2[25:12]}};

assign trunc_ln58_85_fu_252_p4 = {{mul_ln42_65_fu_73_p2[25:12]}};

endmodule //myproject_dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_1u_config18_s
