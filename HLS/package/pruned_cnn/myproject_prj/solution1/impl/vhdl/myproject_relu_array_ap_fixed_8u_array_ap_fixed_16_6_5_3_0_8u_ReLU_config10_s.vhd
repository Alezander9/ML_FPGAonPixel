-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_ReLU_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer7_out_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    layer7_out_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    layer7_out_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    layer7_out_empty_n : IN STD_LOGIC;
    layer7_out_read : OUT STD_LOGIC;
    layer10_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    layer10_out_full_n : IN STD_LOGIC;
    layer10_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_ReLU_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer7_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer10_out_blk_n : STD_LOGIC;
    signal i_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_fu_119_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_data_fu_130_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_5_fu_134_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_1_fu_284_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_4_fu_158_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_168_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_3_fu_302_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_5_fu_178_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_2_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_8_fu_188_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_fu_320_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_6_fu_198_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_3_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_1_fu_208_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_fu_338_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_218_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_2_fu_228_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_356_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_238_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_5_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_3_fu_248_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_1_fu_374_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_6_fu_138_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_6_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_4_fu_258_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_2_fu_392_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_7_fu_148_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_7_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_268_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_3_fu_410_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln51_2_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_1_fu_382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_3_fu_346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_2_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_1_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln57_s_fu_418_p9 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_101 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                if ((icmp_ln41_fu_113_p2 = ap_const_lv1_0)) then 
                    i_fu_88 <= i_6_fu_119_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer10_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer10_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer10_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer7_out_empty_n, layer10_out_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((layer10_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0));
    end process;


    ap_condition_101_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_101 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_113_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_113_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_88, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_88;
        end if; 
    end process;

    i_6_fu_119_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv5_1));
    icmp_ln41_fu_113_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv5_18) else "0";
    icmp_ln51_1_fu_296_p2 <= "1" when (signed(in_data_4_fu_158_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_2_fu_314_p2 <= "1" when (signed(in_data_5_fu_178_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_3_fu_332_p2 <= "1" when (signed(in_data_6_fu_198_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_4_fu_350_p2 <= "1" when (signed(tmp_fu_218_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_5_fu_368_p2 <= "1" when (signed(tmp_4_fu_238_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_6_fu_386_p2 <= "1" when (signed(trunc_ln44_6_fu_138_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_7_fu_404_p2 <= "1" when (signed(trunc_ln44_7_fu_148_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_278_p2 <= "1" when (signed(in_data_fu_130_p1) > signed(ap_const_lv16_0)) else "0";
    in_data_4_fu_158_p4 <= layer7_out_dout(31 downto 16);
    in_data_5_fu_178_p4 <= layer7_out_dout(47 downto 32);
    in_data_6_fu_198_p4 <= layer7_out_dout(63 downto 48);
    in_data_fu_130_p1 <= layer7_out_dout(16 - 1 downto 0);

    layer10_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer10_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer10_out_blk_n <= layer10_out_full_n;
        else 
            layer10_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer10_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_418_p9),128));

    layer10_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer10_out_write <= ap_const_logic_1;
        else 
            layer10_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer7_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer7_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer7_out_blk_n <= layer7_out_empty_n;
        else 
            layer7_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer7_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer7_out_read <= ap_const_logic_1;
        else 
            layer7_out_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_418_p9 <= (((((((select_ln51_3_fu_410_p3 & zext_ln51_2_fu_400_p1) & zext_ln51_1_fu_382_p1) & zext_ln51_fu_364_p1) & zext_ln45_3_fu_346_p1) & zext_ln45_2_fu_328_p1) & zext_ln45_1_fu_310_p1) & zext_ln45_fu_292_p1);
    out_data_1_fu_284_p3 <= 
        trunc_ln44_5_fu_134_p1 when (icmp_ln51_fu_278_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_3_fu_302_p3 <= 
        trunc_ln44_s_fu_168_p4 when (icmp_ln51_1_fu_296_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_5_fu_320_p3 <= 
        trunc_ln44_8_fu_188_p4 when (icmp_ln51_2_fu_314_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_7_fu_338_p3 <= 
        trunc_ln44_1_fu_208_p4 when (icmp_ln51_3_fu_332_p2(0) = '1') else 
        ap_const_lv15_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_1_fu_374_p3 <= 
        trunc_ln44_3_fu_248_p4 when (icmp_ln51_5_fu_368_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_2_fu_392_p3 <= 
        trunc_ln44_4_fu_258_p4 when (icmp_ln51_6_fu_386_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_3_fu_410_p3 <= 
        trunc_ln_fu_268_p4 when (icmp_ln51_7_fu_404_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_356_p3 <= 
        trunc_ln44_2_fu_228_p4 when (icmp_ln51_4_fu_350_p2(0) = '1') else 
        ap_const_lv15_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_238_p4 <= layer7_out_dout(95 downto 80);
    tmp_fu_218_p4 <= layer7_out_dout(79 downto 64);
    trunc_ln44_1_fu_208_p4 <= layer7_out_dout(62 downto 48);
    trunc_ln44_2_fu_228_p4 <= layer7_out_dout(78 downto 64);
    trunc_ln44_3_fu_248_p4 <= layer7_out_dout(94 downto 80);
    trunc_ln44_4_fu_258_p4 <= layer7_out_dout(110 downto 96);
    trunc_ln44_5_fu_134_p1 <= layer7_out_dout(15 - 1 downto 0);
    trunc_ln44_6_fu_138_p4 <= layer7_out_dout(111 downto 96);
    trunc_ln44_7_fu_148_p4 <= layer7_out_dout(127 downto 112);
    trunc_ln44_8_fu_188_p4 <= layer7_out_dout(46 downto 32);
    trunc_ln44_s_fu_168_p4 <= layer7_out_dout(30 downto 16);
    trunc_ln_fu_268_p4 <= layer7_out_dout(126 downto 112);
    zext_ln45_1_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_3_fu_302_p3),16));
    zext_ln45_2_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_5_fu_320_p3),16));
    zext_ln45_3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_7_fu_338_p3),16));
    zext_ln45_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_1_fu_284_p3),16));
    zext_ln51_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_fu_374_p3),16));
    zext_ln51_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_2_fu_392_p3),16));
    zext_ln51_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_356_p3),16));
end behav;
