-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_1u_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer17_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    layer17_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_empty_n : IN STD_LOGIC;
    layer17_out_read : OUT STD_LOGIC;
    layer18_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer18_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_full_n : IN STD_LOGIC;
    layer18_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_1u_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv26_3FFF79D : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111011110011101";
    constant ap_const_lv26_3FFF348 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111001101001000";
    constant ap_const_lv26_3FFEE69 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111110111001101001";
    constant ap_const_lv26_3FFFE57 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111001010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv14_1B : STD_LOGIC_VECTOR (13 downto 0) := "00000000011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer17_out_blk_n : STD_LOGIC;
    signal layer18_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_292 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln58_s_reg_297 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln111_123_fu_268_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln111_123_reg_302 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln42_64_fu_71_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln42_fu_72_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln42_65_fu_73_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln73_fu_74_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_fu_192_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_fu_172_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_fu_182_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln73_fu_74_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_fu_72_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_64_fu_71_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_65_fu_73_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln58_85_fu_252_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln111_122_fu_262_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln58_84_fu_242_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln111_121_fu_274_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln111_fu_278_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_13s_26_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_14s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_10s_26_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_13s_26_1_0_U309 : component myproject_mul_16s_13s_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => data_5_fu_172_p4,
        din1 => mul_ln42_64_fu_71_p1,
        dout => mul_ln42_64_fu_71_p2);

    mul_16s_13s_26_1_0_U310 : component myproject_mul_16s_13s_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => data_fu_168_p1,
        din1 => mul_ln42_fu_72_p1,
        dout => mul_ln42_fu_72_p2);

    mul_16s_14s_26_1_1_U311 : component myproject_mul_16s_14s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => data_6_fu_182_p4,
        din1 => mul_ln42_65_fu_73_p1,
        dout => mul_ln42_65_fu_73_p2);

    mul_16s_10s_26_1_0_U312 : component myproject_mul_16s_10s_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => data_4_fu_192_p4,
        din1 => mul_ln73_fu_74_p1,
        dout => mul_ln73_fu_74_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (layer17_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln111_123_reg_302 <= add_ln111_123_fu_268_p2;
                trunc_ln58_s_reg_297 <= mul_ln42_fu_72_p2(25 downto 12);
                trunc_ln_reg_292 <= mul_ln73_fu_74_p2(25 downto 12);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer17_out_empty_n, layer18_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer17_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln111_121_fu_274_p2 <= std_logic_vector(unsigned(trunc_ln_reg_292) + unsigned(trunc_ln58_s_reg_297));
    add_ln111_122_fu_262_p2 <= std_logic_vector(unsigned(trunc_ln58_85_fu_252_p4) + unsigned(ap_const_lv14_1B));
    add_ln111_123_fu_268_p2 <= std_logic_vector(unsigned(add_ln111_122_fu_262_p2) + unsigned(trunc_ln58_84_fu_242_p4));
    add_ln111_fu_278_p2 <= std_logic_vector(unsigned(add_ln111_123_reg_302) + unsigned(add_ln111_121_fu_274_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer17_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer17_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer18_out_full_n)
    begin
        if ((layer18_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer17_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer17_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer18_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_4_fu_192_p4 <= layer17_out_dout(31 downto 16);
    data_5_fu_172_p4 <= layer17_out_dout(47 downto 32);
    data_6_fu_182_p4 <= layer17_out_dout(63 downto 48);
    data_fu_168_p1 <= layer17_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer17_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer17_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer17_out_blk_n <= layer17_out_empty_n;
        else 
            layer17_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer17_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer17_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer17_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer17_out_read <= ap_const_logic_1;
        else 
            layer17_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer18_out_blk_n_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer18_out_blk_n <= layer18_out_full_n;
        else 
            layer18_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer18_out_din <= (add_ln111_fu_278_p2 & ap_const_lv2_0);

    layer18_out_write_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer18_out_write <= ap_const_logic_1;
        else 
            layer18_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln42_64_fu_71_p1 <= ap_const_lv26_3FFF79D(13 - 1 downto 0);
    mul_ln42_65_fu_73_p1 <= ap_const_lv26_3FFEE69(14 - 1 downto 0);
    mul_ln42_fu_72_p1 <= ap_const_lv26_3FFF348(13 - 1 downto 0);
    mul_ln73_fu_74_p1 <= ap_const_lv26_3FFFE57(10 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln58_84_fu_242_p4 <= mul_ln42_64_fu_71_p2(25 downto 12);
    trunc_ln58_85_fu_252_p4 <= mul_ln42_65_fu_73_p2(25 downto 12);
end behav;
