// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_4u_array_ap_ufixed_24_8_4_0_0_4u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer6_out_dout,
        layer6_out_num_data_valid,
        layer6_out_fifo_cap,
        layer6_out_empty_n,
        layer6_out_read,
        layer8_out_din,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_full_n,
        layer8_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] layer6_out_dout;
input  [5:0] layer6_out_num_data_valid;
input  [5:0] layer6_out_fifo_cap;
input   layer6_out_empty_n;
output   layer6_out_read;
output  [95:0] layer8_out_din;
input  [5:0] layer8_out_num_data_valid;
input  [5:0] layer8_out_fifo_cap;
input   layer8_out_full_n;
output   layer8_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer6_out_read;
reg layer8_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_93_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer6_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer8_out_blk_n;
reg   [4:0] i_fu_68;
wire   [4:0] i_6_fu_99_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] ap_sig_allocacmp_i_5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_fu_110_p1;
wire   [14:0] trunc_ln52_fu_150_p1;
wire   [0:0] icmp_ln51_fu_144_p2;
wire   [20:0] out_data_fu_154_p3;
wire   [20:0] out_data_1_fu_162_p3;
wire   [15:0] in_data_1_fu_134_p4;
wire   [14:0] tmp_1_fu_180_p4;
wire   [0:0] icmp_ln51_1_fu_174_p2;
wire   [20:0] out_data_2_fu_190_p3;
wire   [20:0] out_data_3_fu_198_p3;
wire   [15:0] in_data_2_fu_114_p4;
wire   [14:0] tmp_2_fu_216_p4;
wire   [0:0] icmp_ln51_2_fu_210_p2;
wire   [20:0] shl_ln_fu_226_p3;
wire   [20:0] select_ln51_fu_234_p3;
wire   [15:0] in_data_3_fu_124_p4;
wire   [14:0] tmp_3_fu_252_p4;
wire   [0:0] icmp_ln51_3_fu_246_p2;
wire   [20:0] shl_ln52_1_fu_262_p3;
wire   [20:0] select_ln51_1_fu_270_p3;
wire   [23:0] zext_ln51_fu_242_p1;
wire   [23:0] zext_ln45_1_fu_206_p1;
wire   [23:0] zext_ln45_fu_170_p1;
wire   [92:0] or_ln57_5_fu_278_p5;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_101;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        if ((icmp_ln41_fu_93_p2 == 1'd0)) begin
            i_fu_68 <= i_6_fu_99_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 5'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_93_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_5 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer6_out_blk_n = layer6_out_empty_n;
    end else begin
        layer6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer6_out_read = 1'b1;
    end else begin
        layer6_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_blk_n = layer8_out_full_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_write = 1'b1;
    end else begin
        layer8_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_6_fu_99_p2 = (ap_sig_allocacmp_i_5 + 5'd1);

assign icmp_ln41_fu_93_p2 = ((ap_sig_allocacmp_i_5 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_174_p2 = (($signed(in_data_1_fu_134_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_210_p2 = (($signed(in_data_2_fu_114_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_246_p2 = (($signed(in_data_3_fu_124_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_144_p2 = (($signed(in_data_fu_110_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_1_fu_134_p4 = {{layer6_out_dout[31:16]}};

assign in_data_2_fu_114_p4 = {{layer6_out_dout[47:32]}};

assign in_data_3_fu_124_p4 = {{layer6_out_dout[63:48]}};

assign in_data_fu_110_p1 = layer6_out_dout[15:0];

assign layer8_out_din = or_ln57_5_fu_278_p5;

assign or_ln57_5_fu_278_p5 = {{{{select_ln51_1_fu_270_p3}, {zext_ln51_fu_242_p1}}, {zext_ln45_1_fu_206_p1}}, {zext_ln45_fu_170_p1}};

assign out_data_1_fu_162_p3 = ((icmp_ln51_fu_144_p2[0:0] == 1'b1) ? out_data_fu_154_p3 : 21'd0);

assign out_data_2_fu_190_p3 = {{tmp_1_fu_180_p4}, {6'd0}};

assign out_data_3_fu_198_p3 = ((icmp_ln51_1_fu_174_p2[0:0] == 1'b1) ? out_data_2_fu_190_p3 : 21'd0);

assign out_data_fu_154_p3 = {{trunc_ln52_fu_150_p1}, {6'd0}};

assign select_ln51_1_fu_270_p3 = ((icmp_ln51_3_fu_246_p2[0:0] == 1'b1) ? shl_ln52_1_fu_262_p3 : 21'd0);

assign select_ln51_fu_234_p3 = ((icmp_ln51_2_fu_210_p2[0:0] == 1'b1) ? shl_ln_fu_226_p3 : 21'd0);

assign shl_ln52_1_fu_262_p3 = {{tmp_3_fu_252_p4}, {6'd0}};

assign shl_ln_fu_226_p3 = {{tmp_2_fu_216_p4}, {6'd0}};

assign start_out = real_start;

assign tmp_1_fu_180_p4 = {{layer6_out_dout[30:16]}};

assign tmp_2_fu_216_p4 = {{layer6_out_dout[46:32]}};

assign tmp_3_fu_252_p4 = {{layer6_out_dout[62:48]}};

assign trunc_ln52_fu_150_p1 = layer6_out_dout[14:0];

assign zext_ln45_1_fu_206_p1 = out_data_3_fu_198_p3;

assign zext_ln45_fu_170_p1 = out_data_1_fu_162_p3;

assign zext_ln51_fu_242_p1 = select_ln51_fu_234_p3;

endmodule //myproject_relu_array_ap_fixed_4u_array_ap_ufixed_24_8_4_0_0_4u_relu_config8_s
