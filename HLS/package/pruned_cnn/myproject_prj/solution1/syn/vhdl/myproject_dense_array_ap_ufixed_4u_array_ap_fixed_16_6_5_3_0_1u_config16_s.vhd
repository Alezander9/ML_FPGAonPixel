-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_1u_config16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer16_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer16_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_full_n : IN STD_LOGIC;
    layer16_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_1u_config16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv37_1FFFFE5434 : STD_LOGIC_VECTOR (36 downto 0) := "1111111111111111111100101010000110100";
    constant ap_const_lv37_1079A : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000011110011010";
    constant ap_const_lv37_1FFFFF97F4 : STD_LOGIC_VECTOR (36 downto 0) := "1111111111111111111111001011111110100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv28_FD200 : STD_LOGIC_VECTOR (27 downto 0) := "0000000011111101001000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal layer16_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_223 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln42_83_reg_228 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln42_85_reg_233 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln42_fu_67_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln42_fu_67_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln73_fu_68_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln73_fu_68_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln42_12_fu_69_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln42_12_fu_69_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_fu_128_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln73_fu_68_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln42_s_fu_147_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln42_fu_67_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln42_84_fu_172_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln42_12_fu_69_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln58_86_fu_201_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln58_fu_197_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_fu_206_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal mul_ln42_12_fu_69_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln42_fu_67_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln73_fu_68_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_24ns_18s_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component myproject_mul_24ns_18ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component myproject_mul_24ns_16s_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    mul_24ns_18s_37_1_1_U247 : component myproject_mul_24ns_18s_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln42_fu_67_p0,
        din1 => mul_ln42_fu_67_p1,
        dout => mul_ln42_fu_67_p2);

    mul_24ns_18ns_37_1_1_U248 : component myproject_mul_24ns_18ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln73_fu_68_p0,
        din1 => mul_ln73_fu_68_p1,
        dout => mul_ln73_fu_68_p2);

    mul_24ns_16s_37_1_1_U249 : component myproject_mul_24ns_16s_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln42_12_fu_69_p0,
        din1 => mul_ln42_12_fu_69_p1,
        dout => mul_ln42_12_fu_69_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln42_83_reg_228 <= mul_ln42_fu_67_p2(36 downto 9);
                trunc_ln42_85_reg_233 <= mul_ln42_12_fu_69_p2(36 downto 9);
                trunc_ln_reg_223 <= mul_ln73_fu_68_p2(36 downto 9);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer15_out_empty_n, layer16_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln58_86_fu_201_p2 <= std_logic_vector(unsigned(trunc_ln42_85_reg_233) + unsigned(ap_const_lv28_FD200));
    add_ln58_fu_197_p2 <= std_logic_vector(unsigned(trunc_ln42_83_reg_228) + unsigned(trunc_ln_reg_223));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer16_out_full_n)
    begin
        if ((layer16_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_fu_128_p1 <= layer15_out_dout(24 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer16_out_blk_n_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer16_out_blk_n <= layer16_out_full_n;
        else 
            layer16_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer16_out_din <= x_fu_206_p2(27 downto 12);

    layer16_out_write_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer16_out_write <= ap_const_logic_1;
        else 
            layer16_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln42_12_fu_69_p0 <= mul_ln42_12_fu_69_p00(24 - 1 downto 0);
    mul_ln42_12_fu_69_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_84_fu_172_p4),37));
    mul_ln42_12_fu_69_p1 <= ap_const_lv37_1FFFFF97F4(16 - 1 downto 0);
    mul_ln42_fu_67_p0 <= mul_ln42_fu_67_p00(24 - 1 downto 0);
    mul_ln42_fu_67_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_s_fu_147_p4),37));
    mul_ln42_fu_67_p1 <= ap_const_lv37_1FFFFE5434(18 - 1 downto 0);
    mul_ln73_fu_68_p0 <= mul_ln73_fu_68_p00(24 - 1 downto 0);
    mul_ln73_fu_68_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_fu_128_p1),37));
    mul_ln73_fu_68_p1 <= ap_const_lv37_1079A(18 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln42_84_fu_172_p4 <= layer15_out_dout(95 downto 72);
    trunc_ln42_s_fu_147_p4 <= layer15_out_dout(71 downto 48);
    x_fu_206_p2 <= std_logic_vector(unsigned(add_ln58_86_fu_201_p2) + unsigned(add_ln58_fu_197_p2));
end behav;
