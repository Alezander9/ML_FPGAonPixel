// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_1u_config16_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer15_out_dout,
        layer15_out_num_data_valid,
        layer15_out_fifo_cap,
        layer15_out_empty_n,
        layer15_out_read,
        layer16_out_din,
        layer16_out_num_data_valid,
        layer16_out_fifo_cap,
        layer16_out_full_n,
        layer16_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] layer15_out_dout;
input  [1:0] layer15_out_num_data_valid;
input  [1:0] layer15_out_fifo_cap;
input   layer15_out_empty_n;
output   layer15_out_read;
output  [15:0] layer16_out_din;
input  [1:0] layer16_out_num_data_valid;
input  [1:0] layer16_out_fifo_cap;
input   layer16_out_full_n;
output   layer16_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer15_out_read;
reg layer16_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer15_out_blk_n;
reg    layer16_out_blk_n;
reg    ap_block_state1;
wire   [23:0] mul_ln42_fu_67_p0;
wire  signed [17:0] mul_ln42_fu_67_p1;
wire   [23:0] mul_ln73_fu_68_p0;
wire   [17:0] mul_ln73_fu_68_p1;
wire   [23:0] mul_ln42_12_fu_69_p0;
wire  signed [17:0] mul_ln42_12_fu_69_p1;
wire   [23:0] data_fu_128_p1;
wire   [36:0] mul_ln73_fu_68_p2;
wire   [23:0] data_2_fu_132_p4;
wire   [36:0] mul_ln42_fu_67_p2;
wire   [23:0] trunc_ln42_124_fu_172_p4;
wire   [36:0] mul_ln42_12_fu_69_p2;
wire   [21:0] trunc_ln42_s_fu_162_p4;
wire   [21:0] trunc_ln_fu_147_p4;
wire   [21:0] trunc_ln42_125_fu_187_p4;
wire   [21:0] add_ln58_128_fu_203_p2;
wire   [21:0] add_ln58_fu_197_p2;
wire   [21:0] x_fu_209_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire   [36:0] mul_ln42_12_fu_69_p00;
wire   [36:0] mul_ln42_fu_67_p00;
wire   [36:0] mul_ln73_fu_68_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

myproject_mul_24ns_18s_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 37 ))
mul_24ns_18s_37_1_1_U328(
    .din0(mul_ln42_fu_67_p0),
    .din1(mul_ln42_fu_67_p1),
    .dout(mul_ln42_fu_67_p2)
);

myproject_mul_24ns_18ns_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 37 ))
mul_24ns_18ns_37_1_1_U329(
    .din0(mul_ln73_fu_68_p0),
    .din1(mul_ln73_fu_68_p1),
    .dout(mul_ln73_fu_68_p2)
);

myproject_mul_24ns_18s_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 37 ))
mul_24ns_18s_37_1_1_U330(
    .din0(mul_ln42_12_fu_69_p0),
    .din1(mul_ln42_12_fu_69_p1),
    .dout(mul_ln42_12_fu_69_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_blk_n = layer15_out_empty_n;
    end else begin
        layer15_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_read = 1'b1;
    end else begin
        layer15_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer16_out_blk_n = layer16_out_full_n;
    end else begin
        layer16_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer16_out_write = 1'b1;
    end else begin
        layer16_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_128_fu_203_p2 = (trunc_ln42_125_fu_187_p4 + 22'd5700);

assign add_ln58_fu_197_p2 = (trunc_ln42_s_fu_162_p4 + trunc_ln_fu_147_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer16_out_full_n == 1'b0) | (layer15_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign data_2_fu_132_p4 = {{layer15_out_dout[47:24]}};

assign data_fu_128_p1 = layer15_out_dout[23:0];

assign layer16_out_din = {{x_fu_209_p2[21:6]}};

assign mul_ln42_12_fu_69_p0 = mul_ln42_12_fu_69_p00;

assign mul_ln42_12_fu_69_p00 = trunc_ln42_124_fu_172_p4;

assign mul_ln42_12_fu_69_p1 = 37'd137438876640;

assign mul_ln42_fu_67_p0 = mul_ln42_fu_67_p00;

assign mul_ln42_fu_67_p00 = data_2_fu_132_p4;

assign mul_ln42_fu_67_p1 = 37'd137438853516;

assign mul_ln73_fu_68_p0 = mul_ln73_fu_68_p00;

assign mul_ln73_fu_68_p00 = data_fu_128_p1;

assign mul_ln73_fu_68_p1 = 37'd78100;

assign start_out = real_start;

assign trunc_ln42_124_fu_172_p4 = {{layer15_out_dout[71:48]}};

assign trunc_ln42_125_fu_187_p4 = {{mul_ln42_12_fu_69_p2[36:15]}};

assign trunc_ln42_s_fu_162_p4 = {{mul_ln42_fu_67_p2[36:15]}};

assign trunc_ln_fu_147_p4 = {{mul_ln73_fu_68_p2[36:15]}};

assign x_fu_209_p2 = (add_ln58_128_fu_203_p2 + add_ln58_fu_197_p2);

endmodule //myproject_dense_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_1u_config16_s
