-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_ufixed_7u_array_ap_fixed_16_6_5_3_0_1u_config16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (69 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer16_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer16_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_full_n : IN STD_LOGIC;
    layer16_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_ufixed_7u_array_ap_fixed_16_6_5_3_0_1u_config16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv15_7D50 : STD_LOGIC_VECTOR (14 downto 0) := "111110101010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln42_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_116_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w16_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w16_ce0 : STD_LOGIC;
    signal w16_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer16_out_blk_n : STD_LOGIC;
    signal do_init_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index3_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_4_rewind_reg_143 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_3_rewind_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_2_rewind_reg_171 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_1_rewind_reg_185 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_6_rewind_reg_199 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_5_rewind_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_rewind_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal res4_reg_241 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_index_fu_344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_index_reg_493 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_fu_475_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_in_index3_phi_fu_132_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_data_4_phi_phi_fu_259_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_data_3_phi_phi_fu_271_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_data_2_phi_phi_fu_283_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_data_1_phi_phi_fu_295_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_data_6_phi_phi_fu_307_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_data_5_phi_phi_fu_319_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_p_phi_phi_fu_331_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_phi_reg_255 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_phi_reg_267 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_phi_reg_279 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_phi_reg_291 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_6_phi_reg_303 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_phi_reg_315 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_fu_356_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter1_p_phi_reg_327 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_fu_427_p9 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln73_fu_455_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln73_fu_455_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln_fu_461_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln53_fu_471_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln73_fu_455_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_condition_95 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mux_7_3_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (9 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component myproject_mul_10s_10ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_dense_array_ap_ufixed_7u_array_ap_fixed_16_6_5_3_0_1u_config16_s_w16_ROM_AUTOJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    w16_U : component myproject_dense_array_ap_ufixed_7u_array_ap_fixed_16_6_5_3_0_1u_config16_s_w16_ROM_AUTOJfO
    generic map (
        DataWidth => 10,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w16_address0,
        ce0 => w16_ce0,
        q0 => w16_q0);

    mux_7_3_10_1_1_U170 : component myproject_mux_7_3_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => ap_phi_mux_p_phi_phi_fu_331_p4,
        din1 => ap_phi_mux_data_1_phi_phi_fu_295_p4,
        din2 => ap_phi_mux_data_2_phi_phi_fu_283_p4,
        din3 => ap_phi_mux_data_3_phi_phi_fu_271_p4,
        din4 => ap_phi_mux_data_4_phi_phi_fu_259_p4,
        din5 => ap_phi_mux_data_5_phi_phi_fu_319_p4,
        din6 => ap_phi_mux_data_6_phi_phi_fu_307_p4,
        din7 => in_index3_reg_128,
        dout => a_fu_427_p9);

    mul_10s_10ns_20_1_1_U171 : component myproject_mul_10s_10ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => w16_q0,
        din1 => mul_ln73_fu_455_p1,
        dout => mul_ln73_fu_455_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    do_init_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_112 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_112 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    in_index3_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_index3_reg_128 <= in_index_reg_493;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                in_index3_reg_128 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res4_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res4_reg_241 <= x_fu_475_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res4_reg_241 <= ap_const_lv15_7D50;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_1_rewind_reg_185 <= ap_phi_mux_data_1_phi_phi_fu_295_p4;
                data_2_rewind_reg_171 <= ap_phi_mux_data_2_phi_phi_fu_283_p4;
                data_3_rewind_reg_157 <= ap_phi_mux_data_3_phi_phi_fu_271_p4;
                data_4_rewind_reg_143 <= ap_phi_mux_data_4_phi_phi_fu_259_p4;
                data_5_rewind_reg_213 <= ap_phi_mux_data_5_phi_phi_fu_319_p4;
                data_6_rewind_reg_199 <= ap_phi_mux_data_6_phi_phi_fu_307_p4;
                p_rewind_reg_227 <= ap_phi_mux_p_phi_phi_fu_331_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_reg_498 <= icmp_ln42_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_index_reg_493 <= in_index_fu_344_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, layer15_out_empty_n, layer16_out_full_n, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, do_init_reg_112)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln42_reg_498 = ap_const_lv1_1) and (layer16_out_full_n = ap_const_logic_0)) or ((do_init_reg_112 = ap_const_lv1_1) and (layer15_out_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, layer15_out_empty_n, layer16_out_full_n, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, do_init_reg_112)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln42_reg_498 = ap_const_lv1_1) and (layer16_out_full_n = ap_const_logic_0)) or ((do_init_reg_112 = ap_const_lv1_1) and (layer15_out_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, layer15_out_empty_n, layer16_out_full_n, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, do_init_reg_112)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln42_reg_498 = ap_const_lv1_1) and (layer16_out_full_n = ap_const_logic_0)) or ((do_init_reg_112 = ap_const_lv1_1) and (layer15_out_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(layer15_out_empty_n, layer16_out_full_n, icmp_ln42_reg_498, do_init_reg_112)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln42_reg_498 = ap_const_lv1_1) and (layer16_out_full_n = ap_const_logic_0)) or ((do_init_reg_112 = ap_const_lv1_1) and (layer15_out_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_95_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_95 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_1_phi_phi_fu_295_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_1_rewind_reg_185, ap_phi_reg_pp0_iter1_data_1_phi_reg_291)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_phi_phi_fu_295_p4 <= data_1_rewind_reg_185;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_1_phi_phi_fu_295_p4 <= layer15_out_dout(19 downto 10);
        else 
            ap_phi_mux_data_1_phi_phi_fu_295_p4 <= ap_phi_reg_pp0_iter1_data_1_phi_reg_291;
        end if; 
    end process;


    ap_phi_mux_data_2_phi_phi_fu_283_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_2_rewind_reg_171, ap_phi_reg_pp0_iter1_data_2_phi_reg_279)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_phi_phi_fu_283_p4 <= data_2_rewind_reg_171;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_2_phi_phi_fu_283_p4 <= layer15_out_dout(29 downto 20);
        else 
            ap_phi_mux_data_2_phi_phi_fu_283_p4 <= ap_phi_reg_pp0_iter1_data_2_phi_reg_279;
        end if; 
    end process;


    ap_phi_mux_data_3_phi_phi_fu_271_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_3_rewind_reg_157, ap_phi_reg_pp0_iter1_data_3_phi_reg_267)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_phi_phi_fu_271_p4 <= data_3_rewind_reg_157;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_3_phi_phi_fu_271_p4 <= layer15_out_dout(39 downto 30);
        else 
            ap_phi_mux_data_3_phi_phi_fu_271_p4 <= ap_phi_reg_pp0_iter1_data_3_phi_reg_267;
        end if; 
    end process;


    ap_phi_mux_data_4_phi_phi_fu_259_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_4_rewind_reg_143, ap_phi_reg_pp0_iter1_data_4_phi_reg_255)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_phi_phi_fu_259_p4 <= data_4_rewind_reg_143;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_4_phi_phi_fu_259_p4 <= layer15_out_dout(49 downto 40);
        else 
            ap_phi_mux_data_4_phi_phi_fu_259_p4 <= ap_phi_reg_pp0_iter1_data_4_phi_reg_255;
        end if; 
    end process;


    ap_phi_mux_data_5_phi_phi_fu_319_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_5_rewind_reg_213, ap_phi_reg_pp0_iter1_data_5_phi_reg_315)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_5_phi_phi_fu_319_p4 <= data_5_rewind_reg_213;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_5_phi_phi_fu_319_p4 <= layer15_out_dout(59 downto 50);
        else 
            ap_phi_mux_data_5_phi_phi_fu_319_p4 <= ap_phi_reg_pp0_iter1_data_5_phi_reg_315;
        end if; 
    end process;


    ap_phi_mux_data_6_phi_phi_fu_307_p4_assign_proc : process(layer15_out_dout, ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, data_6_rewind_reg_199, ap_phi_reg_pp0_iter1_data_6_phi_reg_303)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_data_6_phi_phi_fu_307_p4 <= data_6_rewind_reg_199;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_data_6_phi_phi_fu_307_p4 <= layer15_out_dout(69 downto 60);
        else 
            ap_phi_mux_data_6_phi_phi_fu_307_p4 <= ap_phi_reg_pp0_iter1_data_6_phi_reg_303;
        end if; 
    end process;

    ap_phi_mux_do_init_phi_fu_116_p6 <= do_init_reg_112;

    ap_phi_mux_in_index3_phi_fu_132_p6_assign_proc : process(icmp_ln42_reg_498, in_index3_reg_128, in_index_reg_493, ap_condition_95)
    begin
        if ((ap_const_boolean_1 = ap_condition_95)) then
            if ((icmp_ln42_reg_498 = ap_const_lv1_1)) then 
                ap_phi_mux_in_index3_phi_fu_132_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln42_reg_498 = ap_const_lv1_0)) then 
                ap_phi_mux_in_index3_phi_fu_132_p6 <= in_index_reg_493;
            else 
                ap_phi_mux_in_index3_phi_fu_132_p6 <= in_index3_reg_128;
            end if;
        else 
            ap_phi_mux_in_index3_phi_fu_132_p6 <= in_index3_reg_128;
        end if; 
    end process;


    ap_phi_mux_p_phi_phi_fu_331_p4_assign_proc : process(ap_phi_mux_do_init_phi_fu_116_p6, do_init_reg_112, p_rewind_reg_227, data_fu_356_p1, ap_phi_reg_pp0_iter1_p_phi_reg_327)
    begin
        if ((ap_phi_mux_do_init_phi_fu_116_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_p_phi_phi_fu_331_p4 <= p_rewind_reg_227;
        elsif ((do_init_reg_112 = ap_const_lv1_1)) then 
            ap_phi_mux_p_phi_phi_fu_331_p4 <= data_fu_356_p1;
        else 
            ap_phi_mux_p_phi_phi_fu_331_p4 <= ap_phi_reg_pp0_iter1_p_phi_reg_327;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_data_1_phi_reg_291 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_data_2_phi_reg_279 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_data_3_phi_reg_267 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_data_4_phi_reg_255 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_data_5_phi_reg_315 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_data_6_phi_reg_303 <= "XXXXXXXXXX";
    ap_phi_reg_pp0_iter1_p_phi_reg_327 <= "XXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    data_fu_356_p1 <= layer15_out_dout(10 - 1 downto 0);
    icmp_ln42_fu_350_p2 <= "1" when (ap_phi_mux_in_index3_phi_fu_132_p6 = ap_const_lv3_6) else "0";
    in_index_fu_344_p2 <= std_logic_vector(unsigned(ap_phi_mux_in_index3_phi_fu_132_p6) + unsigned(ap_const_lv3_1));

    internal_ap_ready_assign_proc : process(icmp_ln42_fu_350_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, layer15_out_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, do_init_reg_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (do_init_reg_112 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, do_init_reg_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (do_init_reg_112 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer16_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, layer16_out_full_n, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer16_out_blk_n <= layer16_out_full_n;
        else 
            layer16_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer16_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(x_fu_475_p2),16));


    layer16_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln42_reg_498, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_498 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer16_out_write <= ap_const_logic_1;
        else 
            layer16_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_455_p1 <= mul_ln73_fu_455_p10(10 - 1 downto 0);
    mul_ln73_fu_455_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_427_p9),20));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln53_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_461_p4),15));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_461_p4 <= mul_ln73_fu_455_p2(19 downto 7);
    w16_address0 <= zext_ln42_fu_339_p1(3 - 1 downto 0);

    w16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w16_ce0 <= ap_const_logic_1;
        else 
            w16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_475_p2 <= std_logic_vector(signed(sext_ln53_fu_471_p1) + signed(res4_reg_241));
    zext_ln42_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_in_index3_phi_fu_132_p6),64));
end behav;
