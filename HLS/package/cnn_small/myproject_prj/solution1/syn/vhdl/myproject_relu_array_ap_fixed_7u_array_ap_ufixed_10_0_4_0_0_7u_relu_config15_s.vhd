-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_7u_array_ap_ufixed_10_0_4_0_0_7u_relu_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer13_out_dout : IN STD_LOGIC_VECTOR (111 downto 0);
    layer13_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_empty_n : IN STD_LOGIC;
    layer13_out_read : OUT STD_LOGIC;
    layer15_out_din : OUT STD_LOGIC_VECTOR (69 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_full_n : IN STD_LOGIC;
    layer15_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_7u_array_ap_ufixed_10_0_4_0_0_7u_relu_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer13_out_blk_n : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal in_data_fu_99_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_173_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_169_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_189_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_4_fu_123_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_221_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_7_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_7_fu_211_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_7_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_3_fu_237_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_5_fu_133_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_269_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_8_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_8_fu_259_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_8_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_285_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_6_fu_143_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_317_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_9_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_9_fu_307_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_9_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_5_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_153_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_365_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_10_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_355_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_10_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_6_fu_381_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_s_fu_103_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_413_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_11_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_fu_403_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_11_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_7_fu_429_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_1_fu_113_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_461_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_12_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_451_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_12_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_8_fu_477_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_8_fu_485_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_7_fu_437_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_6_fu_389_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_5_fu_341_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_4_fu_293_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_3_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_fu_197_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer15_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer15_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln51_10_fu_349_p2 <= "1" when (signed(tmp_fu_153_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_11_fu_397_p2 <= "1" when (signed(trunc_ln44_s_fu_103_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_12_fu_445_p2 <= "1" when (signed(trunc_ln44_1_fu_113_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_7_fu_205_p2 <= "1" when (signed(in_data_4_fu_123_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_8_fu_253_p2 <= "1" when (signed(in_data_5_fu_133_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_9_fu_301_p2 <= "1" when (signed(in_data_6_fu_143_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_163_p2 <= "1" when (signed(in_data_fu_99_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_10_fu_375_p2 <= "0" when (tmp_6_fu_365_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_11_fu_423_p2 <= "0" when (tmp_7_fu_413_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_12_fu_471_p2 <= "0" when (tmp_8_fu_461_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_7_fu_231_p2 <= "0" when (tmp_3_fu_221_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_8_fu_279_p2 <= "0" when (tmp_4_fu_269_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_9_fu_327_p2 <= "0" when (tmp_5_fu_317_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_fu_183_p2 <= "0" when (tmp_2_fu_173_p4 = ap_const_lv6_0) else "1";
    in_data_4_fu_123_p4 <= layer13_out_dout(31 downto 16);
    in_data_5_fu_133_p4 <= layer13_out_dout(47 downto 32);
    in_data_6_fu_143_p4 <= layer13_out_dout(63 downto 48);
    in_data_fu_99_p1 <= layer13_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer13_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_blk_n <= layer13_out_empty_n;
        else 
            layer13_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer13_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_read <= ap_const_logic_1;
        else 
            layer13_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_full_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer15_out_din <= ((((((select_ln51_8_fu_485_p3 & select_ln51_7_fu_437_p3) & select_ln51_6_fu_389_p3) & select_ln51_5_fu_341_p3) & select_ln51_4_fu_293_p3) & select_ln51_3_fu_245_p3) & select_ln51_fu_197_p3);

    layer15_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_write <= ap_const_logic_1;
        else 
            layer15_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_3_fu_245_p3 <= 
        select_ln52_3_fu_237_p3 when (icmp_ln51_7_fu_205_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_4_fu_293_p3 <= 
        select_ln52_4_fu_285_p3 when (icmp_ln51_8_fu_253_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_5_fu_341_p3 <= 
        select_ln52_5_fu_333_p3 when (icmp_ln51_9_fu_301_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_6_fu_389_p3 <= 
        select_ln52_6_fu_381_p3 when (icmp_ln51_10_fu_349_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_7_fu_437_p3 <= 
        select_ln52_7_fu_429_p3 when (icmp_ln51_11_fu_397_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_8_fu_485_p3 <= 
        select_ln52_8_fu_477_p3 when (icmp_ln51_12_fu_445_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_fu_197_p3 <= 
        select_ln52_fu_189_p3 when (icmp_ln51_fu_163_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln52_3_fu_237_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_7_fu_231_p2(0) = '1') else 
        trunc_ln52_7_fu_211_p4;
    select_ln52_4_fu_285_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_8_fu_279_p2(0) = '1') else 
        trunc_ln52_8_fu_259_p4;
    select_ln52_5_fu_333_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_9_fu_327_p2(0) = '1') else 
        trunc_ln52_9_fu_307_p4;
    select_ln52_6_fu_381_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_10_fu_375_p2(0) = '1') else 
        trunc_ln52_s_fu_355_p4;
    select_ln52_7_fu_429_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_11_fu_423_p2(0) = '1') else 
        trunc_ln52_1_fu_403_p4;
    select_ln52_8_fu_477_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_12_fu_471_p2(0) = '1') else 
        trunc_ln52_2_fu_451_p4;
    select_ln52_fu_189_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_fu_183_p2(0) = '1') else 
        trunc_ln52_fu_169_p1;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_173_p4 <= layer13_out_dout(15 downto 10);
    tmp_3_fu_221_p4 <= layer13_out_dout(31 downto 26);
    tmp_4_fu_269_p4 <= layer13_out_dout(47 downto 42);
    tmp_5_fu_317_p4 <= layer13_out_dout(63 downto 58);
    tmp_6_fu_365_p4 <= layer13_out_dout(79 downto 74);
    tmp_7_fu_413_p4 <= layer13_out_dout(95 downto 90);
    tmp_8_fu_461_p4 <= layer13_out_dout(111 downto 106);
    tmp_fu_153_p4 <= layer13_out_dout(79 downto 64);
    trunc_ln44_1_fu_113_p4 <= layer13_out_dout(111 downto 96);
    trunc_ln44_s_fu_103_p4 <= layer13_out_dout(95 downto 80);
    trunc_ln52_1_fu_403_p4 <= layer13_out_dout(89 downto 80);
    trunc_ln52_2_fu_451_p4 <= layer13_out_dout(105 downto 96);
    trunc_ln52_7_fu_211_p4 <= layer13_out_dout(25 downto 16);
    trunc_ln52_8_fu_259_p4 <= layer13_out_dout(41 downto 32);
    trunc_ln52_9_fu_307_p4 <= layer13_out_dout(57 downto 48);
    trunc_ln52_fu_169_p1 <= layer13_out_dout(10 - 1 downto 0);
    trunc_ln52_s_fu_355_p4 <= layer13_out_dout(73 downto 64);
end behav;
