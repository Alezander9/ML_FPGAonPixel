-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_array_ap_fixed_43u_array_ap_fixed_16_6_5_3_0_7u_config13_s_w13_ROM_AUTOIfE is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 301
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_array_ap_fixed_43u_array_ap_fixed_16_6_5_3_0_7u_config13_s_w13_ROM_AUTOIfE is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000011110", 1 => "000000000", 2 => "001011110", 3 => "001001001", 
    4 => "110111001", 5 => "010000010", 6 => "001001111", 7 => "111011110", 
    8 => "110110111", 9 => "000010110", 10 => "000000000", 11 => "111100101", 
    12 => "000011100", 13 => "000000000", 14 => "111010011", 15 => "001000011", 
    16 => "111000110", 17 => "111100001", 18 => "110101101", 19 => "000101001", 
    20 => "111000010", 21 => "111000100", 22 => "000010110", 23 => "000101001", 
    24 => "010100100", 25 => "000000000", 26 => "000110010", 27 => "000010101", 
    28 => "111110000", 29 => "110010110", 30 => "000000000", 31 => "111100000", 
    32 => "000001100", 33 => "000000000", 34 => "000101010", 35 => "111110001", 
    36 => "001100100", 37 => "111110101", 38 => "111001000", 39 => "110010010", 
    40 => "000111111", 41 => "010001001", 42 => "101101010", 43 => "000001101", 
    44 => "000000000", 45 => "111011000", 46 => "000100111", 47 => "000011010", 
    48 => "000110011", 49 => "001111000", 50 => "000000000", 51 => "001000010", 
    52 => "000101101", 53 => "000000000", 54 => "000000000", 55 => "110111000", 
    56 => "111010011", 57 => "000111101", 58 => "000100000", 59 => "000011001", 
    60 => "000000000", 61 => "000110110", 62 => "000011010", 63 => "000000000", 
    64 => "111110000", 65 => "111101001", 66 => "111101000", 67 => "111101001", 
    68 => "000000000", 69 => "000101110", 70 => "000000000", 71 => "111011111", 
    72 => "111000001", 73 => "000000000", 74 => "000000000", 75 => "111101011", 
    76 => "000000000", 77 => "000101011", 78 => "000000111", 79 => "000100011", 
    80 => "000000000", 81 => "001001111", 82 => "000001100", 83 => "000111110", 
    84 => "111110111", 85 => "000000000", 86 => "111101101", 87 => "000000000", 
    88 => "111101100", 89 => "000010010", 90 => "000101010", 91 => "000110111", 
    92 => "000010100", 93 => "000101100", 94 => "001000000", 95 => "000000000", 
    96 => "000001110", 97 => "000010010", 98 => "000000000", 99 => "000011100", 
    100 => "000001101", 101 => "000000000", 102 => "000101010", 103 => "111110011", 
    104 => "000000000", 105 => "000000000", 106 => "000000000", 107 => "000010001", 
    108 => "000011011", 109 => "111110010", 110 => "000010010", 111 => "000111101", 
    112 => "000100011", 113 => "000110100", 114 => "000010011", 115 => "000010101", 
    116 => "111011111", 117 => "000000000", 118 => "000000000", 119 => "111100011", 
    120 => "111101000", 121 => "000110001", 122 => "000100111", 123 => "000101011", 
    124 => "111110100", 125 => "000000000", 126 => "000011011", 127 => "000101000", 
    128 => "000000000", 129 => "111011101", 130 => "000010000", 131 => "110001010", 
    132 => "110110010", 133 => "000000000", 134 => "111000010", 135 => "000110011", 
    136 => "000000000", 137 => "001010111", 138 => "000000000", 139 => "000000000", 
    140 => "111111010", 141 => "111000000", 142 => "111011111", 143 => "001010011", 
    144 => "000111000", 145 => "000100100", 146 => "000100100", 147 => "000101011", 
    148 => "000011011", 149 => "111110001", 150 => "000000000", 151 => "000001000", 
    152 => "111001110", 153 => "110101011", 154 => "000000000", 155 => "111010111", 
    156 => "000001011", 157 => "000010011", 158 => "000101011", 159 => "111101010", 
    160 => "000110011", 161 => "000000000", 162 => "000100010", 163 => "111101101", 
    164 => "001001110", 165 => "101100010", 166 => "000101110", 167 => "000011000", 
    168 => "001110011", 169 => "000000000", 170 => "110111110", 171 => "001111100", 
    172 => "000011100", 173 => "000000000", 174 => "010001001", 175 => "000111110", 
    176 => "000001101", 177 => "001111101", 178 => "000010110", 179 => "111011101", 
    180 => "110001010", 181 => "000000000", 182 => "000000000", 183 => "000000000", 
    184 => "001000011", 185 => "000010101", 186 => "110101011", 187 => "000100110", 
    188 => "110110110", 189 => "111010111", 190 => "110001101", 191 => "000011011", 
    192 => "111001010", 193 => "111000100", 194 => "000100011", 195 => "000111011", 
    196 => "011001000", 197 => "000000000", 198 => "000101001", 199 => "000011001", 
    200 => "000000000", 201 => "110101001", 202 => "000000000", 203 => "111011001", 
    204 => "111101111", 205 => "000000000", 206 => "000011000", 207 => "111100101", 
    208 => "010000001", 209 => "111110011", 210 => "110100001", 211 => "101110011", 
    212 => "000011100", 213 => "010100000", 214 => "101010010", 215 => "000000000", 
    216 => "000000000", 217 => "000000000", 218 => "000010001", 219 => "000011011", 
    220 => "111011101", 221 => "111011111", 222 => "000000000", 223 => "111100111", 
    224 => "111101110", 225 => "000010011", 226 => "000000000", 227 => "000000000", 
    228 => "000000000", 229 => "111011101", 230 => "111100011", 231 => "111011011", 
    232 => "111011101", 233 => "111101010", 234 => "000100000", 235 => "111101101", 
    236 => "111010100", 237 => "111000010", 238 => "000010110", 239 => "000000000", 
    240 => "111110100", 241 => "000000000", 242 => "111110011", 243 => "111101011", 
    244 => "000011001", 245 => "000011101", 246 => "110110001", 247 => "111010000", 
    248 => "111010000", 249 => "000010000", 250 => "111001110", 251 => "000000000", 
    252 => "000010010", 253 => "000000000", 254 => "000011000", 255 => "000101100", 
    256 => "000000000", 257 => "111101111", 258 => "000001101", 259 => "000100001", 
    260 => "111110100", 261 => "000101100", 262 => "000010111", 263 => "000000000", 
    264 => "000000000", 265 => "000000000", 266 => "000000000", 267 => "000000000", 
    268 => "000000000", 269 => "000010010", 270 => "111001100", 271 => "000000000", 
    272 => "000110100", 273 => "000000000", 274 => "000000000", 275 => "111110001", 
    276 => "000001011", 277 => "000011111", 278 => "000000000", 279 => "000100000", 
    280 => "000011001", 281 => "000000000", 282 => "000100001", 283 => "000111000", 
    284 => "000000000", 285 => "000100100", 286 => "000000000", 287 => "000010111", 
    288 => "111100000", 289 => "000011111", 290 => "000100101", 291 => "111011000", 
    292 => "000000000", 293 => "000101100", 294 => "111100110", 295 => "000000000", 
    296 => "000000000", 297 => "000011111", 298 => "000000000", 299 => "000011001", 
    300 => "000001100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

