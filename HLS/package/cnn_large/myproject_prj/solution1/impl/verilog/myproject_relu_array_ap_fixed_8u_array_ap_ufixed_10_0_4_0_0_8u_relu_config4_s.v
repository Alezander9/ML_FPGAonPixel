// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_8u_array_ap_ufixed_10_0_4_0_0_8u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer4_out_din,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_full_n,
        layer4_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] layer2_out_dout;
input  [7:0] layer2_out_num_data_valid;
input  [7:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [79:0] layer4_out_din;
input  [7:0] layer4_out_num_data_valid;
input  [7:0] layer4_out_fifo_cap;
input   layer4_out_full_n;
output   layer4_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer2_out_read;
reg layer4_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_137_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer4_out_blk_n;
reg   [6:0] i_fu_112;
wire   [6:0] i_6_fu_143_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] ap_sig_allocacmp_i_5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_fu_154_p1;
wire   [5:0] tmp_1_fu_238_p4;
wire   [0:0] icmp_ln52_fu_248_p2;
wire   [9:0] trunc_ln52_fu_234_p1;
wire   [0:0] icmp_ln51_fu_228_p2;
wire   [9:0] out_data_fu_254_p3;
wire   [15:0] in_data_1_fu_178_p4;
wire   [5:0] tmp_2_fu_286_p4;
wire   [0:0] icmp_ln52_1_fu_296_p2;
wire   [9:0] trunc_ln52_1_fu_276_p4;
wire   [0:0] icmp_ln51_1_fu_270_p2;
wire   [9:0] out_data_2_fu_302_p3;
wire   [15:0] in_data_2_fu_188_p4;
wire   [5:0] tmp_3_fu_334_p4;
wire   [0:0] icmp_ln52_2_fu_344_p2;
wire   [9:0] trunc_ln52_2_fu_324_p4;
wire   [0:0] icmp_ln51_2_fu_318_p2;
wire   [9:0] out_data_4_fu_350_p3;
wire   [15:0] in_data_3_fu_198_p4;
wire   [5:0] tmp_4_fu_382_p4;
wire   [0:0] icmp_ln52_3_fu_392_p2;
wire   [9:0] trunc_ln52_3_fu_372_p4;
wire   [0:0] icmp_ln51_3_fu_366_p2;
wire   [9:0] out_data_6_fu_398_p3;
wire   [15:0] tmp_fu_208_p4;
wire   [5:0] tmp_5_fu_430_p4;
wire   [0:0] icmp_ln52_4_fu_440_p2;
wire   [9:0] trunc_ln52_4_fu_420_p4;
wire   [0:0] icmp_ln51_4_fu_414_p2;
wire   [9:0] select_ln52_fu_446_p3;
wire   [15:0] tmp_8_fu_218_p4;
wire   [5:0] tmp_6_fu_478_p4;
wire   [0:0] icmp_ln52_5_fu_488_p2;
wire   [9:0] trunc_ln52_5_fu_468_p4;
wire   [0:0] icmp_ln51_5_fu_462_p2;
wire   [9:0] select_ln52_1_fu_494_p3;
wire   [15:0] trunc_ln44_6_fu_158_p4;
wire   [5:0] tmp_7_fu_526_p4;
wire   [0:0] icmp_ln52_6_fu_536_p2;
wire   [9:0] trunc_ln52_6_fu_516_p4;
wire   [0:0] icmp_ln51_6_fu_510_p2;
wire   [9:0] select_ln52_2_fu_542_p3;
wire   [15:0] trunc_ln44_7_fu_168_p4;
wire   [5:0] tmp_s_fu_574_p4;
wire   [0:0] icmp_ln52_7_fu_584_p2;
wire   [9:0] trunc_ln52_7_fu_564_p4;
wire   [0:0] icmp_ln51_7_fu_558_p2;
wire   [9:0] select_ln52_3_fu_590_p3;
wire   [9:0] select_ln51_3_fu_598_p3;
wire   [9:0] select_ln51_2_fu_550_p3;
wire   [9:0] select_ln51_1_fu_502_p3;
wire   [9:0] select_ln51_fu_454_p3;
wire   [9:0] out_data_7_fu_406_p3;
wire   [9:0] out_data_5_fu_358_p3;
wire   [9:0] out_data_3_fu_310_p3;
wire   [9:0] out_data_1_fu_262_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_101;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        if ((icmp_ln41_fu_137_p2 == 1'd0)) begin
            i_fu_112 <= i_6_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_112 <= 7'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_5 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_full_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_write = 1'b1;
    end else begin
        layer4_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer4_out_full_n == 1'b0) | (layer2_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer4_out_full_n == 1'b0) | (layer2_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer4_out_full_n == 1'b0) | (layer2_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((layer4_out_full_n == 1'b0) | (layer2_out_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_6_fu_143_p2 = (ap_sig_allocacmp_i_5 + 7'd1);

assign icmp_ln41_fu_137_p2 = ((ap_sig_allocacmp_i_5 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_270_p2 = (($signed(in_data_1_fu_178_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_318_p2 = (($signed(in_data_2_fu_188_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_366_p2 = (($signed(in_data_3_fu_198_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_414_p2 = (($signed(tmp_fu_208_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_462_p2 = (($signed(tmp_8_fu_218_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_510_p2 = (($signed(trunc_ln44_6_fu_158_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_558_p2 = (($signed(trunc_ln44_7_fu_168_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_228_p2 = (($signed(in_data_fu_154_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_296_p2 = ((tmp_2_fu_286_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_344_p2 = ((tmp_3_fu_334_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_392_p2 = ((tmp_4_fu_382_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_440_p2 = ((tmp_5_fu_430_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_488_p2 = ((tmp_6_fu_478_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_536_p2 = ((tmp_7_fu_526_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_584_p2 = ((tmp_s_fu_574_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_248_p2 = ((tmp_1_fu_238_p4 != 6'd0) ? 1'b1 : 1'b0);

assign in_data_1_fu_178_p4 = {{layer2_out_dout[31:16]}};

assign in_data_2_fu_188_p4 = {{layer2_out_dout[47:32]}};

assign in_data_3_fu_198_p4 = {{layer2_out_dout[63:48]}};

assign in_data_fu_154_p1 = layer2_out_dout[15:0];

assign layer4_out_din = {{{{{{{{select_ln51_3_fu_598_p3}, {select_ln51_2_fu_550_p3}}, {select_ln51_1_fu_502_p3}}, {select_ln51_fu_454_p3}}, {out_data_7_fu_406_p3}}, {out_data_5_fu_358_p3}}, {out_data_3_fu_310_p3}}, {out_data_1_fu_262_p3}};

assign out_data_1_fu_262_p3 = ((icmp_ln51_fu_228_p2[0:0] == 1'b1) ? out_data_fu_254_p3 : 10'd0);

assign out_data_2_fu_302_p3 = ((icmp_ln52_1_fu_296_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_1_fu_276_p4);

assign out_data_3_fu_310_p3 = ((icmp_ln51_1_fu_270_p2[0:0] == 1'b1) ? out_data_2_fu_302_p3 : 10'd0);

assign out_data_4_fu_350_p3 = ((icmp_ln52_2_fu_344_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_2_fu_324_p4);

assign out_data_5_fu_358_p3 = ((icmp_ln51_2_fu_318_p2[0:0] == 1'b1) ? out_data_4_fu_350_p3 : 10'd0);

assign out_data_6_fu_398_p3 = ((icmp_ln52_3_fu_392_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_3_fu_372_p4);

assign out_data_7_fu_406_p3 = ((icmp_ln51_3_fu_366_p2[0:0] == 1'b1) ? out_data_6_fu_398_p3 : 10'd0);

assign out_data_fu_254_p3 = ((icmp_ln52_fu_248_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_fu_234_p1);

assign select_ln51_1_fu_502_p3 = ((icmp_ln51_5_fu_462_p2[0:0] == 1'b1) ? select_ln52_1_fu_494_p3 : 10'd0);

assign select_ln51_2_fu_550_p3 = ((icmp_ln51_6_fu_510_p2[0:0] == 1'b1) ? select_ln52_2_fu_542_p3 : 10'd0);

assign select_ln51_3_fu_598_p3 = ((icmp_ln51_7_fu_558_p2[0:0] == 1'b1) ? select_ln52_3_fu_590_p3 : 10'd0);

assign select_ln51_fu_454_p3 = ((icmp_ln51_4_fu_414_p2[0:0] == 1'b1) ? select_ln52_fu_446_p3 : 10'd0);

assign select_ln52_1_fu_494_p3 = ((icmp_ln52_5_fu_488_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_5_fu_468_p4);

assign select_ln52_2_fu_542_p3 = ((icmp_ln52_6_fu_536_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_6_fu_516_p4);

assign select_ln52_3_fu_590_p3 = ((icmp_ln52_7_fu_584_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_7_fu_564_p4);

assign select_ln52_fu_446_p3 = ((icmp_ln52_4_fu_440_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_4_fu_420_p4);

assign start_out = real_start;

assign tmp_1_fu_238_p4 = {{layer2_out_dout[15:10]}};

assign tmp_2_fu_286_p4 = {{layer2_out_dout[31:26]}};

assign tmp_3_fu_334_p4 = {{layer2_out_dout[47:42]}};

assign tmp_4_fu_382_p4 = {{layer2_out_dout[63:58]}};

assign tmp_5_fu_430_p4 = {{layer2_out_dout[79:74]}};

assign tmp_6_fu_478_p4 = {{layer2_out_dout[95:90]}};

assign tmp_7_fu_526_p4 = {{layer2_out_dout[111:106]}};

assign tmp_8_fu_218_p4 = {{layer2_out_dout[95:80]}};

assign tmp_fu_208_p4 = {{layer2_out_dout[79:64]}};

assign tmp_s_fu_574_p4 = {{layer2_out_dout[127:122]}};

assign trunc_ln44_6_fu_158_p4 = {{layer2_out_dout[111:96]}};

assign trunc_ln44_7_fu_168_p4 = {{layer2_out_dout[127:112]}};

assign trunc_ln52_1_fu_276_p4 = {{layer2_out_dout[25:16]}};

assign trunc_ln52_2_fu_324_p4 = {{layer2_out_dout[41:32]}};

assign trunc_ln52_3_fu_372_p4 = {{layer2_out_dout[57:48]}};

assign trunc_ln52_4_fu_420_p4 = {{layer2_out_dout[73:64]}};

assign trunc_ln52_5_fu_468_p4 = {{layer2_out_dout[89:80]}};

assign trunc_ln52_6_fu_516_p4 = {{layer2_out_dout[105:96]}};

assign trunc_ln52_7_fu_564_p4 = {{layer2_out_dout[121:112]}};

assign trunc_ln52_fu_234_p1 = layer2_out_dout[9:0];

endmodule //myproject_relu_array_ap_fixed_8u_array_ap_ufixed_10_0_4_0_0_8u_relu_config4_s
