-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer6_out_dout : IN STD_LOGIC_VECTOR (207 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_empty_n : IN STD_LOGIC;
    layer6_out_read : OUT STD_LOGIC;
    layer8_out_din : OUT STD_LOGIC_VECTOR (129 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    layer8_out_full_n : IN STD_LOGIC;
    layer8_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer6_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer8_out_blk_n : STD_LOGIC;
    signal i_fu_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_fu_183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_data_fu_194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_328_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_fu_344_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_4_fu_218_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_376_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_8_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_8_fu_366_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_8_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_9_fu_392_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_5_fu_228_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_424_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_9_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_9_fu_414_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_9_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_11_fu_440_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_6_fu_238_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_472_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_10_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_462_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_10_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_13_fu_488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_248_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_520_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_11_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_fu_510_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_11_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_536_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_258_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_568_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_12_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_558_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_12_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_584_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_268_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_616_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_13_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_606_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_13_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_5_fu_632_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_278_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_664_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_14_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_4_fu_654_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_14_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_6_fu_680_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_288_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_712_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_15_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_702_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_15_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_7_fu_728_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_298_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_760_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_16_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_6_fu_750_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_16_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_8_fu_776_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_308_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_808_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_17_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_7_fu_798_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_17_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_9_fu_824_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_s_fu_198_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_856_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_18_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_10_fu_846_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_18_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_10_fu_872_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_1_fu_208_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_904_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_19_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_11_fu_894_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_19_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_11_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_11_fu_928_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_10_fu_880_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_9_fu_832_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_8_fu_784_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_7_fu_736_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_6_fu_688_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_5_fu_640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_4_fu_592_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_fu_544_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_data_14_fu_496_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_data_12_fu_448_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_data_10_fu_400_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_data_8_fu_352_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_101 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                if ((icmp_ln41_fu_177_p2 = ap_const_lv1_0)) then 
                    i_fu_152 <= i_8_fu_183_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_152 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer8_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer8_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer8_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer6_out_empty_n, layer8_out_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((layer8_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0));
    end process;


    ap_condition_101_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_101 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_177_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_177_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_152, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_7 <= i_fu_152;
        end if; 
    end process;

    i_8_fu_183_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv5_1));
    icmp_ln41_fu_177_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv5_18) else "0";
    icmp_ln51_10_fu_456_p2 <= "1" when (signed(in_data_6_fu_238_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_11_fu_504_p2 <= "1" when (signed(tmp_fu_248_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_12_fu_552_p2 <= "1" when (signed(tmp_s_fu_258_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_13_fu_600_p2 <= "1" when (signed(tmp_1_fu_268_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_14_fu_648_p2 <= "1" when (signed(tmp_2_fu_278_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_15_fu_696_p2 <= "1" when (signed(tmp_3_fu_288_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_16_fu_744_p2 <= "1" when (signed(tmp_4_fu_298_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_17_fu_792_p2 <= "1" when (signed(tmp_5_fu_308_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_18_fu_840_p2 <= "1" when (signed(trunc_ln44_s_fu_198_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_19_fu_888_p2 <= "1" when (signed(trunc_ln44_1_fu_208_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_8_fu_360_p2 <= "1" when (signed(in_data_4_fu_218_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_9_fu_408_p2 <= "1" when (signed(in_data_5_fu_228_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_318_p2 <= "1" when (signed(in_data_fu_194_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_10_fu_482_p2 <= "0" when (tmp_9_fu_472_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_11_fu_530_p2 <= "0" when (tmp_10_fu_520_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_12_fu_578_p2 <= "0" when (tmp_11_fu_568_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_13_fu_626_p2 <= "0" when (tmp_12_fu_616_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_14_fu_674_p2 <= "0" when (tmp_13_fu_664_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_15_fu_722_p2 <= "0" when (tmp_14_fu_712_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_16_fu_770_p2 <= "0" when (tmp_15_fu_760_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_17_fu_818_p2 <= "0" when (tmp_16_fu_808_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_18_fu_866_p2 <= "0" when (tmp_17_fu_856_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_19_fu_914_p2 <= "0" when (tmp_18_fu_904_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_8_fu_386_p2 <= "0" when (tmp_7_fu_376_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_9_fu_434_p2 <= "0" when (tmp_8_fu_424_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_fu_338_p2 <= "0" when (tmp_6_fu_328_p4 = ap_const_lv6_0) else "1";
    in_data_4_fu_218_p4 <= layer6_out_dout(31 downto 16);
    in_data_5_fu_228_p4 <= layer6_out_dout(47 downto 32);
    in_data_6_fu_238_p4 <= layer6_out_dout(63 downto 48);
    in_data_fu_194_p1 <= layer6_out_dout(16 - 1 downto 0);

    layer6_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer6_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_blk_n <= layer6_out_empty_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer6_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_read <= ap_const_logic_1;
        else 
            layer6_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer8_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer8_out_blk_n <= layer8_out_full_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer8_out_din <= ((((((((((((select_ln51_11_fu_928_p3 & select_ln51_10_fu_880_p3) & select_ln51_9_fu_832_p3) & select_ln51_8_fu_784_p3) & select_ln51_7_fu_736_p3) & select_ln51_6_fu_688_p3) & select_ln51_5_fu_640_p3) & select_ln51_4_fu_592_p3) & select_ln51_fu_544_p3) & out_data_14_fu_496_p3) & out_data_12_fu_448_p3) & out_data_10_fu_400_p3) & out_data_8_fu_352_p3);

    layer8_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer8_out_write <= ap_const_logic_1;
        else 
            layer8_out_write <= ap_const_logic_0;
        end if; 
    end process;

    out_data_10_fu_400_p3 <= 
        out_data_9_fu_392_p3 when (icmp_ln51_8_fu_360_p2(0) = '1') else 
        ap_const_lv10_0;
    out_data_11_fu_440_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_9_fu_434_p2(0) = '1') else 
        trunc_ln52_9_fu_414_p4;
    out_data_12_fu_448_p3 <= 
        out_data_11_fu_440_p3 when (icmp_ln51_9_fu_408_p2(0) = '1') else 
        ap_const_lv10_0;
    out_data_13_fu_488_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_10_fu_482_p2(0) = '1') else 
        trunc_ln52_s_fu_462_p4;
    out_data_14_fu_496_p3 <= 
        out_data_13_fu_488_p3 when (icmp_ln51_10_fu_456_p2(0) = '1') else 
        ap_const_lv10_0;
    out_data_8_fu_352_p3 <= 
        out_data_fu_344_p3 when (icmp_ln51_fu_318_p2(0) = '1') else 
        ap_const_lv10_0;
    out_data_9_fu_392_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_8_fu_386_p2(0) = '1') else 
        trunc_ln52_8_fu_366_p4;
    out_data_fu_344_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_fu_338_p2(0) = '1') else 
        trunc_ln52_fu_324_p1;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_10_fu_880_p3 <= 
        select_ln52_10_fu_872_p3 when (icmp_ln51_18_fu_840_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_11_fu_928_p3 <= 
        select_ln52_11_fu_920_p3 when (icmp_ln51_19_fu_888_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_4_fu_592_p3 <= 
        select_ln52_4_fu_584_p3 when (icmp_ln51_12_fu_552_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_5_fu_640_p3 <= 
        select_ln52_5_fu_632_p3 when (icmp_ln51_13_fu_600_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_6_fu_688_p3 <= 
        select_ln52_6_fu_680_p3 when (icmp_ln51_14_fu_648_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_7_fu_736_p3 <= 
        select_ln52_7_fu_728_p3 when (icmp_ln51_15_fu_696_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_8_fu_784_p3 <= 
        select_ln52_8_fu_776_p3 when (icmp_ln51_16_fu_744_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_9_fu_832_p3 <= 
        select_ln52_9_fu_824_p3 when (icmp_ln51_17_fu_792_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_fu_544_p3 <= 
        select_ln52_fu_536_p3 when (icmp_ln51_11_fu_504_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln52_10_fu_872_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_18_fu_866_p2(0) = '1') else 
        trunc_ln52_10_fu_846_p4;
    select_ln52_11_fu_920_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_19_fu_914_p2(0) = '1') else 
        trunc_ln52_11_fu_894_p4;
    select_ln52_4_fu_584_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_12_fu_578_p2(0) = '1') else 
        trunc_ln52_2_fu_558_p4;
    select_ln52_5_fu_632_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_13_fu_626_p2(0) = '1') else 
        trunc_ln52_3_fu_606_p4;
    select_ln52_6_fu_680_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_14_fu_674_p2(0) = '1') else 
        trunc_ln52_4_fu_654_p4;
    select_ln52_7_fu_728_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_15_fu_722_p2(0) = '1') else 
        trunc_ln52_5_fu_702_p4;
    select_ln52_8_fu_776_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_16_fu_770_p2(0) = '1') else 
        trunc_ln52_6_fu_750_p4;
    select_ln52_9_fu_824_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_17_fu_818_p2(0) = '1') else 
        trunc_ln52_7_fu_798_p4;
    select_ln52_fu_536_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_11_fu_530_p2(0) = '1') else 
        trunc_ln52_1_fu_510_p4;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_520_p4 <= layer6_out_dout(79 downto 74);
    tmp_11_fu_568_p4 <= layer6_out_dout(95 downto 90);
    tmp_12_fu_616_p4 <= layer6_out_dout(111 downto 106);
    tmp_13_fu_664_p4 <= layer6_out_dout(127 downto 122);
    tmp_14_fu_712_p4 <= layer6_out_dout(143 downto 138);
    tmp_15_fu_760_p4 <= layer6_out_dout(159 downto 154);
    tmp_16_fu_808_p4 <= layer6_out_dout(175 downto 170);
    tmp_17_fu_856_p4 <= layer6_out_dout(191 downto 186);
    tmp_18_fu_904_p4 <= layer6_out_dout(207 downto 202);
    tmp_1_fu_268_p4 <= layer6_out_dout(111 downto 96);
    tmp_2_fu_278_p4 <= layer6_out_dout(127 downto 112);
    tmp_3_fu_288_p4 <= layer6_out_dout(143 downto 128);
    tmp_4_fu_298_p4 <= layer6_out_dout(159 downto 144);
    tmp_5_fu_308_p4 <= layer6_out_dout(175 downto 160);
    tmp_6_fu_328_p4 <= layer6_out_dout(15 downto 10);
    tmp_7_fu_376_p4 <= layer6_out_dout(31 downto 26);
    tmp_8_fu_424_p4 <= layer6_out_dout(47 downto 42);
    tmp_9_fu_472_p4 <= layer6_out_dout(63 downto 58);
    tmp_fu_248_p4 <= layer6_out_dout(79 downto 64);
    tmp_s_fu_258_p4 <= layer6_out_dout(95 downto 80);
    trunc_ln44_1_fu_208_p4 <= layer6_out_dout(207 downto 192);
    trunc_ln44_s_fu_198_p4 <= layer6_out_dout(191 downto 176);
    trunc_ln52_10_fu_846_p4 <= layer6_out_dout(185 downto 176);
    trunc_ln52_11_fu_894_p4 <= layer6_out_dout(201 downto 192);
    trunc_ln52_1_fu_510_p4 <= layer6_out_dout(73 downto 64);
    trunc_ln52_2_fu_558_p4 <= layer6_out_dout(89 downto 80);
    trunc_ln52_3_fu_606_p4 <= layer6_out_dout(105 downto 96);
    trunc_ln52_4_fu_654_p4 <= layer6_out_dout(121 downto 112);
    trunc_ln52_5_fu_702_p4 <= layer6_out_dout(137 downto 128);
    trunc_ln52_6_fu_750_p4 <= layer6_out_dout(153 downto 144);
    trunc_ln52_7_fu_798_p4 <= layer6_out_dout(169 downto 160);
    trunc_ln52_8_fu_366_p4 <= layer6_out_dout(25 downto 16);
    trunc_ln52_9_fu_414_p4 <= layer6_out_dout(41 downto 32);
    trunc_ln52_fu_324_p1 <= layer6_out_dout(10 - 1 downto 0);
    trunc_ln52_s_fu_462_p4 <= layer6_out_dout(57 downto 48);
end behav;
