-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_fixed_16u_array_ap_fixed_15_5_5_3_0_16u_config14_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer6_out_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer6_out_empty_n : IN STD_LOGIC;
    layer6_out_read : OUT STD_LOGIC;
    layer14_out_din : OUT STD_LOGIC_VECTOR (239 downto 0);
    layer14_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_full_n : IN STD_LOGIC;
    layer14_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_fixed_16u_array_ap_fixed_15_5_5_3_0_16u_config14_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_FE00 : STD_LOGIC_VECTOR (22 downto 0) := "00000001111111000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_12800 : STD_LOGIC_VECTOR (22 downto 0) := "00000010010100000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv23_7FEE00 : STD_LOGIC_VECTOR (22 downto 0) := "11111111110111000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv23_1200 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001001000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv23_1D800 : STD_LOGIC_VECTOR (22 downto 0) := "00000011101100000000000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv23_13000 : STD_LOGIC_VECTOR (22 downto 0) := "00000010011000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv23_7F8600 : STD_LOGIC_VECTOR (22 downto 0) := "11111111000011000000000";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv23_4800 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100100000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv23_9C00 : STD_LOGIC_VECTOR (22 downto 0) := "00000001001110000000000";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv23_9600 : STD_LOGIC_VECTOR (22 downto 0) := "00000001001011000000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv23_7E4600 : STD_LOGIC_VECTOR (22 downto 0) := "11111100100011000000000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv23_7EB400 : STD_LOGIC_VECTOR (22 downto 0) := "11111101011010000000000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv23_21E00 : STD_LOGIC_VECTOR (22 downto 0) := "00000100001111000000000";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv23_7E9200 : STD_LOGIC_VECTOR (22 downto 0) := "11111101001001000000000";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv23_7ECE00 : STD_LOGIC_VECTOR (22 downto 0) := "11111101100111000000000";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv23_7F0800 : STD_LOGIC_VECTOR (22 downto 0) := "11111110000100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer6_out_blk_n : STD_LOGIC;
    signal layer14_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln85_fu_151_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_fu_155_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_fu_163_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_179_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_31_fu_189_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_80_fu_197_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_133_fu_213_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_32_fu_223_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_81_fu_231_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_134_fu_247_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_33_fu_257_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_82_fu_265_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_135_fu_281_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_34_fu_291_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_83_fu_299_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_136_fu_315_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_35_fu_325_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_84_fu_333_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_137_fu_349_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_36_fu_359_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_85_fu_367_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_138_fu_383_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_37_fu_393_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_86_fu_401_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_139_fu_417_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_38_fu_427_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_87_fu_435_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_140_fu_451_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_39_fu_461_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_88_fu_469_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_141_fu_485_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_40_fu_495_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_89_fu_503_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_142_fu_519_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_41_fu_529_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_90_fu_537_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_143_fu_553_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_42_fu_563_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_91_fu_571_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_144_fu_587_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_43_fu_597_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_92_fu_605_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln6_fu_621_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_93_fu_631_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln85_3_fu_647_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_94_fu_657_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln41_86_fu_663_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_85_fu_637_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_84_fu_611_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_83_fu_577_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_82_fu_543_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_81_fu_509_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_80_fu_475_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_79_fu_441_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_78_fu_407_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_77_fu_373_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_76_fu_339_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_75_fu_305_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_74_fu_271_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_73_fu_237_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_s_fu_203_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_169_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer6_out_empty_n, layer14_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_80_fu_197_p2 <= std_logic_vector(unsigned(y_31_fu_189_p3) + unsigned(ap_const_lv23_12800));
    add_ln42_81_fu_231_p2 <= std_logic_vector(unsigned(y_32_fu_223_p3) + unsigned(ap_const_lv23_7FEE00));
    add_ln42_82_fu_265_p2 <= std_logic_vector(unsigned(y_33_fu_257_p3) + unsigned(ap_const_lv23_1200));
    add_ln42_83_fu_299_p2 <= std_logic_vector(unsigned(y_34_fu_291_p3) + unsigned(ap_const_lv23_1D800));
    add_ln42_84_fu_333_p2 <= std_logic_vector(unsigned(y_35_fu_325_p3) + unsigned(ap_const_lv23_13000));
    add_ln42_85_fu_367_p2 <= std_logic_vector(unsigned(y_36_fu_359_p3) + unsigned(ap_const_lv23_7F8600));
    add_ln42_86_fu_401_p2 <= std_logic_vector(unsigned(y_37_fu_393_p3) + unsigned(ap_const_lv23_4800));
    add_ln42_87_fu_435_p2 <= std_logic_vector(unsigned(y_38_fu_427_p3) + unsigned(ap_const_lv23_9C00));
    add_ln42_88_fu_469_p2 <= std_logic_vector(unsigned(y_39_fu_461_p3) + unsigned(ap_const_lv23_9600));
    add_ln42_89_fu_503_p2 <= std_logic_vector(unsigned(y_40_fu_495_p3) + unsigned(ap_const_lv23_7E4600));
    add_ln42_90_fu_537_p2 <= std_logic_vector(unsigned(y_41_fu_529_p3) + unsigned(ap_const_lv23_7EB400));
    add_ln42_91_fu_571_p2 <= std_logic_vector(unsigned(y_42_fu_563_p3) + unsigned(ap_const_lv23_21E00));
    add_ln42_92_fu_605_p2 <= std_logic_vector(unsigned(y_43_fu_597_p3) + unsigned(ap_const_lv23_7E9200));
    add_ln42_93_fu_631_p2 <= std_logic_vector(unsigned(trunc_ln6_fu_621_p4) + unsigned(ap_const_lv23_7ECE00));
    add_ln42_94_fu_657_p2 <= std_logic_vector(unsigned(trunc_ln85_3_fu_647_p4) + unsigned(ap_const_lv23_7F0800));
    add_ln42_fu_163_p2 <= std_logic_vector(unsigned(y_fu_155_p3) + unsigned(ap_const_lv23_FE00));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer6_out_empty_n, layer14_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer6_out_empty_n, layer14_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n, layer14_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n, layer14_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer14_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_blk_n <= layer14_out_full_n;
        else 
            layer14_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer14_out_din <= (((((((((((((((trunc_ln41_86_fu_663_p4 & trunc_ln41_85_fu_637_p4) & trunc_ln41_84_fu_611_p4) & trunc_ln41_83_fu_577_p4) & trunc_ln41_82_fu_543_p4) & trunc_ln41_81_fu_509_p4) & trunc_ln41_80_fu_475_p4) & trunc_ln41_79_fu_441_p4) & trunc_ln41_78_fu_407_p4) & trunc_ln41_77_fu_373_p4) & trunc_ln41_76_fu_339_p4) & trunc_ln41_75_fu_305_p4) & trunc_ln41_74_fu_271_p4) & trunc_ln41_73_fu_237_p4) & trunc_ln41_s_fu_203_p4) & trunc_ln_fu_169_p4);

    layer14_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n, layer14_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_write <= ap_const_logic_1;
        else 
            layer14_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer6_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer6_out_blk_n <= layer6_out_empty_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer6_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n, layer14_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0) or (layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer6_out_read <= ap_const_logic_1;
        else 
            layer6_out_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_133_fu_213_p4 <= layer6_out_dout(46 downto 32);
    tmp_134_fu_247_p4 <= layer6_out_dout(62 downto 48);
    tmp_135_fu_281_p4 <= layer6_out_dout(79 downto 64);
    tmp_136_fu_315_p4 <= layer6_out_dout(94 downto 80);
    tmp_137_fu_349_p4 <= layer6_out_dout(110 downto 96);
    tmp_138_fu_383_p4 <= layer6_out_dout(127 downto 112);
    tmp_139_fu_417_p4 <= layer6_out_dout(142 downto 128);
    tmp_140_fu_451_p4 <= layer6_out_dout(158 downto 144);
    tmp_141_fu_485_p4 <= layer6_out_dout(174 downto 160);
    tmp_142_fu_519_p4 <= layer6_out_dout(190 downto 176);
    tmp_143_fu_553_p4 <= layer6_out_dout(207 downto 192);
    tmp_144_fu_587_p4 <= layer6_out_dout(223 downto 208);
    tmp_s_fu_179_p4 <= layer6_out_dout(30 downto 16);
    trunc_ln41_73_fu_237_p4 <= add_ln42_81_fu_231_p2(22 downto 8);
    trunc_ln41_74_fu_271_p4 <= add_ln42_82_fu_265_p2(22 downto 8);
    trunc_ln41_75_fu_305_p4 <= add_ln42_83_fu_299_p2(22 downto 8);
    trunc_ln41_76_fu_339_p4 <= add_ln42_84_fu_333_p2(22 downto 8);
    trunc_ln41_77_fu_373_p4 <= add_ln42_85_fu_367_p2(22 downto 8);
    trunc_ln41_78_fu_407_p4 <= add_ln42_86_fu_401_p2(22 downto 8);
    trunc_ln41_79_fu_441_p4 <= add_ln42_87_fu_435_p2(22 downto 8);
    trunc_ln41_80_fu_475_p4 <= add_ln42_88_fu_469_p2(22 downto 8);
    trunc_ln41_81_fu_509_p4 <= add_ln42_89_fu_503_p2(22 downto 8);
    trunc_ln41_82_fu_543_p4 <= add_ln42_90_fu_537_p2(22 downto 8);
    trunc_ln41_83_fu_577_p4 <= add_ln42_91_fu_571_p2(22 downto 8);
    trunc_ln41_84_fu_611_p4 <= add_ln42_92_fu_605_p2(22 downto 8);
    trunc_ln41_85_fu_637_p4 <= add_ln42_93_fu_631_p2(22 downto 8);
    trunc_ln41_86_fu_663_p4 <= add_ln42_94_fu_657_p2(22 downto 8);
    trunc_ln41_s_fu_203_p4 <= add_ln42_80_fu_197_p2(22 downto 8);
    trunc_ln6_fu_621_p4 <= layer6_out_dout(238 downto 216);
    trunc_ln85_3_fu_647_p4 <= layer6_out_dout(254 downto 232);
    trunc_ln85_fu_151_p1 <= layer6_out_dout(15 - 1 downto 0);
    trunc_ln_fu_169_p4 <= add_ln42_fu_163_p2(22 downto 8);
    y_31_fu_189_p3 <= (tmp_s_fu_179_p4 & ap_const_lv8_0);
    y_32_fu_223_p3 <= (tmp_133_fu_213_p4 & ap_const_lv8_0);
    y_33_fu_257_p3 <= (tmp_134_fu_247_p4 & ap_const_lv8_0);
    y_34_fu_291_p3 <= (tmp_135_fu_281_p4 & ap_const_lv7_0);
    y_35_fu_325_p3 <= (tmp_136_fu_315_p4 & ap_const_lv8_0);
    y_36_fu_359_p3 <= (tmp_137_fu_349_p4 & ap_const_lv8_0);
    y_37_fu_393_p3 <= (tmp_138_fu_383_p4 & ap_const_lv7_0);
    y_38_fu_427_p3 <= (tmp_139_fu_417_p4 & ap_const_lv8_0);
    y_39_fu_461_p3 <= (tmp_140_fu_451_p4 & ap_const_lv8_0);
    y_40_fu_495_p3 <= (tmp_141_fu_485_p4 & ap_const_lv8_0);
    y_41_fu_529_p3 <= (tmp_142_fu_519_p4 & ap_const_lv8_0);
    y_42_fu_563_p3 <= (tmp_143_fu_553_p4 & ap_const_lv7_0);
    y_43_fu_597_p3 <= (tmp_144_fu_587_p4 & ap_const_lv7_0);
    y_fu_155_p3 <= (trunc_ln85_fu_151_p1 & ap_const_lv8_0);
end behav;
