-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_array_ap_ufixed_24u_array_ap_fixed_16_6_5_3_0_12u_config6_s_outidx_ROM_cud is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_array_ap_ufixed_24u_array_ap_fixed_16_6_5_3_0_12u_config6_s_outidx_ROM_cud is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000", 1 => "0000", 2 => "0000", 3 => "0000", 
    4 => "0000", 5 => "0000", 6 => "0000", 7 => "0000", 
    8 => "0000", 9 => "0000", 10 => "0000", 11 => "0000", 
    12 => "0000", 13 => "0000", 14 => "0000", 15 => "0000", 
    16 => "0000", 17 => "0000", 18 => "0000", 19 => "0000", 
    20 => "0000", 21 => "0000", 22 => "0000", 23 => "0000", 
    24 => "0001", 25 => "0001", 26 => "0001", 27 => "0001", 
    28 => "0001", 29 => "0001", 30 => "0001", 31 => "0001", 
    32 => "0001", 33 => "0001", 34 => "0001", 35 => "0001", 
    36 => "0001", 37 => "0001", 38 => "0001", 39 => "0001", 
    40 => "0001", 41 => "0001", 42 => "0001", 43 => "0001", 
    44 => "0001", 45 => "0001", 46 => "0001", 47 => "0001", 
    48 => "0010", 49 => "0010", 50 => "0010", 51 => "0010", 
    52 => "0010", 53 => "0010", 54 => "0010", 55 => "0010", 
    56 => "0010", 57 => "0010", 58 => "0010", 59 => "0010", 
    60 => "0010", 61 => "0010", 62 => "0010", 63 => "0010", 
    64 => "0010", 65 => "0010", 66 => "0010", 67 => "0010", 
    68 => "0010", 69 => "0010", 70 => "0010", 71 => "0010", 
    72 => "0011", 73 => "0011", 74 => "0011", 75 => "0011", 
    76 => "0011", 77 => "0011", 78 => "0011", 79 => "0011", 
    80 => "0011", 81 => "0011", 82 => "0011", 83 => "0011", 
    84 => "0011", 85 => "0011", 86 => "0011", 87 => "0011", 
    88 => "0011", 89 => "0011", 90 => "0011", 91 => "0011", 
    92 => "0011", 93 => "0011", 94 => "0011", 95 => "0011", 
    96 => "0100", 97 => "0100", 98 => "0100", 99 => "0100", 
    100 => "0100", 101 => "0100", 102 => "0100", 103 => "0100", 
    104 => "0100", 105 => "0100", 106 => "0100", 107 => "0100", 
    108 => "0100", 109 => "0100", 110 => "0100", 111 => "0100", 
    112 => "0100", 113 => "0100", 114 => "0100", 115 => "0100", 
    116 => "0100", 117 => "0100", 118 => "0100", 119 => "0100", 
    120 => "0101", 121 => "0101", 122 => "0101", 123 => "0101", 
    124 => "0101", 125 => "0101", 126 => "0101", 127 => "0101", 
    128 => "0101", 129 => "0101", 130 => "0101", 131 => "0101", 
    132 => "0101", 133 => "0101", 134 => "0101", 135 => "0101", 
    136 => "0101", 137 => "0101", 138 => "0101", 139 => "0101", 
    140 => "0101", 141 => "0101", 142 => "0101", 143 => "0101", 
    144 => "0110", 145 => "0110", 146 => "0110", 147 => "0110", 
    148 => "0110", 149 => "0110", 150 => "0110", 151 => "0110", 
    152 => "0110", 153 => "0110", 154 => "0110", 155 => "0110", 
    156 => "0110", 157 => "0110", 158 => "0110", 159 => "0110", 
    160 => "0110", 161 => "0110", 162 => "0110", 163 => "0110", 
    164 => "0110", 165 => "0110", 166 => "0110", 167 => "0110", 
    168 => "0111", 169 => "0111", 170 => "0111", 171 => "0111", 
    172 => "0111", 173 => "0111", 174 => "0111", 175 => "0111", 
    176 => "0111", 177 => "0111", 178 => "0111", 179 => "0111", 
    180 => "0111", 181 => "0111", 182 => "0111", 183 => "0111", 
    184 => "0111", 185 => "0111", 186 => "0111", 187 => "0111", 
    188 => "0111", 189 => "0111", 190 => "0111", 191 => "0111", 
    192 => "1000", 193 => "1000", 194 => "1000", 195 => "1000", 
    196 => "1000", 197 => "1000", 198 => "1000", 199 => "1000", 
    200 => "1000", 201 => "1000", 202 => "1000", 203 => "1000", 
    204 => "1000", 205 => "1000", 206 => "1000", 207 => "1000", 
    208 => "1000", 209 => "1000", 210 => "1000", 211 => "1000", 
    212 => "1000", 213 => "1000", 214 => "1000", 215 => "1000", 
    216 => "1001", 217 => "1001", 218 => "1001", 219 => "1001", 
    220 => "1001", 221 => "1001", 222 => "1001", 223 => "1001", 
    224 => "1001", 225 => "1001", 226 => "1001", 227 => "1001", 
    228 => "1001", 229 => "1001", 230 => "1001", 231 => "1001", 
    232 => "1001", 233 => "1001", 234 => "1001", 235 => "1001", 
    236 => "1001", 237 => "1001", 238 => "1001", 239 => "1001", 
    240 => "1010", 241 => "1010", 242 => "1010", 243 => "1010", 
    244 => "1010", 245 => "1010", 246 => "1010", 247 => "1010", 
    248 => "1010", 249 => "1010", 250 => "1010", 251 => "1010", 
    252 => "1010", 253 => "1010", 254 => "1010", 255 => "1010", 
    256 => "1010", 257 => "1010", 258 => "1010", 259 => "1010", 
    260 => "1010", 261 => "1010", 262 => "1010", 263 => "1010", 
    264 => "1011", 265 => "1011", 266 => "1011", 267 => "1011", 
    268 => "1011", 269 => "1011", 270 => "1011", 271 => "1011", 
    272 => "1011", 273 => "1011", 274 => "1011", 275 => "1011", 
    276 => "1011", 277 => "1011", 278 => "1011", 279 => "1011", 
    280 => "1011", 281 => "1011", 282 => "1011", 283 => "1011", 
    284 => "1011", 285 => "1011", 286 => "1011", 287 => "1011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

