-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_linear_array_array_ap_fixed_16_6_5_3_0_16u_linear_config7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer14_out_dout : IN STD_LOGIC_VECTOR (239 downto 0);
    layer14_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_empty_n : IN STD_LOGIC;
    layer14_out_read : OUT STD_LOGIC;
    layer7_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    layer7_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer7_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer7_out_full_n : IN STD_LOGIC;
    layer7_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_linear_array_array_ap_fixed_16_6_5_3_0_16u_linear_config7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer14_out_blk_n : STD_LOGIC;
    signal layer7_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln22_fu_117_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_44_fu_261_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_s_fu_121_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_32_fu_141_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_33_fu_151_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_33_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_287_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln22_34_fu_161_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_34_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_299_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln22_35_fu_171_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_35_fu_307_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_35_fu_311_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln22_36_fu_181_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_36_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_323_p3 : STD_LOGIC_VECTOR (78 downto 0);
    signal trunc_ln22_37_fu_191_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_37_fu_331_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_37_fu_335_p3 : STD_LOGIC_VECTOR (94 downto 0);
    signal trunc_ln22_38_fu_201_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_38_fu_343_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_38_fu_347_p3 : STD_LOGIC_VECTOR (110 downto 0);
    signal trunc_ln22_39_fu_211_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_39_fu_355_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_39_fu_359_p3 : STD_LOGIC_VECTOR (126 downto 0);
    signal trunc_ln22_40_fu_221_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_40_fu_367_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_40_fu_371_p3 : STD_LOGIC_VECTOR (142 downto 0);
    signal trunc_ln22_41_fu_231_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_41_fu_379_p1 : STD_LOGIC_VECTOR (143 downto 0);
    signal tmp_41_fu_383_p3 : STD_LOGIC_VECTOR (158 downto 0);
    signal trunc_ln22_42_fu_241_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_42_fu_391_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_42_fu_395_p3 : STD_LOGIC_VECTOR (174 downto 0);
    signal trunc_ln22_43_fu_251_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_43_fu_403_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_43_fu_407_p3 : STD_LOGIC_VECTOR (190 downto 0);
    signal trunc_ln22_31_fu_131_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_32_fu_279_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_44_fu_415_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal sext_ln29_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_419_p6 : STD_LOGIC_VECTOR (254 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer14_out_empty_n, layer7_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer14_out_empty_n, layer7_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer14_out_empty_n, layer7_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n, layer7_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n, layer7_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer14_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_blk_n <= layer14_out_empty_n;
        else 
            layer14_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer14_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n, layer7_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_read <= ap_const_logic_1;
        else 
            layer14_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer7_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer7_out_blk_n <= layer7_out_full_n;
        else 
            layer7_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer7_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_419_p6),256));


    layer7_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n, layer7_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer7_out_full_n = ap_const_logic_0) or (layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer7_out_write <= ap_const_logic_1;
        else 
            layer7_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln29_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_fu_117_p1),16));

        sext_ln32_32_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_s_fu_121_p4),16));

        sext_ln32_33_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_32_fu_141_p4),16));

        sext_ln32_34_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_287_p3),32));

        sext_ln32_35_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_299_p3),48));

        sext_ln32_36_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_311_p3),64));

        sext_ln32_37_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_323_p3),80));

        sext_ln32_38_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_335_p3),96));

        sext_ln32_39_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_347_p3),112));

        sext_ln32_40_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_fu_359_p3),128));

        sext_ln32_41_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_fu_371_p3),144));

        sext_ln32_42_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_fu_383_p3),160));

        sext_ln32_43_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_fu_395_p3),176));

        sext_ln32_44_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_407_p3),192));

        sext_ln32_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_44_fu_261_p4),16));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_33_fu_287_p3 <= (trunc_ln22_33_fu_151_p4 & sext_ln32_33_fu_283_p1);
    tmp_34_fu_299_p3 <= (trunc_ln22_34_fu_161_p4 & sext_ln32_34_fu_295_p1);
    tmp_35_fu_311_p3 <= (trunc_ln22_35_fu_171_p4 & sext_ln32_35_fu_307_p1);
    tmp_36_fu_323_p3 <= (trunc_ln22_36_fu_181_p4 & sext_ln32_36_fu_319_p1);
    tmp_37_fu_335_p3 <= (trunc_ln22_37_fu_191_p4 & sext_ln32_37_fu_331_p1);
    tmp_38_fu_347_p3 <= (trunc_ln22_38_fu_201_p4 & sext_ln32_38_fu_343_p1);
    tmp_39_fu_359_p3 <= (trunc_ln22_39_fu_211_p4 & sext_ln32_39_fu_355_p1);
    tmp_40_fu_371_p3 <= (trunc_ln22_40_fu_221_p4 & sext_ln32_40_fu_367_p1);
    tmp_41_fu_383_p3 <= (trunc_ln22_41_fu_231_p4 & sext_ln32_41_fu_379_p1);
    tmp_42_fu_395_p3 <= (trunc_ln22_42_fu_241_p4 & sext_ln32_42_fu_391_p1);
    tmp_43_fu_407_p3 <= (trunc_ln22_43_fu_251_p4 & sext_ln32_43_fu_403_p1);
    tmp_44_fu_419_p6 <= ((((trunc_ln22_31_fu_131_p4 & sext_ln32_32_fu_279_p1) & sext_ln32_fu_275_p1) & sext_ln32_44_fu_415_p1) & sext_ln29_fu_271_p1);
    trunc_ln22_31_fu_131_p4 <= layer14_out_dout(239 downto 225);
    trunc_ln22_32_fu_141_p4 <= layer14_out_dout(29 downto 15);
    trunc_ln22_33_fu_151_p4 <= layer14_out_dout(44 downto 30);
    trunc_ln22_34_fu_161_p4 <= layer14_out_dout(59 downto 45);
    trunc_ln22_35_fu_171_p4 <= layer14_out_dout(74 downto 60);
    trunc_ln22_36_fu_181_p4 <= layer14_out_dout(89 downto 75);
    trunc_ln22_37_fu_191_p4 <= layer14_out_dout(104 downto 90);
    trunc_ln22_38_fu_201_p4 <= layer14_out_dout(119 downto 105);
    trunc_ln22_39_fu_211_p4 <= layer14_out_dout(134 downto 120);
    trunc_ln22_40_fu_221_p4 <= layer14_out_dout(149 downto 135);
    trunc_ln22_41_fu_231_p4 <= layer14_out_dout(164 downto 150);
    trunc_ln22_42_fu_241_p4 <= layer14_out_dout(179 downto 165);
    trunc_ln22_43_fu_251_p4 <= layer14_out_dout(194 downto 180);
    trunc_ln22_44_fu_261_p4 <= layer14_out_dout(209 downto 195);
    trunc_ln22_fu_117_p1 <= layer14_out_dout(15 - 1 downto 0);
    trunc_ln22_s_fu_121_p4 <= layer14_out_dout(224 downto 210);
end behav;
