-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_ufixed_12u_array_ap_fixed_16_6_5_3_0_1u_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer9_out_dout : IN STD_LOGIC_VECTOR (179 downto 0);
    layer9_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer9_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer9_out_empty_n : IN STD_LOGIC;
    layer9_out_read : OUT STD_LOGIC;
    layer10_out_TREADY : IN STD_LOGIC;
    layer10_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer10_out_TVALID : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_ufixed_12u_array_ap_fixed_16_6_5_3_0_1u_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln42_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_142_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln42_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_702_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln42_reg_702_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_layer10_out_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w10_ce0 : STD_LOGIC;
    signal w10_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer9_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer10_out_TDATA_blk_n : STD_LOGIC;
    signal do_init_reg_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index3_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_index3_reg_154_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal res4_reg_337 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_4_phi_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_31_phi_reg_363 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_30_phi_reg_375 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_29_phi_reg_387 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_28_phi_reg_399 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_27_phi_reg_411 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_26_phi_reg_423 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_25_phi_reg_435 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_24_phi_reg_447 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_3_phi_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_32_phi_reg_471 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_phi_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_index_fu_495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_index_reg_697 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_fu_507_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_fu_684_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_reg_771 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_in_index3_phi_fu_158_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_res4_phi_fu_341_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_data_4_phi_phi_fu_355_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_phi_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_phi_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_4_phi_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_31_phi_phi_fu_367_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_31_phi_reg_363 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_31_phi_reg_363 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_31_phi_reg_363 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_30_phi_phi_fu_379_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_30_phi_reg_375 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_30_phi_reg_375 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_30_phi_reg_375 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_29_phi_phi_fu_391_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_29_phi_reg_387 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_29_phi_reg_387 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_29_phi_reg_387 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_28_phi_phi_fu_403_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_28_phi_reg_399 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_28_phi_reg_399 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_28_phi_reg_399 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_27_phi_phi_fu_415_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_27_phi_reg_411 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_27_phi_reg_411 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_27_phi_reg_411 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_26_phi_phi_fu_427_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_26_phi_reg_423 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_26_phi_reg_423 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_26_phi_reg_423 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_25_phi_phi_fu_439_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_25_phi_reg_435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_25_phi_reg_435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_25_phi_reg_435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_24_phi_phi_fu_451_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_24_phi_reg_447 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_24_phi_reg_447 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_24_phi_reg_447 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_3_phi_phi_fu_463_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_phi_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_phi_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_3_phi_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_32_phi_phi_fu_475_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_32_phi_reg_471 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_32_phi_reg_471 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_data_32_phi_reg_471 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_p_phi_phi_fu_487_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_p_phi_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_p_phi_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_p_phi_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln42_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_fu_626_p14 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_fu_664_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_fu_664_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_670_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln53_fu_680_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal layer10_out_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal layer10_out_TVALID_int_regslice : STD_LOGIC;
    signal layer10_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_layer10_out_U_vld_out : STD_LOGIC;
    signal mul_ln73_fu_664_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_100 : BOOLEAN;
    signal ap_condition_223 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mux_12_4_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        din4 : IN STD_LOGIC_VECTOR (14 downto 0);
        din5 : IN STD_LOGIC_VECTOR (14 downto 0);
        din6 : IN STD_LOGIC_VECTOR (14 downto 0);
        din7 : IN STD_LOGIC_VECTOR (14 downto 0);
        din8 : IN STD_LOGIC_VECTOR (14 downto 0);
        din9 : IN STD_LOGIC_VECTOR (14 downto 0);
        din10 : IN STD_LOGIC_VECTOR (14 downto 0);
        din11 : IN STD_LOGIC_VECTOR (14 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_15ns_9s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_dense_array_ap_ufixed_12u_array_ap_fixed_16_6_5_3_0_1u_config10_s_w10_ROM_AUTeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component myproject_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    w10_U : component myproject_dense_array_ap_ufixed_12u_array_ap_fixed_16_6_5_3_0_1u_config10_s_w10_ROM_AUTeOg
    generic map (
        DataWidth => 9,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w10_address0,
        ce0 => w10_ce0,
        q0 => w10_q0);

    mux_12_4_15_1_1_U33 : component myproject_mux_12_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        din3_WIDTH => 15,
        din4_WIDTH => 15,
        din5_WIDTH => 15,
        din6_WIDTH => 15,
        din7_WIDTH => 15,
        din8_WIDTH => 15,
        din9_WIDTH => 15,
        din10_WIDTH => 15,
        din11_WIDTH => 15,
        din12_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => ap_phi_mux_p_phi_phi_fu_487_p4,
        din1 => ap_phi_mux_data_24_phi_phi_fu_451_p4,
        din2 => ap_phi_mux_data_25_phi_phi_fu_439_p4,
        din3 => ap_phi_mux_data_26_phi_phi_fu_427_p4,
        din4 => ap_phi_mux_data_27_phi_phi_fu_415_p4,
        din5 => ap_phi_mux_data_28_phi_phi_fu_403_p4,
        din6 => ap_phi_mux_data_29_phi_phi_fu_391_p4,
        din7 => ap_phi_mux_data_30_phi_phi_fu_379_p4,
        din8 => ap_phi_mux_data_31_phi_phi_fu_367_p4,
        din9 => ap_phi_mux_data_4_phi_phi_fu_355_p4,
        din10 => ap_phi_mux_data_32_phi_phi_fu_475_p4,
        din11 => ap_phi_mux_data_3_phi_phi_fu_463_p4,
        din12 => in_index3_reg_154_pp0_iter1_reg,
        dout => a_fu_626_p14);

    mul_15ns_9s_24_1_1_U34 : component myproject_mul_15ns_9s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln73_fu_664_p0,
        din1 => w10_q0,
        dout => mul_ln73_fu_664_p2);

    regslice_both_layer10_out_U : component myproject_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => layer10_out_TDATA_int_regslice,
        vld_in => layer10_out_TVALID_int_regslice,
        ack_in => layer10_out_TREADY_int_regslice,
        data_out => layer10_out_TDATA,
        vld_out => regslice_both_layer10_out_U_vld_out,
        ack_out => layer10_out_TREADY,
        apdone_blk => regslice_both_layer10_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_data_24_phi_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_24_phi_reg_447 <= layer9_out_dout(29 downto 15);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_24_phi_reg_447 <= ap_phi_reg_pp0_iter1_data_24_phi_reg_447;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_25_phi_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_25_phi_reg_435 <= layer9_out_dout(44 downto 30);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_25_phi_reg_435 <= ap_phi_reg_pp0_iter1_data_25_phi_reg_435;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_26_phi_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_26_phi_reg_423 <= layer9_out_dout(59 downto 45);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_26_phi_reg_423 <= ap_phi_reg_pp0_iter1_data_26_phi_reg_423;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_27_phi_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_27_phi_reg_411 <= layer9_out_dout(74 downto 60);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_27_phi_reg_411 <= ap_phi_reg_pp0_iter1_data_27_phi_reg_411;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_28_phi_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_28_phi_reg_399 <= layer9_out_dout(89 downto 75);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_28_phi_reg_399 <= ap_phi_reg_pp0_iter1_data_28_phi_reg_399;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_29_phi_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_29_phi_reg_387 <= layer9_out_dout(104 downto 90);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_29_phi_reg_387 <= ap_phi_reg_pp0_iter1_data_29_phi_reg_387;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_30_phi_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_30_phi_reg_375 <= layer9_out_dout(119 downto 105);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_30_phi_reg_375 <= ap_phi_reg_pp0_iter1_data_30_phi_reg_375;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_31_phi_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_31_phi_reg_363 <= layer9_out_dout(134 downto 120);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_31_phi_reg_363 <= ap_phi_reg_pp0_iter1_data_31_phi_reg_363;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_32_phi_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_32_phi_reg_471 <= layer9_out_dout(164 downto 150);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_32_phi_reg_471 <= ap_phi_reg_pp0_iter1_data_32_phi_reg_471;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_3_phi_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_3_phi_reg_459 <= layer9_out_dout(179 downto 165);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_3_phi_reg_459 <= ap_phi_reg_pp0_iter1_data_3_phi_reg_459;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_data_4_phi_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_data_4_phi_reg_351 <= layer9_out_dout(149 downto 135);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_data_4_phi_reg_351 <= ap_phi_reg_pp0_iter1_data_4_phi_reg_351;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_phi_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_p_phi_reg_483 <= data_fu_507_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_phi_reg_483 <= ap_phi_reg_pp0_iter1_p_phi_reg_483;
                end if;
            end if; 
        end if;
    end process;

    data_24_phi_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_24_phi_reg_447 <= data_24_phi_reg_447;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_24_phi_reg_447 <= ap_phi_reg_pp0_iter2_data_24_phi_reg_447;
                end if;
            end if; 
        end if;
    end process;

    data_25_phi_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_25_phi_reg_435 <= data_25_phi_reg_435;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_25_phi_reg_435 <= ap_phi_reg_pp0_iter2_data_25_phi_reg_435;
                end if;
            end if; 
        end if;
    end process;

    data_26_phi_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_26_phi_reg_423 <= data_26_phi_reg_423;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_26_phi_reg_423 <= ap_phi_reg_pp0_iter2_data_26_phi_reg_423;
                end if;
            end if; 
        end if;
    end process;

    data_27_phi_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_27_phi_reg_411 <= data_27_phi_reg_411;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_27_phi_reg_411 <= ap_phi_reg_pp0_iter2_data_27_phi_reg_411;
                end if;
            end if; 
        end if;
    end process;

    data_28_phi_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_28_phi_reg_399 <= data_28_phi_reg_399;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_28_phi_reg_399 <= ap_phi_reg_pp0_iter2_data_28_phi_reg_399;
                end if;
            end if; 
        end if;
    end process;

    data_29_phi_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_29_phi_reg_387 <= data_29_phi_reg_387;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_29_phi_reg_387 <= ap_phi_reg_pp0_iter2_data_29_phi_reg_387;
                end if;
            end if; 
        end if;
    end process;

    data_30_phi_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_30_phi_reg_375 <= data_30_phi_reg_375;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_30_phi_reg_375 <= ap_phi_reg_pp0_iter2_data_30_phi_reg_375;
                end if;
            end if; 
        end if;
    end process;

    data_31_phi_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_31_phi_reg_363 <= data_31_phi_reg_363;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_31_phi_reg_363 <= ap_phi_reg_pp0_iter2_data_31_phi_reg_363;
                end if;
            end if; 
        end if;
    end process;

    data_32_phi_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_32_phi_reg_471 <= data_32_phi_reg_471;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_32_phi_reg_471 <= ap_phi_reg_pp0_iter2_data_32_phi_reg_471;
                end if;
            end if; 
        end if;
    end process;

    data_3_phi_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_3_phi_reg_459 <= data_3_phi_reg_459;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_3_phi_reg_459 <= ap_phi_reg_pp0_iter2_data_3_phi_reg_459;
                end if;
            end if; 
        end if;
    end process;

    data_4_phi_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    data_4_phi_reg_351 <= data_4_phi_reg_351;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    data_4_phi_reg_351 <= ap_phi_reg_pp0_iter2_data_4_phi_reg_351;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_0))) then 
                do_init_reg_138 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_138 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    in_index3_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_reg_702 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_index3_reg_154 <= in_index_reg_697;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_reg_702 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                in_index3_reg_154 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_phi_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_138 = ap_const_lv1_0)) then 
                    p_phi_reg_483 <= p_phi_reg_483;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_phi_reg_483 <= ap_phi_reg_pp0_iter2_p_phi_reg_483;
                end if;
            end if; 
        end if;
    end process;

    res4_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_0))) then 
                res4_reg_337 <= x_reg_771;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res4_reg_337 <= ap_const_lv14_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_data_24_phi_reg_447 <= ap_phi_reg_pp0_iter0_data_24_phi_reg_447;
                ap_phi_reg_pp0_iter1_data_25_phi_reg_435 <= ap_phi_reg_pp0_iter0_data_25_phi_reg_435;
                ap_phi_reg_pp0_iter1_data_26_phi_reg_423 <= ap_phi_reg_pp0_iter0_data_26_phi_reg_423;
                ap_phi_reg_pp0_iter1_data_27_phi_reg_411 <= ap_phi_reg_pp0_iter0_data_27_phi_reg_411;
                ap_phi_reg_pp0_iter1_data_28_phi_reg_399 <= ap_phi_reg_pp0_iter0_data_28_phi_reg_399;
                ap_phi_reg_pp0_iter1_data_29_phi_reg_387 <= ap_phi_reg_pp0_iter0_data_29_phi_reg_387;
                ap_phi_reg_pp0_iter1_data_30_phi_reg_375 <= ap_phi_reg_pp0_iter0_data_30_phi_reg_375;
                ap_phi_reg_pp0_iter1_data_31_phi_reg_363 <= ap_phi_reg_pp0_iter0_data_31_phi_reg_363;
                ap_phi_reg_pp0_iter1_data_32_phi_reg_471 <= ap_phi_reg_pp0_iter0_data_32_phi_reg_471;
                ap_phi_reg_pp0_iter1_data_3_phi_reg_459 <= ap_phi_reg_pp0_iter0_data_3_phi_reg_459;
                ap_phi_reg_pp0_iter1_data_4_phi_reg_351 <= ap_phi_reg_pp0_iter0_data_4_phi_reg_351;
                ap_phi_reg_pp0_iter1_p_phi_reg_483 <= ap_phi_reg_pp0_iter0_p_phi_reg_483;
                in_index_reg_697 <= in_index_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_reg_702 <= icmp_ln42_fu_501_p2;
                icmp_ln42_reg_702_pp0_iter1_reg <= icmp_ln42_reg_702;
                in_index3_reg_154_pp0_iter1_reg <= in_index3_reg_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln42_reg_702_pp0_iter2_reg <= icmp_ln42_reg_702_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                x_reg_771 <= x_fu_684_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, layer9_out_empty_n, ap_phi_mux_do_init_phi_fu_142_p6, ap_enable_reg_pp0_iter1, icmp_ln42_reg_702_pp0_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln42_reg_702_pp0_iter2_reg, regslice_both_layer10_out_U_apdone_blk, ap_enable_reg_pp0_iter3, layer10_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_layer10_out_U_apdone_blk = ap_const_logic_1) or ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (layer9_out_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, layer9_out_empty_n, ap_phi_mux_do_init_phi_fu_142_p6, ap_enable_reg_pp0_iter1, icmp_ln42_reg_702_pp0_iter1_reg, ap_block_state4_io, ap_enable_reg_pp0_iter2, icmp_ln42_reg_702_pp0_iter2_reg, regslice_both_layer10_out_U_apdone_blk, ap_block_state5_io, ap_enable_reg_pp0_iter3, layer10_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_layer10_out_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (layer9_out_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, layer9_out_empty_n, ap_phi_mux_do_init_phi_fu_142_p6, ap_enable_reg_pp0_iter1, icmp_ln42_reg_702_pp0_iter1_reg, ap_block_state4_io, ap_enable_reg_pp0_iter2, icmp_ln42_reg_702_pp0_iter2_reg, regslice_both_layer10_out_U_apdone_blk, ap_block_state5_io, ap_enable_reg_pp0_iter3, layer10_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_layer10_out_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (layer9_out_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(layer9_out_empty_n, ap_phi_mux_do_init_phi_fu_142_p6)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (layer9_out_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(icmp_ln42_reg_702_pp0_iter1_reg, layer10_out_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(icmp_ln42_reg_702_pp0_iter1_reg, layer10_out_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(icmp_ln42_reg_702_pp0_iter2_reg, layer10_out_TREADY_int_regslice)
    begin
                ap_block_state5_io <= ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter3_assign_proc : process(icmp_ln42_reg_702_pp0_iter2_reg, regslice_both_layer10_out_U_apdone_blk, layer10_out_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((regslice_both_layer10_out_U_apdone_blk = ap_const_logic_1) or ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1) and (layer10_out_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_100_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_100 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_223_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_223 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln42_reg_702_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_24_phi_phi_fu_451_p4_assign_proc : process(do_init_reg_138, data_24_phi_reg_447, ap_phi_reg_pp0_iter2_data_24_phi_reg_447)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_24_phi_phi_fu_451_p4 <= data_24_phi_reg_447;
        else 
            ap_phi_mux_data_24_phi_phi_fu_451_p4 <= ap_phi_reg_pp0_iter2_data_24_phi_reg_447;
        end if; 
    end process;


    ap_phi_mux_data_25_phi_phi_fu_439_p4_assign_proc : process(do_init_reg_138, data_25_phi_reg_435, ap_phi_reg_pp0_iter2_data_25_phi_reg_435)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_25_phi_phi_fu_439_p4 <= data_25_phi_reg_435;
        else 
            ap_phi_mux_data_25_phi_phi_fu_439_p4 <= ap_phi_reg_pp0_iter2_data_25_phi_reg_435;
        end if; 
    end process;


    ap_phi_mux_data_26_phi_phi_fu_427_p4_assign_proc : process(do_init_reg_138, data_26_phi_reg_423, ap_phi_reg_pp0_iter2_data_26_phi_reg_423)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_26_phi_phi_fu_427_p4 <= data_26_phi_reg_423;
        else 
            ap_phi_mux_data_26_phi_phi_fu_427_p4 <= ap_phi_reg_pp0_iter2_data_26_phi_reg_423;
        end if; 
    end process;


    ap_phi_mux_data_27_phi_phi_fu_415_p4_assign_proc : process(do_init_reg_138, data_27_phi_reg_411, ap_phi_reg_pp0_iter2_data_27_phi_reg_411)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_27_phi_phi_fu_415_p4 <= data_27_phi_reg_411;
        else 
            ap_phi_mux_data_27_phi_phi_fu_415_p4 <= ap_phi_reg_pp0_iter2_data_27_phi_reg_411;
        end if; 
    end process;


    ap_phi_mux_data_28_phi_phi_fu_403_p4_assign_proc : process(do_init_reg_138, data_28_phi_reg_399, ap_phi_reg_pp0_iter2_data_28_phi_reg_399)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_28_phi_phi_fu_403_p4 <= data_28_phi_reg_399;
        else 
            ap_phi_mux_data_28_phi_phi_fu_403_p4 <= ap_phi_reg_pp0_iter2_data_28_phi_reg_399;
        end if; 
    end process;


    ap_phi_mux_data_29_phi_phi_fu_391_p4_assign_proc : process(do_init_reg_138, data_29_phi_reg_387, ap_phi_reg_pp0_iter2_data_29_phi_reg_387)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_29_phi_phi_fu_391_p4 <= data_29_phi_reg_387;
        else 
            ap_phi_mux_data_29_phi_phi_fu_391_p4 <= ap_phi_reg_pp0_iter2_data_29_phi_reg_387;
        end if; 
    end process;


    ap_phi_mux_data_30_phi_phi_fu_379_p4_assign_proc : process(do_init_reg_138, data_30_phi_reg_375, ap_phi_reg_pp0_iter2_data_30_phi_reg_375)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_30_phi_phi_fu_379_p4 <= data_30_phi_reg_375;
        else 
            ap_phi_mux_data_30_phi_phi_fu_379_p4 <= ap_phi_reg_pp0_iter2_data_30_phi_reg_375;
        end if; 
    end process;


    ap_phi_mux_data_31_phi_phi_fu_367_p4_assign_proc : process(do_init_reg_138, data_31_phi_reg_363, ap_phi_reg_pp0_iter2_data_31_phi_reg_363)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_31_phi_phi_fu_367_p4 <= data_31_phi_reg_363;
        else 
            ap_phi_mux_data_31_phi_phi_fu_367_p4 <= ap_phi_reg_pp0_iter2_data_31_phi_reg_363;
        end if; 
    end process;


    ap_phi_mux_data_32_phi_phi_fu_475_p4_assign_proc : process(do_init_reg_138, data_32_phi_reg_471, ap_phi_reg_pp0_iter2_data_32_phi_reg_471)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_32_phi_phi_fu_475_p4 <= data_32_phi_reg_471;
        else 
            ap_phi_mux_data_32_phi_phi_fu_475_p4 <= ap_phi_reg_pp0_iter2_data_32_phi_reg_471;
        end if; 
    end process;


    ap_phi_mux_data_3_phi_phi_fu_463_p4_assign_proc : process(do_init_reg_138, data_3_phi_reg_459, ap_phi_reg_pp0_iter2_data_3_phi_reg_459)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_phi_phi_fu_463_p4 <= data_3_phi_reg_459;
        else 
            ap_phi_mux_data_3_phi_phi_fu_463_p4 <= ap_phi_reg_pp0_iter2_data_3_phi_reg_459;
        end if; 
    end process;


    ap_phi_mux_data_4_phi_phi_fu_355_p4_assign_proc : process(do_init_reg_138, data_4_phi_reg_351, ap_phi_reg_pp0_iter2_data_4_phi_reg_351)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_phi_phi_fu_355_p4 <= data_4_phi_reg_351;
        else 
            ap_phi_mux_data_4_phi_phi_fu_355_p4 <= ap_phi_reg_pp0_iter2_data_4_phi_reg_351;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_142_p6_assign_proc : process(icmp_ln42_reg_702_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, do_init_reg_138)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_142_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_142_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_142_p6 <= do_init_reg_138;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_142_p6 <= do_init_reg_138;
        end if; 
    end process;


    ap_phi_mux_in_index3_phi_fu_158_p6_assign_proc : process(icmp_ln42_reg_702, in_index3_reg_154, in_index_reg_697, ap_condition_100)
    begin
        if ((ap_const_boolean_1 = ap_condition_100)) then
            if ((icmp_ln42_reg_702 = ap_const_lv1_1)) then 
                ap_phi_mux_in_index3_phi_fu_158_p6 <= ap_const_lv4_0;
            elsif ((icmp_ln42_reg_702 = ap_const_lv1_0)) then 
                ap_phi_mux_in_index3_phi_fu_158_p6 <= in_index_reg_697;
            else 
                ap_phi_mux_in_index3_phi_fu_158_p6 <= in_index3_reg_154;
            end if;
        else 
            ap_phi_mux_in_index3_phi_fu_158_p6 <= in_index3_reg_154;
        end if; 
    end process;


    ap_phi_mux_p_phi_phi_fu_487_p4_assign_proc : process(do_init_reg_138, p_phi_reg_483, ap_phi_reg_pp0_iter2_p_phi_reg_483)
    begin
        if ((do_init_reg_138 = ap_const_lv1_0)) then 
            ap_phi_mux_p_phi_phi_fu_487_p4 <= p_phi_reg_483;
        else 
            ap_phi_mux_p_phi_phi_fu_487_p4 <= ap_phi_reg_pp0_iter2_p_phi_reg_483;
        end if; 
    end process;


    ap_phi_mux_res4_phi_fu_341_p6_assign_proc : process(icmp_ln42_reg_702_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, res4_reg_337, x_reg_771)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_res4_phi_fu_341_p6 <= ap_const_lv14_10;
            elsif ((icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_res4_phi_fu_341_p6 <= x_reg_771;
            else 
                ap_phi_mux_res4_phi_fu_341_p6 <= res4_reg_337;
            end if;
        else 
            ap_phi_mux_res4_phi_fu_341_p6 <= res4_reg_337;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_24_phi_reg_447 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_25_phi_reg_435 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_26_phi_reg_423 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_27_phi_reg_411 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_28_phi_reg_399 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_29_phi_reg_387 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_30_phi_reg_375 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_31_phi_reg_363 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_32_phi_reg_471 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_3_phi_reg_459 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_4_phi_reg_351 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_phi_reg_483 <= "XXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln42_fu_501_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    data_fu_507_p1 <= layer9_out_dout(15 - 1 downto 0);
    icmp_ln42_fu_501_p2 <= "1" when (ap_phi_mux_in_index3_phi_fu_158_p6 = ap_const_lv4_B) else "0";
    in_index_fu_495_p2 <= std_logic_vector(unsigned(ap_phi_mux_in_index3_phi_fu_158_p6) + unsigned(ap_const_lv4_1));

    layer10_out_TDATA_blk_n_assign_proc : process(icmp_ln42_reg_702_pp0_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln42_reg_702_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, layer10_out_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1)))) then 
            layer10_out_TDATA_blk_n <= layer10_out_TREADY_int_regslice;
        else 
            layer10_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer10_out_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(x_fu_684_p2),16));

    layer10_out_TVALID <= regslice_both_layer10_out_U_vld_out;

    layer10_out_TVALID_int_regslice_assign_proc : process(icmp_ln42_reg_702_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_702_pp0_iter1_reg = ap_const_lv1_1))) then 
            layer10_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            layer10_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    layer9_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, layer9_out_empty_n, ap_phi_mux_do_init_phi_fu_142_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer9_out_blk_n <= layer9_out_empty_n;
        else 
            layer9_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer9_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_do_init_phi_fu_142_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_142_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer9_out_read <= ap_const_logic_1;
        else 
            layer9_out_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_664_p0 <= mul_ln73_fu_664_p00(15 - 1 downto 0);
    mul_ln73_fu_664_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_626_p14),24));
        sext_ln53_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_670_p4),14));

    trunc_ln_fu_670_p4 <= mul_ln73_fu_664_p2(23 downto 14);
    w10_address0 <= zext_ln42_fu_621_p1(4 - 1 downto 0);

    w10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w10_ce0 <= ap_const_logic_1;
        else 
            w10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_684_p2 <= std_logic_vector(signed(sext_ln53_fu_680_p1) + signed(ap_phi_mux_res4_phi_fu_341_p6));
    zext_ln42_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index3_reg_154),64));
end behav;
