-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_ufixed_16u_array_ap_fixed_16_6_5_3_0_16u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer8_out_dout : IN STD_LOGIC_VECTOR (239 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_empty_n : IN STD_LOGIC;
    layer8_out_read : OUT STD_LOGIC;
    layer9_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    layer9_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer9_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer9_out_full_n : IN STD_LOGIC;
    layer9_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_ufixed_16u_array_ap_fixed_16_6_5_3_0_16u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv27_F27 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000111100100111";
    constant ap_const_lv27_83E : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000111110";
    constant ap_const_lv27_AF5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101011110101";
    constant ap_const_lv26_42D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000101101";
    constant ap_const_lv27_891 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100010010001";
    constant ap_const_lv28_10EB : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000011101011";
    constant ap_const_lv27_D6C : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000110101101100";
    constant ap_const_lv28_16BB : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001011010111011";
    constant ap_const_lv27_AF7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101011110111";
    constant ap_const_lv26_726 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011100100110";
    constant ap_const_lv28_1B47 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001101101000111";
    constant ap_const_lv28_100B : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000001011";
    constant ap_const_lv28_1016 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000010110";
    constant ap_const_lv28_1068 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000001101000";
    constant ap_const_lv27_CD1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000110011010001";
    constant ap_const_lv28_11CA : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000111001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv27_4078000 : STD_LOGIC_VECTOR (26 downto 0) := "100000001111000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv27_5E90000 : STD_LOGIC_VECTOR (26 downto 0) := "101111010010000000000000000";
    constant ap_const_lv28_ED90000 : STD_LOGIC_VECTOR (27 downto 0) := "1110110110010000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv26_C30000 : STD_LOGIC_VECTOR (25 downto 0) := "00110000110000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv27_3E8000 : STD_LOGIC_VECTOR (26 downto 0) := "000001111101000000000000000";
    constant ap_const_lv28_BFE8000 : STD_LOGIC_VECTOR (27 downto 0) := "1011111111101000000000000000";
    constant ap_const_lv28_F7A0000 : STD_LOGIC_VECTOR (27 downto 0) := "1111011110100000000000000000";
    constant ap_const_lv29_1EAA0000 : STD_LOGIC_VECTOR (28 downto 0) := "11110101010100000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv27_6808000 : STD_LOGIC_VECTOR (26 downto 0) := "110100000001000000000000000";
    constant ap_const_lv27_7A18000 : STD_LOGIC_VECTOR (26 downto 0) := "111101000011000000000000000";
    constant ap_const_lv29_1E718000 : STD_LOGIC_VECTOR (28 downto 0) := "11110011100011000000000000000";
    constant ap_const_lv28_EB48000 : STD_LOGIC_VECTOR (27 downto 0) := "1110101101001000000000000000";
    constant ap_const_lv28_C230000 : STD_LOGIC_VECTOR (27 downto 0) := "1100001000110000000000000000";
    constant ap_const_lv28_F538000 : STD_LOGIC_VECTOR (27 downto 0) := "1111010100111000000000000000";
    constant ap_const_lv28_E450000 : STD_LOGIC_VECTOR (27 downto 0) := "1110010001010000000000000000";
    constant ap_const_lv28_E3D0000 : STD_LOGIC_VECTOR (27 downto 0) := "1110001111010000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal layer9_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal a_40_reg_854 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal a_28_reg_859 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_29_reg_864 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_30_reg_869 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_31_reg_874 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_32_reg_879 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_33_reg_884 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_34_reg_889 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_35_reg_894 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_36_reg_899 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_37_reg_904 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_38_reg_909 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_39_reg_914 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_reg_919 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln4_reg_924 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln73_2_reg_929 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_s_reg_934 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln41_30_reg_939 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_944 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_103_reg_949 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln41_31_reg_954 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln41_32_reg_959 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln41_33_reg_964 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln41_34_reg_969 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln41_35_reg_974 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln41_36_reg_979 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln41_37_reg_984 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln41_38_reg_989 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln41_39_reg_994 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln41_40_reg_999 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln73_fu_403_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_33_fu_444_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_34_fu_464_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_35_fu_488_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_36_fu_508_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_37_fu_528_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_38_fu_548_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_39_fu_572_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_40_fu_596_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_41_fu_616_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_42_fu_640_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_43_fu_664_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_44_fu_684_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_45_fu_704_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_46_fu_724_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_47_fu_793_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_fu_269_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_fu_408_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_fu_408_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_32_fu_448_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_32_fu_448_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_fu_468_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_fu_468_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_33_fu_472_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_34_fu_492_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_34_fu_492_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_35_fu_512_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_35_fu_512_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_36_fu_532_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_20_fu_552_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_20_fu_552_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_37_fu_556_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_21_fu_576_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_38_fu_580_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_39_fu_600_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_39_fu_600_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_22_fu_620_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_22_fu_620_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_40_fu_624_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_23_fu_644_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_41_fu_648_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_42_fu_668_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_43_fu_688_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_44_fu_708_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_24_fu_728_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_24_fu_728_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_45_fu_732_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_46_fu_797_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln41_41_fu_803_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln41_38_fu_790_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_37_fu_787_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_36_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_35_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_34_fu_778_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_33_fu_775_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_32_fu_772_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_31_fu_769_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_30_fu_766_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_29_fu_763_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_1_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_fu_757_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_28_fu_754_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_27_fu_751_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_fu_748_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_813_p17 : STD_LOGIC_VECTOR (252 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_15ns_14ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    mul_15ns_14ns_28_1_1_U37 : component myproject_mul_15ns_14ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        dout => grp_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer9_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((layer8_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_28_reg_859 <= layer8_out_dout(44 downto 30);
                a_29_reg_864 <= layer8_out_dout(59 downto 45);
                a_30_reg_869 <= layer8_out_dout(74 downto 60);
                a_31_reg_874 <= layer8_out_dout(89 downto 75);
                a_32_reg_879 <= layer8_out_dout(104 downto 90);
                a_33_reg_884 <= layer8_out_dout(119 downto 105);
                a_34_reg_889 <= layer8_out_dout(134 downto 120);
                a_35_reg_894 <= layer8_out_dout(149 downto 135);
                a_36_reg_899 <= layer8_out_dout(164 downto 150);
                a_37_reg_904 <= layer8_out_dout(179 downto 165);
                a_38_reg_909 <= layer8_out_dout(194 downto 180);
                a_39_reg_914 <= layer8_out_dout(209 downto 195);
                a_40_reg_854 <= layer8_out_dout(29 downto 15);
                trunc_ln4_reg_924 <= layer8_out_dout(224 downto 210);
                trunc_ln73_2_reg_929 <= layer8_out_dout(239 downto 225);
                trunc_ln_reg_919 <= add_ln42_fu_408_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_103_reg_949 <= add_ln42_35_fu_512_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_reg_944 <= add_ln42_34_fu_492_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln41_30_reg_939 <= add_ln42_33_fu_472_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln41_31_reg_954 <= add_ln42_36_fu_532_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln41_32_reg_959 <= add_ln42_37_fu_556_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln41_33_reg_964 <= add_ln42_38_fu_580_p2(28 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln41_34_reg_969 <= add_ln42_39_fu_600_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln41_35_reg_974 <= add_ln42_40_fu_624_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln41_36_reg_979 <= add_ln42_41_fu_648_p2(28 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln41_37_reg_984 <= add_ln42_42_fu_668_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln41_38_reg_989 <= add_ln42_43_fu_688_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln41_39_reg_994 <= add_ln42_44_fu_708_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln41_40_reg_999 <= add_ln42_45_fu_732_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln41_s_reg_934 <= add_ln42_32_fu_448_p2(26 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer8_out_empty_n, layer9_out_full_n, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer8_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((layer9_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_269_p1 <= layer8_out_dout(15 - 1 downto 0);
    add_ln42_32_fu_448_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    add_ln42_32_fu_448_p2 <= std_logic_vector(unsigned(add_ln42_32_fu_448_p0) + unsigned(ap_const_lv27_5E90000));
    add_ln42_33_fu_472_p2 <= std_logic_vector(unsigned(zext_ln42_fu_468_p1) + unsigned(ap_const_lv28_ED90000));
    add_ln42_34_fu_492_p0 <= grp_fu_181_p2(26 - 1 downto 0);
    add_ln42_34_fu_492_p2 <= std_logic_vector(unsigned(add_ln42_34_fu_492_p0) + unsigned(ap_const_lv26_C30000));
    add_ln42_35_fu_512_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    add_ln42_35_fu_512_p2 <= std_logic_vector(unsigned(add_ln42_35_fu_512_p0) + unsigned(ap_const_lv27_3E8000));
    add_ln42_36_fu_532_p2 <= std_logic_vector(unsigned(grp_fu_181_p2) + unsigned(ap_const_lv28_BFE8000));
    add_ln42_37_fu_556_p2 <= std_logic_vector(unsigned(zext_ln42_20_fu_552_p1) + unsigned(ap_const_lv28_F7A0000));
    add_ln42_38_fu_580_p2 <= std_logic_vector(unsigned(zext_ln42_21_fu_576_p1) + unsigned(ap_const_lv29_1EAA0000));
    add_ln42_39_fu_600_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    add_ln42_39_fu_600_p2 <= std_logic_vector(unsigned(add_ln42_39_fu_600_p0) + unsigned(ap_const_lv27_6808000));
    add_ln42_40_fu_624_p2 <= std_logic_vector(unsigned(zext_ln42_22_fu_620_p1) + unsigned(ap_const_lv27_7A18000));
    add_ln42_41_fu_648_p2 <= std_logic_vector(unsigned(zext_ln42_23_fu_644_p1) + unsigned(ap_const_lv29_1E718000));
    add_ln42_42_fu_668_p2 <= std_logic_vector(unsigned(grp_fu_181_p2) + unsigned(ap_const_lv28_EB48000));
    add_ln42_43_fu_688_p2 <= std_logic_vector(unsigned(grp_fu_181_p2) + unsigned(ap_const_lv28_C230000));
    add_ln42_44_fu_708_p2 <= std_logic_vector(unsigned(grp_fu_181_p2) + unsigned(ap_const_lv28_F538000));
    add_ln42_45_fu_732_p2 <= std_logic_vector(unsigned(zext_ln42_24_fu_728_p1) + unsigned(ap_const_lv28_E450000));
    add_ln42_46_fu_797_p2 <= std_logic_vector(unsigned(grp_fu_181_p2) + unsigned(ap_const_lv28_E3D0000));
    add_ln42_fu_408_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    add_ln42_fu_408_p2 <= std_logic_vector(unsigned(add_ln42_fu_408_p0) + unsigned(ap_const_lv27_4078000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(layer9_out_full_n)
    begin
        if ((layer9_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer8_out_empty_n)
    begin
        if (((layer8_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer8_out_empty_n)
    begin
                ap_block_state1 <= ((layer8_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer9_out_full_n, ap_CS_fsm_state16)
    begin
        if (((layer9_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_181_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln73_fu_403_p1, zext_ln73_33_fu_444_p1, zext_ln73_34_fu_464_p1, zext_ln73_35_fu_488_p1, zext_ln73_36_fu_508_p1, zext_ln73_37_fu_528_p1, zext_ln73_38_fu_548_p1, zext_ln73_39_fu_572_p1, zext_ln73_40_fu_596_p1, zext_ln73_41_fu_616_p1, zext_ln73_42_fu_640_p1, zext_ln73_43_fu_664_p1, zext_ln73_44_fu_684_p1, zext_ln73_45_fu_704_p1, zext_ln73_46_fu_724_p1, zext_ln73_47_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_181_p0 <= zext_ln73_47_fu_793_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_181_p0 <= zext_ln73_46_fu_724_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_181_p0 <= zext_ln73_45_fu_704_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_181_p0 <= zext_ln73_44_fu_684_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_181_p0 <= zext_ln73_43_fu_664_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_181_p0 <= zext_ln73_42_fu_640_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_181_p0 <= zext_ln73_41_fu_616_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_181_p0 <= zext_ln73_40_fu_596_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_181_p0 <= zext_ln73_39_fu_572_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_181_p0 <= zext_ln73_38_fu_548_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_181_p0 <= zext_ln73_37_fu_528_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_181_p0 <= zext_ln73_36_fu_508_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_181_p0 <= zext_ln73_35_fu_488_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_181_p0 <= zext_ln73_34_fu_464_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_181_p0 <= zext_ln73_33_fu_444_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_181_p0 <= zext_ln73_fu_403_p1(15 - 1 downto 0);
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_181_p1 <= ap_const_lv28_11CA(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_181_p1 <= ap_const_lv27_CD1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_181_p1 <= ap_const_lv28_1068(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_181_p1 <= ap_const_lv28_1016(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_181_p1 <= ap_const_lv28_100B(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_181_p1 <= ap_const_lv28_1B47(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_181_p1 <= ap_const_lv26_726(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_181_p1 <= ap_const_lv27_AF7(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_181_p1 <= ap_const_lv28_16BB(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_181_p1 <= ap_const_lv27_D6C(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_181_p1 <= ap_const_lv28_10EB(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_181_p1 <= ap_const_lv27_891(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_181_p1 <= ap_const_lv26_42D(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_181_p1 <= ap_const_lv27_AF5(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_181_p1 <= ap_const_lv27_83E(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_181_p1 <= ap_const_lv27_F27(14 - 1 downto 0);
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(layer9_out_full_n, ap_CS_fsm_state16)
    begin
        if (((layer9_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer8_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_blk_n <= layer8_out_empty_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer8_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer8_out_empty_n)
    begin
        if ((not(((layer8_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_read <= ap_const_logic_1;
        else 
            layer8_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer9_out_blk_n_assign_proc : process(layer9_out_full_n, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer9_out_blk_n <= layer9_out_full_n;
        else 
            layer9_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer9_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_813_p17),256));


    layer9_out_write_assign_proc : process(layer9_out_full_n, ap_CS_fsm_state16)
    begin
        if (((layer9_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            layer9_out_write <= ap_const_logic_1;
        else 
            layer9_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln41_27_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_s_reg_934),16));

        sext_ln41_28_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_30_reg_939),16));

        sext_ln41_29_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_31_reg_954),16));

        sext_ln41_30_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_32_reg_959),16));

        sext_ln41_31_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_33_reg_964),16));

        sext_ln41_32_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_34_reg_969),16));

        sext_ln41_33_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_35_reg_974),16));

        sext_ln41_34_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_36_reg_979),16));

        sext_ln41_35_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_37_reg_984),16));

        sext_ln41_36_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_38_reg_989),16));

        sext_ln41_37_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_39_reg_994),16));

        sext_ln41_38_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_40_reg_999),16));

        sext_ln41_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_919),16));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_813_p17 <= (((((((((((((((trunc_ln41_41_fu_803_p4 & sext_ln41_38_fu_790_p1) & sext_ln41_37_fu_787_p1) & sext_ln41_36_fu_784_p1) & sext_ln41_35_fu_781_p1) & sext_ln41_34_fu_778_p1) & sext_ln41_33_fu_775_p1) & sext_ln41_32_fu_772_p1) & sext_ln41_31_fu_769_p1) & sext_ln41_30_fu_766_p1) & sext_ln41_29_fu_763_p1) & zext_ln41_1_fu_760_p1) & zext_ln41_fu_757_p1) & sext_ln41_28_fu_754_p1) & sext_ln41_27_fu_751_p1) & sext_ln41_fu_748_p1);
    trunc_ln41_41_fu_803_p4 <= add_ln42_46_fu_797_p2(27 downto 15);
    zext_ln41_1_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_reg_949),16));
    zext_ln41_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_944),16));
    zext_ln42_20_fu_552_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    zext_ln42_20_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_20_fu_552_p0),28));
    zext_ln42_21_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_181_p2),29));
    zext_ln42_22_fu_620_p0 <= grp_fu_181_p2(26 - 1 downto 0);
    zext_ln42_22_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_22_fu_620_p0),27));
    zext_ln42_23_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_181_p2),29));
    zext_ln42_24_fu_728_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    zext_ln42_24_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_24_fu_728_p0),28));
    zext_ln42_fu_468_p0 <= grp_fu_181_p2(27 - 1 downto 0);
    zext_ln42_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_fu_468_p0),28));
    zext_ln73_33_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_40_reg_854),27));
    zext_ln73_34_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_28_reg_859),27));
    zext_ln73_35_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_29_reg_864),26));
    zext_ln73_36_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_30_reg_869),27));
    zext_ln73_37_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_31_reg_874),28));
    zext_ln73_38_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_32_reg_879),27));
    zext_ln73_39_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_33_reg_884),28));
    zext_ln73_40_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_34_reg_889),27));
    zext_ln73_41_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_35_reg_894),26));
    zext_ln73_42_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_36_reg_899),28));
    zext_ln73_43_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_37_reg_904),28));
    zext_ln73_44_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_38_reg_909),28));
    zext_ln73_45_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_39_reg_914),28));
    zext_ln73_46_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_924),27));
    zext_ln73_47_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln73_2_reg_929),28));
    zext_ln73_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_269_p1),27));
end behav;
