-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_16u_array_ap_ufixed_15_0_4_0_0_16u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer7_out_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    layer7_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer7_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer7_out_empty_n : IN STD_LOGIC;
    layer7_out_read : OUT STD_LOGIC;
    layer8_out_din : OUT STD_LOGIC_VECTOR (239 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_full_n : IN STD_LOGIC;
    layer8_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_16u_array_ap_ufixed_15_0_4_0_0_16u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011001";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111001";
    constant ap_const_lv32_FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer7_out_blk_n : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal in_data_fu_175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln52_fu_335_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_67_fu_347_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_339_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_363_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_4_fu_199_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_88_fu_385_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_68_fu_403_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_32_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_s_fu_395_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_32_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_32_fu_419_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_5_fu_209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_89_fu_441_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_fu_459_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_33_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_31_fu_451_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_33_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_33_fu_475_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_6_fu_219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_497_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_fu_515_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_34_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_32_fu_507_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_34_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_34_fu_531_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_229_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_91_fu_553_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_fu_571_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_35_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_33_fu_563_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_35_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_35_fu_587_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_fu_609_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_627_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_36_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_34_fu_619_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_36_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_36_fu_643_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_fu_249_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_93_fu_665_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_683_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_37_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_35_fu_675_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_37_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_37_fu_699_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_60_fu_259_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_fu_721_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_739_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_38_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_36_fu_731_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_38_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_38_fu_755_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_61_fu_269_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_95_fu_777_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_75_fu_795_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_39_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_37_fu_787_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_39_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_39_fu_811_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_62_fu_279_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_833_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_76_fu_851_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_40_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_38_fu_843_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_40_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_40_fu_867_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_63_fu_289_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_97_fu_889_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_77_fu_907_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_41_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_39_fu_899_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_41_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_41_fu_923_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_64_fu_299_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_fu_945_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_78_fu_963_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_42_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_40_fu_955_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_42_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_42_fu_979_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_fu_309_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_99_fu_1001_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_79_fu_1019_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_43_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_41_fu_1011_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_43_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_43_fu_1035_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_66_fu_319_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_fu_1057_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_80_fu_1075_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_44_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_42_fu_1067_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_44_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_44_fu_1091_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_s_fu_179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_101_fu_1113_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_1131_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_45_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_43_fu_1123_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_45_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_45_fu_1147_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_2_fu_189_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_102_fu_1169_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_1187_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_46_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln52_44_fu_1179_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln51_46_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_46_fu_1203_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_46_fu_1211_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_45_fu_1155_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_44_fu_1099_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_43_fu_1043_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_42_fu_987_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_41_fu_931_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_40_fu_875_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_39_fu_819_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_38_fu_763_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_37_fu_707_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_36_fu_651_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_35_fu_595_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_34_fu_539_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_33_fu_483_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_32_fu_427_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_371_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer7_out_empty_n, layer8_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer7_out_empty_n, layer8_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer7_out_empty_n, layer8_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_empty_n, layer8_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln51_32_fu_379_p2 <= "1" when (signed(in_data_4_fu_199_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_33_fu_435_p2 <= "1" when (signed(in_data_5_fu_209_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_34_fu_491_p2 <= "1" when (signed(in_data_6_fu_219_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_35_fu_547_p2 <= "1" when (signed(tmp_fu_229_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_36_fu_603_p2 <= "1" when (signed(tmp_s_fu_239_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_37_fu_659_p2 <= "1" when (signed(tmp_59_fu_249_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_38_fu_715_p2 <= "1" when (signed(tmp_60_fu_259_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_39_fu_771_p2 <= "1" when (signed(tmp_61_fu_269_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_40_fu_827_p2 <= "1" when (signed(tmp_62_fu_279_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_41_fu_883_p2 <= "1" when (signed(tmp_63_fu_289_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_42_fu_939_p2 <= "1" when (signed(tmp_64_fu_299_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_43_fu_995_p2 <= "1" when (signed(tmp_65_fu_309_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_44_fu_1051_p2 <= "1" when (signed(tmp_66_fu_319_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_45_fu_1107_p2 <= "1" when (signed(trunc_ln44_s_fu_179_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_46_fu_1163_p2 <= "1" when (signed(trunc_ln44_2_fu_189_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_329_p2 <= "1" when (signed(in_data_fu_175_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_32_fu_413_p2 <= "0" when (tmp_68_fu_403_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_33_fu_469_p2 <= "0" when (tmp_69_fu_459_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_34_fu_525_p2 <= "0" when (tmp_70_fu_515_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_35_fu_581_p2 <= "0" when (tmp_71_fu_571_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_36_fu_637_p2 <= "0" when (tmp_72_fu_627_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_37_fu_693_p2 <= "0" when (tmp_73_fu_683_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_38_fu_749_p2 <= "0" when (tmp_74_fu_739_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_39_fu_805_p2 <= "0" when (tmp_75_fu_795_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_40_fu_861_p2 <= "0" when (tmp_76_fu_851_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_41_fu_917_p2 <= "0" when (tmp_77_fu_907_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_42_fu_973_p2 <= "0" when (tmp_78_fu_963_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_43_fu_1029_p2 <= "0" when (tmp_79_fu_1019_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_44_fu_1085_p2 <= "0" when (tmp_80_fu_1075_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_45_fu_1141_p2 <= "0" when (tmp_81_fu_1131_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_46_fu_1197_p2 <= "0" when (tmp_82_fu_1187_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_fu_357_p2 <= "0" when (tmp_67_fu_347_p4 = ap_const_lv6_0) else "1";
    in_data_4_fu_199_p4 <= layer7_out_dout(31 downto 16);
    in_data_5_fu_209_p4 <= layer7_out_dout(47 downto 32);
    in_data_6_fu_219_p4 <= layer7_out_dout(63 downto 48);
    in_data_fu_175_p1 <= layer7_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_empty_n, layer8_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer7_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer7_out_blk_n <= layer7_out_empty_n;
        else 
            layer7_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer7_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_empty_n, layer8_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer7_out_read <= ap_const_logic_1;
        else 
            layer7_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer8_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_blk_n <= layer8_out_full_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer8_out_din <= (((((((((((((((select_ln51_46_fu_1211_p3 & select_ln51_45_fu_1155_p3) & select_ln51_44_fu_1099_p3) & select_ln51_43_fu_1043_p3) & select_ln51_42_fu_987_p3) & select_ln51_41_fu_931_p3) & select_ln51_40_fu_875_p3) & select_ln51_39_fu_819_p3) & select_ln51_38_fu_763_p3) & select_ln51_37_fu_707_p3) & select_ln51_36_fu_651_p3) & select_ln51_35_fu_595_p3) & select_ln51_34_fu_539_p3) & select_ln51_33_fu_483_p3) & select_ln51_32_fu_427_p3) & select_ln51_fu_371_p3);

    layer8_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer7_out_empty_n, layer8_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer8_out_full_n = ap_const_logic_0) or (layer7_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_write <= ap_const_logic_1;
        else 
            layer8_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_32_fu_427_p3 <= 
        select_ln52_32_fu_419_p3 when (icmp_ln51_32_fu_379_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_33_fu_483_p3 <= 
        select_ln52_33_fu_475_p3 when (icmp_ln51_33_fu_435_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_34_fu_539_p3 <= 
        select_ln52_34_fu_531_p3 when (icmp_ln51_34_fu_491_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_35_fu_595_p3 <= 
        select_ln52_35_fu_587_p3 when (icmp_ln51_35_fu_547_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_36_fu_651_p3 <= 
        select_ln52_36_fu_643_p3 when (icmp_ln51_36_fu_603_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_37_fu_707_p3 <= 
        select_ln52_37_fu_699_p3 when (icmp_ln51_37_fu_659_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_38_fu_763_p3 <= 
        select_ln52_38_fu_755_p3 when (icmp_ln51_38_fu_715_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_39_fu_819_p3 <= 
        select_ln52_39_fu_811_p3 when (icmp_ln51_39_fu_771_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_40_fu_875_p3 <= 
        select_ln52_40_fu_867_p3 when (icmp_ln51_40_fu_827_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_41_fu_931_p3 <= 
        select_ln52_41_fu_923_p3 when (icmp_ln51_41_fu_883_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_42_fu_987_p3 <= 
        select_ln52_42_fu_979_p3 when (icmp_ln51_42_fu_939_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_43_fu_1043_p3 <= 
        select_ln52_43_fu_1035_p3 when (icmp_ln51_43_fu_995_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_44_fu_1099_p3 <= 
        select_ln52_44_fu_1091_p3 when (icmp_ln51_44_fu_1051_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_45_fu_1155_p3 <= 
        select_ln52_45_fu_1147_p3 when (icmp_ln51_45_fu_1107_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_46_fu_1211_p3 <= 
        select_ln52_46_fu_1203_p3 when (icmp_ln51_46_fu_1163_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_371_p3 <= 
        select_ln52_fu_363_p3 when (icmp_ln51_fu_329_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln52_32_fu_419_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_32_fu_413_p2(0) = '1') else 
        shl_ln52_s_fu_395_p3;
    select_ln52_33_fu_475_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_33_fu_469_p2(0) = '1') else 
        shl_ln52_31_fu_451_p3;
    select_ln52_34_fu_531_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_34_fu_525_p2(0) = '1') else 
        shl_ln52_32_fu_507_p3;
    select_ln52_35_fu_587_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_35_fu_581_p2(0) = '1') else 
        shl_ln52_33_fu_563_p3;
    select_ln52_36_fu_643_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_36_fu_637_p2(0) = '1') else 
        shl_ln52_34_fu_619_p3;
    select_ln52_37_fu_699_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_37_fu_693_p2(0) = '1') else 
        shl_ln52_35_fu_675_p3;
    select_ln52_38_fu_755_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_38_fu_749_p2(0) = '1') else 
        shl_ln52_36_fu_731_p3;
    select_ln52_39_fu_811_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_39_fu_805_p2(0) = '1') else 
        shl_ln52_37_fu_787_p3;
    select_ln52_40_fu_867_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_40_fu_861_p2(0) = '1') else 
        shl_ln52_38_fu_843_p3;
    select_ln52_41_fu_923_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_41_fu_917_p2(0) = '1') else 
        shl_ln52_39_fu_899_p3;
    select_ln52_42_fu_979_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_42_fu_973_p2(0) = '1') else 
        shl_ln52_40_fu_955_p3;
    select_ln52_43_fu_1035_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_43_fu_1029_p2(0) = '1') else 
        shl_ln52_41_fu_1011_p3;
    select_ln52_44_fu_1091_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_44_fu_1085_p2(0) = '1') else 
        shl_ln52_42_fu_1067_p3;
    select_ln52_45_fu_1147_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_45_fu_1141_p2(0) = '1') else 
        shl_ln52_43_fu_1123_p3;
    select_ln52_46_fu_1203_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_46_fu_1197_p2(0) = '1') else 
        shl_ln52_44_fu_1179_p3;
    select_ln52_fu_363_p3 <= 
        ap_const_lv15_7FFF when (icmp_ln52_fu_357_p2(0) = '1') else 
        shl_ln_fu_339_p3;
    shl_ln52_31_fu_451_p3 <= (tmp_89_fu_441_p4 & ap_const_lv5_0);
    shl_ln52_32_fu_507_p3 <= (tmp_90_fu_497_p4 & ap_const_lv5_0);
    shl_ln52_33_fu_563_p3 <= (tmp_91_fu_553_p4 & ap_const_lv5_0);
    shl_ln52_34_fu_619_p3 <= (tmp_92_fu_609_p4 & ap_const_lv5_0);
    shl_ln52_35_fu_675_p3 <= (tmp_93_fu_665_p4 & ap_const_lv5_0);
    shl_ln52_36_fu_731_p3 <= (tmp_94_fu_721_p4 & ap_const_lv5_0);
    shl_ln52_37_fu_787_p3 <= (tmp_95_fu_777_p4 & ap_const_lv5_0);
    shl_ln52_38_fu_843_p3 <= (tmp_96_fu_833_p4 & ap_const_lv5_0);
    shl_ln52_39_fu_899_p3 <= (tmp_97_fu_889_p4 & ap_const_lv5_0);
    shl_ln52_40_fu_955_p3 <= (tmp_98_fu_945_p4 & ap_const_lv5_0);
    shl_ln52_41_fu_1011_p3 <= (tmp_99_fu_1001_p4 & ap_const_lv5_0);
    shl_ln52_42_fu_1067_p3 <= (tmp_100_fu_1057_p4 & ap_const_lv5_0);
    shl_ln52_43_fu_1123_p3 <= (tmp_101_fu_1113_p4 & ap_const_lv5_0);
    shl_ln52_44_fu_1179_p3 <= (tmp_102_fu_1169_p4 & ap_const_lv5_0);
    shl_ln52_s_fu_395_p3 <= (tmp_88_fu_385_p4 & ap_const_lv5_0);
    shl_ln_fu_339_p3 <= (trunc_ln52_fu_335_p1 & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_1057_p4 <= layer7_out_dout(217 downto 208);
    tmp_101_fu_1113_p4 <= layer7_out_dout(233 downto 224);
    tmp_102_fu_1169_p4 <= layer7_out_dout(249 downto 240);
    tmp_59_fu_249_p4 <= layer7_out_dout(111 downto 96);
    tmp_60_fu_259_p4 <= layer7_out_dout(127 downto 112);
    tmp_61_fu_269_p4 <= layer7_out_dout(143 downto 128);
    tmp_62_fu_279_p4 <= layer7_out_dout(159 downto 144);
    tmp_63_fu_289_p4 <= layer7_out_dout(175 downto 160);
    tmp_64_fu_299_p4 <= layer7_out_dout(191 downto 176);
    tmp_65_fu_309_p4 <= layer7_out_dout(207 downto 192);
    tmp_66_fu_319_p4 <= layer7_out_dout(223 downto 208);
    tmp_67_fu_347_p4 <= layer7_out_dout(15 downto 10);
    tmp_68_fu_403_p4 <= layer7_out_dout(31 downto 26);
    tmp_69_fu_459_p4 <= layer7_out_dout(47 downto 42);
    tmp_70_fu_515_p4 <= layer7_out_dout(63 downto 58);
    tmp_71_fu_571_p4 <= layer7_out_dout(79 downto 74);
    tmp_72_fu_627_p4 <= layer7_out_dout(95 downto 90);
    tmp_73_fu_683_p4 <= layer7_out_dout(111 downto 106);
    tmp_74_fu_739_p4 <= layer7_out_dout(127 downto 122);
    tmp_75_fu_795_p4 <= layer7_out_dout(143 downto 138);
    tmp_76_fu_851_p4 <= layer7_out_dout(159 downto 154);
    tmp_77_fu_907_p4 <= layer7_out_dout(175 downto 170);
    tmp_78_fu_963_p4 <= layer7_out_dout(191 downto 186);
    tmp_79_fu_1019_p4 <= layer7_out_dout(207 downto 202);
    tmp_80_fu_1075_p4 <= layer7_out_dout(223 downto 218);
    tmp_81_fu_1131_p4 <= layer7_out_dout(239 downto 234);
    tmp_82_fu_1187_p4 <= layer7_out_dout(255 downto 250);
    tmp_88_fu_385_p4 <= layer7_out_dout(25 downto 16);
    tmp_89_fu_441_p4 <= layer7_out_dout(41 downto 32);
    tmp_90_fu_497_p4 <= layer7_out_dout(57 downto 48);
    tmp_91_fu_553_p4 <= layer7_out_dout(73 downto 64);
    tmp_92_fu_609_p4 <= layer7_out_dout(89 downto 80);
    tmp_93_fu_665_p4 <= layer7_out_dout(105 downto 96);
    tmp_94_fu_721_p4 <= layer7_out_dout(121 downto 112);
    tmp_95_fu_777_p4 <= layer7_out_dout(137 downto 128);
    tmp_96_fu_833_p4 <= layer7_out_dout(153 downto 144);
    tmp_97_fu_889_p4 <= layer7_out_dout(169 downto 160);
    tmp_98_fu_945_p4 <= layer7_out_dout(185 downto 176);
    tmp_99_fu_1001_p4 <= layer7_out_dout(201 downto 192);
    tmp_fu_229_p4 <= layer7_out_dout(79 downto 64);
    tmp_s_fu_239_p4 <= layer7_out_dout(95 downto 80);
    trunc_ln44_2_fu_189_p4 <= layer7_out_dout(255 downto 240);
    trunc_ln44_s_fu_179_p4 <= layer7_out_dout(239 downto 224);
    trunc_ln52_fu_335_p1 <= layer7_out_dout(10 - 1 downto 0);
end behav;
