-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_array_ap_fixed_43u_array_ap_fixed_16_6_5_3_0_7u_config13_s_w13_ROM_AUTOIfE is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 301
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_array_ap_fixed_43u_array_ap_fixed_16_6_5_3_0_7u_config13_s_w13_ROM_AUTOIfE is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000110101", 1 => "010001001", 2 => "010000110", 3 => "001001001", 
    4 => "111110001", 5 => "111010110", 6 => "000100101", 7 => "001001000", 
    8 => "000111100", 9 => "000000001", 10 => "000100110", 11 => "000011011", 
    12 => "111010000", 13 => "000100000", 14 => "000001111", 15 => "111010000", 
    16 => "110101011", 17 => "000110111", 18 => "111010100", 19 => "110110000", 
    20 => "101111010", 21 => "110000000", 22 => "111111101", 23 => "010000100", 
    24 => "010001000", 25 => "111111111", 26 => "001010001", 27 => "111011011", 
    28 => "111001101", 29 => "000000011", 30 => "000001001", 31 => "000010111", 
    32 => "111010101", 33 => "111100110", 34 => "000001010", 35 => "111001011", 
    36 => "000010110", 37 => "111000010", 38 => "110111010", 39 => "011010011", 
    40 => "111000100", 41 => "111100110", 42 => "101001010", 43 => "000101100", 
    44 => "001010111", 45 => "001011110", 46 => "001000010", 47 => "111101101", 
    48 => "111101110", 49 => "000010000", 50 => "000110110", 51 => "000100100", 
    52 => "111111011", 53 => "000011110", 54 => "000011101", 55 => "111000111", 
    56 => "000010100", 57 => "111111011", 58 => "111010110", 59 => "111000100", 
    60 => "000010100", 61 => "111011100", 62 => "111001001", 63 => "110011100", 
    64 => "110110100", 65 => "000001000", 66 => "001011110", 67 => "001101111", 
    68 => "111101010", 69 => "000110101", 70 => "111100110", 71 => "111011111", 
    72 => "000001011", 73 => "000000101", 74 => "000010010", 75 => "111010001", 
    76 => "111100010", 77 => "111101110", 78 => "111110110", 79 => "000101110", 
    80 => "111011000", 81 => "111111100", 82 => "010010100", 83 => "111011011", 
    84 => "111110110", 85 => "110000000", 86 => "000011100", 87 => "111101001", 
    88 => "111101000", 89 => "111110100", 90 => "111110010", 91 => "000011010", 
    92 => "111010000", 93 => "111101010", 94 => "111100111", 95 => "111110100", 
    96 => "111101110", 97 => "000010111", 98 => "111000011", 99 => "111100000", 
    100 => "111001111", 101 => "000011010", 102 => "000010111", 103 => "111011101", 
    104 => "000100000", 105 => "111110001", 106 => "000100111", 107 => "000111100", 
    108 => "000011111", 109 => "111100101", 110 => "000100100", 111 => "110110011", 
    112 => "111111000", 113 => "000011110", 114 => "000010101", 115 => "000001101", 
    116 => "111111010", 117 => "111111100", 118 => "111100001", 119 => "000010110", 
    120 => "111100001", 121 => "010000001", 122 => "000000111", 123 => "000111011", 
    124 => "001110111", 125 => "111101001", 126 => "000110101", 127 => "000110101", 
    128 => "000111100", 129 => "111101111", 130 => "111110001", 131 => "000110011", 
    132 => "111000001", 133 => "111100010", 134 => "111100101", 135 => "000001001", 
    136 => "111111000", 137 => "111111000", 138 => "111000010", 139 => "111011111", 
    140 => "111011111", 141 => "111100010", 142 => "000010110", 143 => "000000101", 
    144 => "000001000", 145 => "000101110", 146 => "111000111", 147 => "111101110", 
    148 => "111110010", 149 => "111101100", 150 => "000000110", 151 => "000001101", 
    152 => "111011001", 153 => "111010101", 154 => "111001110", 155 => "000000101", 
    156 => "111110101", 157 => "111110110", 158 => "111000000", 159 => "111111110", 
    160 => "000011110", 161 => "000000101", 162 => "000001101", 163 => "111111000", 
    164 => "000001100", 165 => "111111110", 166 => "000010100", 167 => "000001000", 
    168 => "111011110", 169 => "111111110", 170 => "111110110", 171 => "000000001", 
    172 => "111110001", 173 => "111110011", 174 => "000000010", 175 => "111111101", 
    176 => "000000010", 177 => "111110011", 178 => "110111100", 179 => "001010011", 
    180 => "111011100", 181 => "001001000", 182 => "000100011", 183 => "000010100", 
    184 => "111111001", 185 => "110001100", 186 => "000011011", 187 => "111101010", 
    188 => "111100100", 189 => "111010101", 190 => "111111101", 191 => "111110010", 
    192 => "111010011", 193 => "111111110", 194 => "111101010", 195 => "111111010", 
    196 => "001000111", 197 => "000100000", 198 => "111110111", 199 => "000000001", 
    200 => "000010010", 201 => "111100101", 202 => "111111101", 203 => "000010000", 
    204 => "111100011", 205 => "000100011", 206 => "111101010", 207 => "111111001", 
    208 => "001000001", 209 => "111001010", 210 => "000010111", 211 => "000010001", 
    212 => "000010110", 213 => "000101111", 214 => "111010100", 215 => "111001100", 
    216 => "010001000", 217 => "001011011", 218 => "000000111", 219 => "111101010", 
    220 => "111111011", 221 => "001001100", 222 => "001101001", 223 => "000110011", 
    224 => "111111100", 225 => "111111110", 226 => "000011000", 227 => "000100000", 
    228 => "000101000", 229 => "111110010", 230 => "111101001", 231 => "000010101", 
    232 => "000100110", 233 => "111011110", 234 => "110110101", 235 => "111001110", 
    236 => "111011001", 237 => "111111100", 238 => "000101110", 239 => "000100111", 
    240 => "000000100", 241 => "000000101", 242 => "111010100", 243 => "110101100", 
    244 => "111101101", 245 => "000001111", 246 => "000000011", 247 => "000100001", 
    248 => "000011010", 249 => "001000001", 250 => "111101101", 251 => "111001110", 
    252 => "111001100", 253 => "110011000", 254 => "000110101", 255 => "111001000", 
    256 => "000000011", 257 => "110011100", 258 => "000011111", 259 => "000101000", 
    260 => "000100011", 261 => "010000011", 262 => "111101100", 263 => "111101101", 
    264 => "001000010", 265 => "111101011", 266 => "000100001", 267 => "111100100", 
    268 => "000101000", 269 => "000011110", 270 => "111000000", 271 => "000100001", 
    272 => "111110000", 273 => "111000111", 274 => "110110010", 275 => "000100001", 
    276 => "111001000", 277 => "110111111", 278 => "110101101", 279 => "110101010", 
    280 => "000100001", 281 => "001001111", 282 => "001011111", 283 => "111010100", 
    284 => "000011010", 285 => "111001101", 286 => "111101110", 287 => "111111100", 
    288 => "000001010", 289 => "000000111", 290 => "110110011", 291 => "111100101", 
    292 => "111100001", 293 => "111111101", 294 => "001000111", 295 => "111001100", 
    296 => "101010110", 297 => "001101111", 298 => "110110100", 299 => "111000000", 
    300 => "101001111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

