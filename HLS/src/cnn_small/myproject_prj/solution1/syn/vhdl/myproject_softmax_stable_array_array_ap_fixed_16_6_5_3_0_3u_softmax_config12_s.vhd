-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer11_out_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    layer11_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer11_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer11_out_empty_n : IN STD_LOGIC;
    layer11_out_read : OUT STD_LOGIC;
    layer12_out_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    layer12_out_TVALID : OUT STD_LOGIC;
    layer12_out_TREADY : IN STD_LOGIC );
end;


architecture behav of myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer11_out_blk_n : STD_LOGIC;
    signal layer12_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln199_fu_176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_reg_567 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_1_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_2_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exp_table_load_reg_603 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exp_table_load_1_reg_608 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_load_2_reg_613 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln244_fu_541_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln244_reg_623 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_166_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln244_1_reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln225_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_149_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln244_fu_546_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln244_1_fu_550_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln244_2_fu_554_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln65_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_fu_227_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln215_fu_234_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln215_1_fu_237_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln215_fu_241_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_2_fu_281_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln215_1_fu_284_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_3_fu_324_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln215_2_fu_327_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_4_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_375_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_1_fu_385_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln215_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_3_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_2_fu_398_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_406_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_3_fu_416_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln215_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_5_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_4_fu_429_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_437_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_5_fu_447_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_load_1_cast2_fu_464_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_load_cast1_fu_460_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_fu_472_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_2_fu_478_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_fu_492_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_fu_500_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_load_2_cast3_fu_468_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_1_fu_504_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_518_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_1_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_exp_tablg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_invert_thbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_exp_tablg8j
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2);

    invert_table_U : component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_invert_thbi
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_1_1_U54 : component myproject_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_149_p0,
        din1 => grp_fu_149_p1,
        dout => grp_fu_149_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                exp_table_load_1_reg_608 <= exp_table_q1;
                exp_table_load_2_reg_613 <= exp_table_q0;
                exp_table_load_reg_603 <= exp_table_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sext_ln244_reg_623 <= sext_ln244_fu_541_p1;
                trunc_ln2_reg_628 <= grp_fu_149_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln199_1_reg_574 <= layer11_out_dout(31 downto 16);
                trunc_ln199_2_reg_581 <= layer11_out_dout(47 downto 32);
                trunc_ln199_reg_567 <= trunc_ln199_fu_176_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln244_1_reg_633 <= grp_fu_149_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, layer11_out_empty_n, layer12_out_TREADY, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((layer12_out_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln50_1_fu_504_p2 <= std_logic_vector(unsigned(zext_ln50_fu_500_p1) + unsigned(exp_table_load_2_cast3_fu_468_p1));
    add_ln50_2_fu_478_p2 <= std_logic_vector(unsigned(exp_table_q1) + unsigned(exp_table_q2));
    add_ln50_fu_472_p2 <= std_logic_vector(unsigned(exp_table_load_1_cast2_fu_464_p1) + unsigned(exp_table_load_cast1_fu_460_p1));
    and_ln215_1_fu_312_p2 <= (xor_ln215_2_fu_306_p2 and tmp_7_fu_298_p3);
    and_ln215_2_fu_355_p2 <= (xor_ln215_4_fu_349_p2 and tmp_9_fu_341_p3);
    and_ln215_fu_269_p2 <= (xor_ln215_fu_263_p2 and tmp_5_fu_255_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, layer11_out_empty_n)
    begin
        if (((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(layer12_out_TREADY)
    begin
        if ((layer12_out_TREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, layer11_out_empty_n)
    begin
                ap_block_state1 <= ((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_table_address0 <= zext_ln225_2_fu_455_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln225_1_fu_424_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln225_fu_393_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table_load_1_cast2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q1),18));
    exp_table_load_2_cast3_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q0),18));
    exp_table_load_cast1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q2),18));

    grp_fu_149_p0_assign_proc : process(ap_CS_fsm_state6, sext_ln244_fu_541_p1, sext_ln244_reg_623, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_149_p0 <= sext_ln244_reg_623(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_149_p0 <= sext_ln244_fu_541_p1(18 - 1 downto 0);
        else 
            grp_fu_149_p0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln244_fu_546_p1, zext_ln244_1_fu_550_p1, zext_ln244_2_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_149_p1 <= zext_ln244_2_fu_554_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_149_p1 <= zext_ln244_1_fu_550_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_149_p1 <= zext_ln244_fu_546_p1(17 - 1 downto 0);
        else 
            grp_fu_149_p1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_166_p4 <= grp_fu_149_p2(25 downto 10);
    icmp_ln65_1_fu_216_p2 <= "1" when (signed(select_ln65_fu_210_p3) < signed(trunc_ln199_2_reg_581)) else "0";
    icmp_ln65_fu_200_p2 <= "1" when (signed(trunc_ln199_reg_567) < signed(trunc_ln199_1_reg_574)) else "0";
    invert_table_address0 <= zext_ln235_fu_536_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer11_out_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, layer11_out_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            layer11_out_blk_n <= layer11_out_empty_n;
        else 
            layer11_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer11_out_read_assign_proc : process(ap_start, ap_CS_fsm_state1, layer11_out_empty_n)
    begin
        if ((not(((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer11_out_read <= ap_const_logic_1;
        else 
            layer11_out_read <= ap_const_logic_0;
        end if; 
    end process;

    layer12_out_TDATA <= ((grp_fu_166_p4 & trunc_ln244_1_reg_633) & trunc_ln2_reg_628);

    layer12_out_TDATA_blk_n_assign_proc : process(layer12_out_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer12_out_TDATA_blk_n <= layer12_out_TREADY;
        else 
            layer12_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer12_out_TVALID_assign_proc : process(layer12_out_TREADY, ap_CS_fsm_state6)
    begin
        if (((layer12_out_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            layer12_out_TVALID <= ap_const_logic_1;
        else 
            layer12_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln215_1_fu_385_p3 <= 
        select_ln215_fu_367_p3 when (xor_ln215_1_fu_275_p2(0) = '1') else 
        tmp_fu_375_p4;
    select_ln215_2_fu_398_p3 <= 
        ap_const_lv10_1FF when (and_ln215_1_fu_312_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln215_3_fu_416_p3 <= 
        select_ln215_2_fu_398_p3 when (xor_ln215_3_fu_318_p2(0) = '1') else 
        tmp_1_fu_406_p4;
    select_ln215_4_fu_429_p3 <= 
        ap_const_lv10_1FF when (and_ln215_2_fu_355_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln215_5_fu_447_p3 <= 
        select_ln215_4_fu_429_p3 when (xor_ln215_5_fu_361_p2(0) = '1') else 
        tmp_2_fu_437_p4;
    select_ln215_fu_367_p3 <= 
        ap_const_lv10_1FF when (and_ln215_fu_269_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln50_1_fu_528_p3 <= 
        ap_const_lv10_1FF when (tmp_11_fu_510_p3(0) = '1') else 
        tmp_3_fu_518_p4;
    select_ln50_fu_492_p3 <= 
        ap_const_lv17_1FFFF when (tmp_10_fu_484_p3(0) = '1') else 
        add_ln50_2_fu_478_p2;
    select_ln65_fu_210_p3 <= 
        trunc_ln199_reg_567 when (xor_ln65_fu_204_p2(0) = '1') else 
        trunc_ln199_1_reg_574;
        sext_ln215_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_fu_227_p3),17));

        sext_ln215_2_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_1_reg_574),17));

        sext_ln215_3_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_2_reg_581),17));

        sext_ln215_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_reg_567),17));

        sext_ln244_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table_q0),26));

    sub_ln215_1_fu_284_p2 <= std_logic_vector(signed(sext_ln215_2_fu_281_p1) - signed(sext_ln215_1_fu_237_p1));
    sub_ln215_2_fu_327_p2 <= std_logic_vector(signed(sext_ln215_3_fu_324_p1) - signed(sext_ln215_1_fu_237_p1));
    sub_ln215_fu_241_p2 <= std_logic_vector(signed(sext_ln215_fu_234_p1) - signed(sext_ln215_1_fu_237_p1));
    tmp_10_fu_484_p3 <= add_ln50_fu_472_p2(17 downto 17);
    tmp_11_fu_510_p3 <= add_ln50_1_fu_504_p2(17 downto 17);
    tmp_1_fu_406_p4 <= sub_ln215_1_fu_284_p2(15 downto 6);
    tmp_2_fu_437_p4 <= sub_ln215_2_fu_327_p2(15 downto 6);
    tmp_3_fu_518_p4 <= add_ln50_1_fu_504_p2(17 downto 8);
    tmp_4_fu_247_p3 <= sub_ln215_fu_241_p2(16 downto 16);
    tmp_5_fu_255_p3 <= sub_ln215_fu_241_p2(15 downto 15);
    tmp_6_fu_290_p3 <= sub_ln215_1_fu_284_p2(16 downto 16);
    tmp_7_fu_298_p3 <= sub_ln215_1_fu_284_p2(15 downto 15);
    tmp_8_fu_333_p3 <= sub_ln215_2_fu_327_p2(16 downto 16);
    tmp_9_fu_341_p3 <= sub_ln215_2_fu_327_p2(15 downto 15);
    tmp_fu_375_p4 <= sub_ln215_fu_241_p2(15 downto 6);
    trunc_ln199_fu_176_p1 <= layer11_out_dout(16 - 1 downto 0);
    x_max_fu_227_p3 <= 
        select_ln65_fu_210_p3 when (xor_ln65_1_fu_221_p2(0) = '1') else 
        trunc_ln199_2_reg_581;
    xor_ln215_1_fu_275_p2 <= (tmp_5_fu_255_p3 xor tmp_4_fu_247_p3);
    xor_ln215_2_fu_306_p2 <= (tmp_6_fu_290_p3 xor ap_const_lv1_1);
    xor_ln215_3_fu_318_p2 <= (tmp_7_fu_298_p3 xor tmp_6_fu_290_p3);
    xor_ln215_4_fu_349_p2 <= (tmp_8_fu_333_p3 xor ap_const_lv1_1);
    xor_ln215_5_fu_361_p2 <= (tmp_9_fu_341_p3 xor tmp_8_fu_333_p3);
    xor_ln215_fu_263_p2 <= (tmp_4_fu_247_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_221_p2 <= (icmp_ln65_1_fu_216_p2 xor ap_const_lv1_1);
    xor_ln65_fu_204_p2 <= (icmp_ln65_fu_200_p2 xor ap_const_lv1_1);
    zext_ln225_1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_3_fu_416_p3),64));
    zext_ln225_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_5_fu_447_p3),64));
    zext_ln225_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_1_fu_385_p3),64));
    zext_ln235_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_528_p3),64));
    zext_ln244_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_1_reg_608),26));
    zext_ln244_2_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_2_reg_613),26));
    zext_ln244_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_reg_603),26));
    zext_ln50_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_fu_492_p3),18));
end behav;
