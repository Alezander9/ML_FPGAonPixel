-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_fixed_12u_array_ap_fixed_16_6_5_3_0_12u_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer6_out_dout : IN STD_LOGIC_VECTOR (191 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer6_out_empty_n : IN STD_LOGIC;
    layer6_out_read : OUT STD_LOGIC;
    layer8_out_din : OUT STD_LOGIC_VECTOR (191 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer8_out_full_n : IN STD_LOGIC;
    layer8_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_fixed_12u_array_ap_fixed_16_6_5_3_0_12u_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv26_989 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100110001001";
    constant ap_const_lv26_D9F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110110011111";
    constant ap_const_lv26_7D9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111011001";
    constant ap_const_lv26_574 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101110100";
    constant ap_const_lv26_6C5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011000101";
    constant ap_const_lv26_2B9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001010111001";
    constant ap_const_lv26_B27 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000101100100111";
    constant ap_const_lv26_91D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100100011101";
    constant ap_const_lv26_2F2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001011110010";
    constant ap_const_lv26_A07 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000101000000111";
    constant ap_const_lv26_CA5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110010100101";
    constant ap_const_lv25_1EF : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000111101111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv26_D2000 : STD_LOGIC_VECTOR (25 downto 0) := "00000011010010000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_3F05400 : STD_LOGIC_VECTOR (25 downto 0) := "11111100000101010000000000";
    constant ap_const_lv26_12800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010010100000000000";
    constant ap_const_lv26_3FC0000 : STD_LOGIC_VECTOR (25 downto 0) := "11111111000000000000000000";
    constant ap_const_lv26_C5C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000011000101110000000000";
    constant ap_const_lv26_2E000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000101110000000000000";
    constant ap_const_lv26_3EAC800 : STD_LOGIC_VECTOR (25 downto 0) := "11111010101100100000000000";
    constant ap_const_lv26_FF000 : STD_LOGIC_VECTOR (25 downto 0) := "00000011111111000000000000";
    constant ap_const_lv26_3FFEC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111110110000000000";
    constant ap_const_lv26_3F70800 : STD_LOGIC_VECTOR (25 downto 0) := "11111101110000100000000000";
    constant ap_const_lv26_3D7A400 : STD_LOGIC_VECTOR (25 downto 0) := "11110101111010010000000000";
    constant ap_const_lv25_15C00 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010101110000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer6_out_blk_n : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal a_31_reg_588 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal a_30_reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_29_reg_598 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_21_reg_603 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_22_reg_608 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_23_reg_613 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_24_reg_618 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_25_reg_623 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_26_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_27_reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_28_reg_638 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_643 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_s_reg_648 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln41_23_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln41_24_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln41_25_reg_663 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln41_26_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln41_27_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln41_28_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln41_29_reg_683 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln41_30_reg_688 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln41_31_reg_693 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_325_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_24_fu_346_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_25_fu_366_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_26_fu_386_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_27_fu_406_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_28_fu_426_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_29_fu_446_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_30_fu_466_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_31_fu_486_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_32_fu_506_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_33_fu_526_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_34_fu_546_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal a_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_fu_330_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_24_fu_350_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_25_fu_370_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_26_fu_390_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_27_fu_410_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_28_fu_430_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_29_fu_450_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_30_fu_470_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_31_fu_490_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_32_fu_510_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_33_fu_530_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_34_fu_550_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln42_34_fu_550_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln41_32_fu_556_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_566_p13 : STD_LOGIC_VECTOR (190 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_13ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_13ns_26_1_1_U27 : component myproject_mul_16s_13ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_143_p0,
        din1 => grp_fu_143_p1,
        dout => grp_fu_143_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer8_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_21_reg_603 <= layer6_out_dout(47 downto 32);
                a_22_reg_608 <= layer6_out_dout(63 downto 48);
                a_23_reg_613 <= layer6_out_dout(79 downto 64);
                a_24_reg_618 <= layer6_out_dout(95 downto 80);
                a_25_reg_623 <= layer6_out_dout(111 downto 96);
                a_26_reg_628 <= layer6_out_dout(127 downto 112);
                a_27_reg_633 <= layer6_out_dout(143 downto 128);
                a_28_reg_638 <= layer6_out_dout(159 downto 144);
                a_29_reg_598 <= layer6_out_dout(31 downto 16);
                a_30_reg_593 <= layer6_out_dout(191 downto 176);
                a_31_reg_588 <= layer6_out_dout(175 downto 160);
                trunc_ln_reg_643 <= add_ln42_fu_330_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln41_23_reg_653 <= add_ln42_25_fu_370_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln41_24_reg_658 <= add_ln42_26_fu_390_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln41_25_reg_663 <= add_ln42_27_fu_410_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln41_26_reg_668 <= add_ln42_28_fu_430_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln41_27_reg_673 <= add_ln42_29_fu_450_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln41_28_reg_678 <= add_ln42_30_fu_470_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln41_29_reg_683 <= add_ln42_31_fu_490_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln41_30_reg_688 <= add_ln42_32_fu_510_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln41_31_reg_693 <= add_ln42_33_fu_530_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln41_s_reg_648 <= add_ln42_24_fu_350_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer6_out_empty_n, layer8_out_full_n, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((layer8_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_fu_211_p1 <= layer6_out_dout(16 - 1 downto 0);
    add_ln42_24_fu_350_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3F05400));
    add_ln42_25_fu_370_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_12800));
    add_ln42_26_fu_390_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3FC0000));
    add_ln42_27_fu_410_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_C5C00));
    add_ln42_28_fu_430_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_2E000));
    add_ln42_29_fu_450_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3EAC800));
    add_ln42_30_fu_470_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_FF000));
    add_ln42_31_fu_490_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3FFEC00));
    add_ln42_32_fu_510_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3F70800));
    add_ln42_33_fu_530_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_3D7A400));
    add_ln42_34_fu_550_p0 <= grp_fu_143_p2(25 - 1 downto 0);
    add_ln42_34_fu_550_p2 <= std_logic_vector(unsigned(add_ln42_34_fu_550_p0) + unsigned(ap_const_lv25_15C00));
    add_ln42_fu_330_p2 <= std_logic_vector(unsigned(grp_fu_143_p2) + unsigned(ap_const_lv26_D2000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(layer8_out_full_n)
    begin
        if ((layer8_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer6_out_empty_n)
    begin
        if (((layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer6_out_empty_n)
    begin
                ap_block_state1 <= ((layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer8_out_full_n, ap_CS_fsm_state12)
    begin
        if (((layer8_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_143_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, sext_ln42_fu_325_p1, sext_ln42_24_fu_346_p1, sext_ln42_25_fu_366_p1, sext_ln42_26_fu_386_p1, sext_ln42_27_fu_406_p1, sext_ln42_28_fu_426_p1, sext_ln42_29_fu_446_p1, sext_ln42_30_fu_466_p1, sext_ln42_31_fu_486_p1, sext_ln42_32_fu_506_p1, sext_ln42_33_fu_526_p1, sext_ln42_34_fu_546_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_143_p0 <= sext_ln42_34_fu_546_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_143_p0 <= sext_ln42_33_fu_526_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_143_p0 <= sext_ln42_32_fu_506_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_143_p0 <= sext_ln42_31_fu_486_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_143_p0 <= sext_ln42_30_fu_466_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_143_p0 <= sext_ln42_29_fu_446_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_143_p0 <= sext_ln42_28_fu_426_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_143_p0 <= sext_ln42_27_fu_406_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_143_p0 <= sext_ln42_26_fu_386_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_143_p0 <= sext_ln42_25_fu_366_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_143_p0 <= sext_ln42_24_fu_346_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_143_p0 <= sext_ln42_fu_325_p1(16 - 1 downto 0);
        else 
            grp_fu_143_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_143_p1 <= ap_const_lv25_1EF(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_143_p1 <= ap_const_lv26_CA5(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_143_p1 <= ap_const_lv26_A07(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_143_p1 <= ap_const_lv26_2F2(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_143_p1 <= ap_const_lv26_91D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_143_p1 <= ap_const_lv26_B27(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_143_p1 <= ap_const_lv26_2B9(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_143_p1 <= ap_const_lv26_6C5(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_143_p1 <= ap_const_lv26_574(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_143_p1 <= ap_const_lv26_7D9(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_143_p1 <= ap_const_lv26_D9F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_143_p1 <= ap_const_lv26_989(13 - 1 downto 0);
        else 
            grp_fu_143_p1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(layer8_out_full_n, ap_CS_fsm_state12)
    begin
        if (((layer8_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer6_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer6_out_blk_n <= layer6_out_empty_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer6_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer6_out_empty_n)
    begin
        if ((not(((layer6_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer6_out_read <= ap_const_logic_1;
        else 
            layer6_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(layer8_out_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer8_out_blk_n <= layer8_out_full_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer8_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_566_p13),192));


    layer8_out_write_assign_proc : process(layer8_out_full_n, ap_CS_fsm_state12)
    begin
        if (((layer8_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            layer8_out_write <= ap_const_logic_1;
        else 
            layer8_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln42_24_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_29_reg_598),26));

        sext_ln42_25_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_21_reg_603),26));

        sext_ln42_26_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_22_reg_608),26));

        sext_ln42_27_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_23_reg_613),26));

        sext_ln42_28_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_24_reg_618),26));

        sext_ln42_29_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_25_reg_623),26));

        sext_ln42_30_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_26_reg_628),26));

        sext_ln42_31_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_27_reg_633),26));

        sext_ln42_32_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_28_reg_638),26));

        sext_ln42_33_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_31_reg_588),26));

        sext_ln42_34_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_30_reg_593),25));

        sext_ln42_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_fu_211_p1),26));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_566_p13 <= (((((((((((trunc_ln41_32_fu_556_p4 & trunc_ln41_31_reg_693) & trunc_ln41_30_reg_688) & trunc_ln41_29_reg_683) & trunc_ln41_28_reg_678) & trunc_ln41_27_reg_673) & trunc_ln41_26_reg_668) & trunc_ln41_25_reg_663) & trunc_ln41_24_reg_658) & trunc_ln41_23_reg_653) & trunc_ln41_s_reg_648) & trunc_ln_reg_643);
    trunc_ln41_32_fu_556_p4 <= add_ln42_34_fu_550_p2(24 downto 10);
end behav;
