// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_12u_array_ap_ufixed_15_0_4_0_0_12u_relu_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer8_out_dout,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_empty_n,
        layer8_out_read,
        layer9_out_din,
        layer9_out_num_data_valid,
        layer9_out_fifo_cap,
        layer9_out_full_n,
        layer9_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] layer8_out_dout;
input  [1:0] layer8_out_num_data_valid;
input  [1:0] layer8_out_fifo_cap;
input   layer8_out_empty_n;
output   layer8_out_read;
output  [179:0] layer9_out_din;
input  [1:0] layer9_out_num_data_valid;
input  [1:0] layer9_out_fifo_cap;
input   layer9_out_full_n;
output   layer9_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer8_out_read;
reg layer9_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer8_out_blk_n;
reg    layer9_out_blk_n;
reg    ap_block_state1;
wire   [15:0] in_data_fu_143_p1;
wire   [9:0] trunc_ln52_fu_263_p1;
wire   [5:0] tmp_47_fu_275_p4;
wire   [0:0] icmp_ln52_fu_285_p2;
wire   [14:0] shl_ln_fu_267_p3;
wire   [0:0] icmp_ln51_fu_257_p2;
wire   [14:0] select_ln52_fu_291_p3;
wire   [15:0] in_data_4_fu_167_p4;
wire   [9:0] tmp_64_fu_313_p4;
wire   [5:0] tmp_48_fu_331_p4;
wire   [0:0] icmp_ln52_24_fu_341_p2;
wire   [14:0] shl_ln52_s_fu_323_p3;
wire   [0:0] icmp_ln51_24_fu_307_p2;
wire   [14:0] select_ln52_24_fu_347_p3;
wire   [15:0] in_data_5_fu_177_p4;
wire   [9:0] tmp_65_fu_369_p4;
wire   [5:0] tmp_49_fu_387_p4;
wire   [0:0] icmp_ln52_25_fu_397_p2;
wire   [14:0] shl_ln52_23_fu_379_p3;
wire   [0:0] icmp_ln51_25_fu_363_p2;
wire   [14:0] select_ln52_25_fu_403_p3;
wire   [15:0] in_data_6_fu_187_p4;
wire   [9:0] tmp_66_fu_425_p4;
wire   [5:0] tmp_50_fu_443_p4;
wire   [0:0] icmp_ln52_26_fu_453_p2;
wire   [14:0] shl_ln52_24_fu_435_p3;
wire   [0:0] icmp_ln51_26_fu_419_p2;
wire   [14:0] select_ln52_26_fu_459_p3;
wire   [15:0] tmp_fu_197_p4;
wire   [9:0] tmp_67_fu_481_p4;
wire   [5:0] tmp_51_fu_499_p4;
wire   [0:0] icmp_ln52_27_fu_509_p2;
wire   [14:0] shl_ln52_25_fu_491_p3;
wire   [0:0] icmp_ln51_27_fu_475_p2;
wire   [14:0] select_ln52_27_fu_515_p3;
wire   [15:0] tmp_s_fu_207_p4;
wire   [9:0] tmp_68_fu_537_p4;
wire   [5:0] tmp_52_fu_555_p4;
wire   [0:0] icmp_ln52_28_fu_565_p2;
wire   [14:0] shl_ln52_26_fu_547_p3;
wire   [0:0] icmp_ln51_28_fu_531_p2;
wire   [14:0] select_ln52_28_fu_571_p3;
wire   [15:0] tmp_43_fu_217_p4;
wire   [9:0] tmp_69_fu_593_p4;
wire   [5:0] tmp_53_fu_611_p4;
wire   [0:0] icmp_ln52_29_fu_621_p2;
wire   [14:0] shl_ln52_27_fu_603_p3;
wire   [0:0] icmp_ln51_29_fu_587_p2;
wire   [14:0] select_ln52_29_fu_627_p3;
wire   [15:0] tmp_44_fu_227_p4;
wire   [9:0] tmp_70_fu_649_p4;
wire   [5:0] tmp_54_fu_667_p4;
wire   [0:0] icmp_ln52_30_fu_677_p2;
wire   [14:0] shl_ln52_28_fu_659_p3;
wire   [0:0] icmp_ln51_30_fu_643_p2;
wire   [14:0] select_ln52_30_fu_683_p3;
wire   [15:0] tmp_45_fu_237_p4;
wire   [9:0] tmp_71_fu_705_p4;
wire   [5:0] tmp_55_fu_723_p4;
wire   [0:0] icmp_ln52_31_fu_733_p2;
wire   [14:0] shl_ln52_29_fu_715_p3;
wire   [0:0] icmp_ln51_31_fu_699_p2;
wire   [14:0] select_ln52_31_fu_739_p3;
wire   [15:0] tmp_46_fu_247_p4;
wire   [9:0] tmp_72_fu_761_p4;
wire   [5:0] tmp_56_fu_779_p4;
wire   [0:0] icmp_ln52_32_fu_789_p2;
wire   [14:0] shl_ln52_30_fu_771_p3;
wire   [0:0] icmp_ln51_32_fu_755_p2;
wire   [14:0] select_ln52_32_fu_795_p3;
wire   [15:0] trunc_ln44_s_fu_147_p4;
wire   [9:0] tmp_73_fu_817_p4;
wire   [5:0] tmp_57_fu_835_p4;
wire   [0:0] icmp_ln52_33_fu_845_p2;
wire   [14:0] shl_ln52_31_fu_827_p3;
wire   [0:0] icmp_ln51_33_fu_811_p2;
wire   [14:0] select_ln52_33_fu_851_p3;
wire   [15:0] trunc_ln44_2_fu_157_p4;
wire   [9:0] tmp_74_fu_873_p4;
wire   [5:0] tmp_58_fu_891_p4;
wire   [0:0] icmp_ln52_34_fu_901_p2;
wire   [14:0] shl_ln52_32_fu_883_p3;
wire   [0:0] icmp_ln51_34_fu_867_p2;
wire   [14:0] select_ln52_34_fu_907_p3;
wire   [14:0] select_ln51_34_fu_915_p3;
wire   [14:0] select_ln51_33_fu_859_p3;
wire   [14:0] select_ln51_32_fu_803_p3;
wire   [14:0] select_ln51_31_fu_747_p3;
wire   [14:0] select_ln51_30_fu_691_p3;
wire   [14:0] select_ln51_29_fu_635_p3;
wire   [14:0] select_ln51_28_fu_579_p3;
wire   [14:0] select_ln51_27_fu_523_p3;
wire   [14:0] select_ln51_26_fu_467_p3;
wire   [14:0] select_ln51_25_fu_411_p3;
wire   [14:0] select_ln51_24_fu_355_p3;
wire   [14:0] select_ln51_fu_299_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_blk_n = layer8_out_empty_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_read = 1'b1;
    end else begin
        layer8_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer9_out_blk_n = layer9_out_full_n;
    end else begin
        layer9_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer9_out_write = 1'b1;
    end else begin
        layer9_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer9_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln51_24_fu_307_p2 = (($signed(in_data_4_fu_167_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_25_fu_363_p2 = (($signed(in_data_5_fu_177_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_26_fu_419_p2 = (($signed(in_data_6_fu_187_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_27_fu_475_p2 = (($signed(tmp_fu_197_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_28_fu_531_p2 = (($signed(tmp_s_fu_207_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_29_fu_587_p2 = (($signed(tmp_43_fu_217_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_30_fu_643_p2 = (($signed(tmp_44_fu_227_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_31_fu_699_p2 = (($signed(tmp_45_fu_237_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_32_fu_755_p2 = (($signed(tmp_46_fu_247_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_33_fu_811_p2 = (($signed(trunc_ln44_s_fu_147_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_34_fu_867_p2 = (($signed(trunc_ln44_2_fu_157_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_257_p2 = (($signed(in_data_fu_143_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_24_fu_341_p2 = ((tmp_48_fu_331_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_25_fu_397_p2 = ((tmp_49_fu_387_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_26_fu_453_p2 = ((tmp_50_fu_443_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_27_fu_509_p2 = ((tmp_51_fu_499_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_28_fu_565_p2 = ((tmp_52_fu_555_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_29_fu_621_p2 = ((tmp_53_fu_611_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_30_fu_677_p2 = ((tmp_54_fu_667_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_31_fu_733_p2 = ((tmp_55_fu_723_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_32_fu_789_p2 = ((tmp_56_fu_779_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_33_fu_845_p2 = ((tmp_57_fu_835_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_34_fu_901_p2 = ((tmp_58_fu_891_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_285_p2 = ((tmp_47_fu_275_p4 != 6'd0) ? 1'b1 : 1'b0);

assign in_data_4_fu_167_p4 = {{layer8_out_dout[31:16]}};

assign in_data_5_fu_177_p4 = {{layer8_out_dout[47:32]}};

assign in_data_6_fu_187_p4 = {{layer8_out_dout[63:48]}};

assign in_data_fu_143_p1 = layer8_out_dout[15:0];

assign layer9_out_din = {{{{{{{{{{{{select_ln51_34_fu_915_p3}, {select_ln51_33_fu_859_p3}}, {select_ln51_32_fu_803_p3}}, {select_ln51_31_fu_747_p3}}, {select_ln51_30_fu_691_p3}}, {select_ln51_29_fu_635_p3}}, {select_ln51_28_fu_579_p3}}, {select_ln51_27_fu_523_p3}}, {select_ln51_26_fu_467_p3}}, {select_ln51_25_fu_411_p3}}, {select_ln51_24_fu_355_p3}}, {select_ln51_fu_299_p3}};

assign select_ln51_24_fu_355_p3 = ((icmp_ln51_24_fu_307_p2[0:0] == 1'b1) ? select_ln52_24_fu_347_p3 : 15'd0);

assign select_ln51_25_fu_411_p3 = ((icmp_ln51_25_fu_363_p2[0:0] == 1'b1) ? select_ln52_25_fu_403_p3 : 15'd0);

assign select_ln51_26_fu_467_p3 = ((icmp_ln51_26_fu_419_p2[0:0] == 1'b1) ? select_ln52_26_fu_459_p3 : 15'd0);

assign select_ln51_27_fu_523_p3 = ((icmp_ln51_27_fu_475_p2[0:0] == 1'b1) ? select_ln52_27_fu_515_p3 : 15'd0);

assign select_ln51_28_fu_579_p3 = ((icmp_ln51_28_fu_531_p2[0:0] == 1'b1) ? select_ln52_28_fu_571_p3 : 15'd0);

assign select_ln51_29_fu_635_p3 = ((icmp_ln51_29_fu_587_p2[0:0] == 1'b1) ? select_ln52_29_fu_627_p3 : 15'd0);

assign select_ln51_30_fu_691_p3 = ((icmp_ln51_30_fu_643_p2[0:0] == 1'b1) ? select_ln52_30_fu_683_p3 : 15'd0);

assign select_ln51_31_fu_747_p3 = ((icmp_ln51_31_fu_699_p2[0:0] == 1'b1) ? select_ln52_31_fu_739_p3 : 15'd0);

assign select_ln51_32_fu_803_p3 = ((icmp_ln51_32_fu_755_p2[0:0] == 1'b1) ? select_ln52_32_fu_795_p3 : 15'd0);

assign select_ln51_33_fu_859_p3 = ((icmp_ln51_33_fu_811_p2[0:0] == 1'b1) ? select_ln52_33_fu_851_p3 : 15'd0);

assign select_ln51_34_fu_915_p3 = ((icmp_ln51_34_fu_867_p2[0:0] == 1'b1) ? select_ln52_34_fu_907_p3 : 15'd0);

assign select_ln51_fu_299_p3 = ((icmp_ln51_fu_257_p2[0:0] == 1'b1) ? select_ln52_fu_291_p3 : 15'd0);

assign select_ln52_24_fu_347_p3 = ((icmp_ln52_24_fu_341_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_s_fu_323_p3);

assign select_ln52_25_fu_403_p3 = ((icmp_ln52_25_fu_397_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_23_fu_379_p3);

assign select_ln52_26_fu_459_p3 = ((icmp_ln52_26_fu_453_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_24_fu_435_p3);

assign select_ln52_27_fu_515_p3 = ((icmp_ln52_27_fu_509_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_25_fu_491_p3);

assign select_ln52_28_fu_571_p3 = ((icmp_ln52_28_fu_565_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_26_fu_547_p3);

assign select_ln52_29_fu_627_p3 = ((icmp_ln52_29_fu_621_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_27_fu_603_p3);

assign select_ln52_30_fu_683_p3 = ((icmp_ln52_30_fu_677_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_28_fu_659_p3);

assign select_ln52_31_fu_739_p3 = ((icmp_ln52_31_fu_733_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_29_fu_715_p3);

assign select_ln52_32_fu_795_p3 = ((icmp_ln52_32_fu_789_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_30_fu_771_p3);

assign select_ln52_33_fu_851_p3 = ((icmp_ln52_33_fu_845_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_31_fu_827_p3);

assign select_ln52_34_fu_907_p3 = ((icmp_ln52_34_fu_901_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln52_32_fu_883_p3);

assign select_ln52_fu_291_p3 = ((icmp_ln52_fu_285_p2[0:0] == 1'b1) ? 15'd32767 : shl_ln_fu_267_p3);

assign shl_ln52_23_fu_379_p3 = {{tmp_65_fu_369_p4}, {5'd0}};

assign shl_ln52_24_fu_435_p3 = {{tmp_66_fu_425_p4}, {5'd0}};

assign shl_ln52_25_fu_491_p3 = {{tmp_67_fu_481_p4}, {5'd0}};

assign shl_ln52_26_fu_547_p3 = {{tmp_68_fu_537_p4}, {5'd0}};

assign shl_ln52_27_fu_603_p3 = {{tmp_69_fu_593_p4}, {5'd0}};

assign shl_ln52_28_fu_659_p3 = {{tmp_70_fu_649_p4}, {5'd0}};

assign shl_ln52_29_fu_715_p3 = {{tmp_71_fu_705_p4}, {5'd0}};

assign shl_ln52_30_fu_771_p3 = {{tmp_72_fu_761_p4}, {5'd0}};

assign shl_ln52_31_fu_827_p3 = {{tmp_73_fu_817_p4}, {5'd0}};

assign shl_ln52_32_fu_883_p3 = {{tmp_74_fu_873_p4}, {5'd0}};

assign shl_ln52_s_fu_323_p3 = {{tmp_64_fu_313_p4}, {5'd0}};

assign shl_ln_fu_267_p3 = {{trunc_ln52_fu_263_p1}, {5'd0}};

assign start_out = real_start;

assign tmp_43_fu_217_p4 = {{layer8_out_dout[111:96]}};

assign tmp_44_fu_227_p4 = {{layer8_out_dout[127:112]}};

assign tmp_45_fu_237_p4 = {{layer8_out_dout[143:128]}};

assign tmp_46_fu_247_p4 = {{layer8_out_dout[159:144]}};

assign tmp_47_fu_275_p4 = {{layer8_out_dout[15:10]}};

assign tmp_48_fu_331_p4 = {{layer8_out_dout[31:26]}};

assign tmp_49_fu_387_p4 = {{layer8_out_dout[47:42]}};

assign tmp_50_fu_443_p4 = {{layer8_out_dout[63:58]}};

assign tmp_51_fu_499_p4 = {{layer8_out_dout[79:74]}};

assign tmp_52_fu_555_p4 = {{layer8_out_dout[95:90]}};

assign tmp_53_fu_611_p4 = {{layer8_out_dout[111:106]}};

assign tmp_54_fu_667_p4 = {{layer8_out_dout[127:122]}};

assign tmp_55_fu_723_p4 = {{layer8_out_dout[143:138]}};

assign tmp_56_fu_779_p4 = {{layer8_out_dout[159:154]}};

assign tmp_57_fu_835_p4 = {{layer8_out_dout[175:170]}};

assign tmp_58_fu_891_p4 = {{layer8_out_dout[191:186]}};

assign tmp_64_fu_313_p4 = {{layer8_out_dout[25:16]}};

assign tmp_65_fu_369_p4 = {{layer8_out_dout[41:32]}};

assign tmp_66_fu_425_p4 = {{layer8_out_dout[57:48]}};

assign tmp_67_fu_481_p4 = {{layer8_out_dout[73:64]}};

assign tmp_68_fu_537_p4 = {{layer8_out_dout[89:80]}};

assign tmp_69_fu_593_p4 = {{layer8_out_dout[105:96]}};

assign tmp_70_fu_649_p4 = {{layer8_out_dout[121:112]}};

assign tmp_71_fu_705_p4 = {{layer8_out_dout[137:128]}};

assign tmp_72_fu_761_p4 = {{layer8_out_dout[153:144]}};

assign tmp_73_fu_817_p4 = {{layer8_out_dout[169:160]}};

assign tmp_74_fu_873_p4 = {{layer8_out_dout[185:176]}};

assign tmp_fu_197_p4 = {{layer8_out_dout[79:64]}};

assign tmp_s_fu_207_p4 = {{layer8_out_dout[95:80]}};

assign trunc_ln44_2_fu_157_p4 = {{layer8_out_dout[191:176]}};

assign trunc_ln44_s_fu_147_p4 = {{layer8_out_dout[175:160]}};

assign trunc_ln52_fu_263_p1 = layer8_out_dout[9:0];

endmodule //myproject_relu_array_ap_fixed_12u_array_ap_ufixed_15_0_4_0_0_12u_relu_config9_s
