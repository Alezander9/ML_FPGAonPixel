// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_normalize_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer4_out_din,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_full_n,
        layer4_out_write
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [383:0] layer2_out_dout;
input  [1:0] layer2_out_num_data_valid;
input  [1:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [383:0] layer4_out_din;
input  [1:0] layer4_out_num_data_valid;
input  [1:0] layer4_out_fifo_cap;
input   layer4_out_full_n;
output   layer4_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer2_out_read;
reg layer4_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer2_out_blk_n;
reg    layer4_out_blk_n;
wire    ap_CS_fsm_state24;
reg   [15:0] a_23_reg_1108;
reg    ap_block_state1;
reg   [15:0] a_22_reg_1113;
reg   [15:0] a_1_reg_1118;
reg   [15:0] a_2_reg_1123;
reg   [15:0] a_3_reg_1128;
reg   [15:0] a_4_reg_1133;
reg   [15:0] a_5_reg_1138;
reg   [15:0] a_6_reg_1143;
reg   [15:0] a_7_reg_1148;
reg   [15:0] a_8_reg_1153;
reg   [15:0] a_9_reg_1158;
reg   [15:0] a_21_reg_1163;
reg   [15:0] a_10_reg_1168;
reg   [15:0] a_11_reg_1173;
reg   [15:0] a_12_reg_1178;
reg   [15:0] a_13_reg_1183;
reg   [15:0] a_14_reg_1188;
reg   [15:0] a_15_reg_1193;
reg   [15:0] a_16_reg_1198;
reg   [15:0] a_17_reg_1203;
reg   [15:0] a_18_reg_1208;
reg   [15:0] a_19_reg_1213;
reg   [15:0] a_20_reg_1218;
reg   [15:0] trunc_ln_reg_1223;
reg   [15:0] trunc_ln41_1_reg_1228;
wire    ap_CS_fsm_state2;
reg   [15:0] trunc_ln41_2_reg_1233;
wire    ap_CS_fsm_state3;
reg   [15:0] trunc_ln41_3_reg_1238;
wire    ap_CS_fsm_state4;
reg   [15:0] trunc_ln41_4_reg_1243;
wire    ap_CS_fsm_state5;
reg   [15:0] trunc_ln41_5_reg_1248;
wire    ap_CS_fsm_state6;
reg   [15:0] trunc_ln41_6_reg_1253;
wire    ap_CS_fsm_state7;
reg   [15:0] trunc_ln41_7_reg_1258;
wire    ap_CS_fsm_state8;
reg   [15:0] trunc_ln41_8_reg_1263;
wire    ap_CS_fsm_state9;
reg   [15:0] trunc_ln41_9_reg_1268;
wire    ap_CS_fsm_state10;
reg   [15:0] trunc_ln41_s_reg_1273;
wire    ap_CS_fsm_state11;
reg   [15:0] trunc_ln41_10_reg_1278;
wire    ap_CS_fsm_state12;
reg   [15:0] trunc_ln41_11_reg_1283;
wire    ap_CS_fsm_state13;
reg   [15:0] trunc_ln41_12_reg_1288;
wire    ap_CS_fsm_state14;
reg   [15:0] trunc_ln41_13_reg_1293;
wire    ap_CS_fsm_state15;
reg   [15:0] trunc_ln41_14_reg_1298;
wire    ap_CS_fsm_state16;
reg   [15:0] trunc_ln41_15_reg_1303;
wire    ap_CS_fsm_state17;
reg   [15:0] trunc_ln41_16_reg_1308;
wire    ap_CS_fsm_state18;
reg   [15:0] trunc_ln41_17_reg_1313;
wire    ap_CS_fsm_state19;
reg   [15:0] trunc_ln41_18_reg_1318;
wire    ap_CS_fsm_state20;
reg   [15:0] trunc_ln41_19_reg_1323;
wire    ap_CS_fsm_state21;
reg   [15:0] trunc_ln41_20_reg_1328;
wire    ap_CS_fsm_state22;
reg   [15:0] trunc_ln41_21_reg_1333;
wire    ap_CS_fsm_state23;
reg  signed [15:0] grp_fu_235_p0;
wire  signed [25:0] sext_ln42_fu_597_p1;
wire  signed [25:0] sext_ln42_1_fu_618_p1;
wire  signed [25:0] sext_ln42_2_fu_638_p1;
wire  signed [25:0] sext_ln42_3_fu_658_p1;
wire  signed [25:0] sext_ln42_4_fu_678_p1;
wire  signed [25:0] sext_ln42_5_fu_698_p1;
wire  signed [25:0] sext_ln42_6_fu_718_p1;
wire  signed [25:0] sext_ln42_7_fu_738_p1;
wire  signed [25:0] sext_ln42_8_fu_758_p1;
wire  signed [25:0] sext_ln42_9_fu_778_p1;
wire  signed [25:0] sext_ln42_10_fu_798_p1;
wire  signed [25:0] sext_ln42_11_fu_818_p1;
wire  signed [25:0] sext_ln42_12_fu_838_p1;
wire  signed [25:0] sext_ln42_13_fu_858_p1;
wire  signed [25:0] sext_ln42_14_fu_878_p1;
wire  signed [25:0] sext_ln42_15_fu_898_p1;
wire  signed [25:0] sext_ln42_16_fu_918_p1;
wire  signed [25:0] sext_ln42_17_fu_938_p1;
wire  signed [25:0] sext_ln42_18_fu_958_p1;
wire  signed [25:0] sext_ln42_19_fu_978_p1;
wire  signed [25:0] sext_ln42_20_fu_998_p1;
wire  signed [25:0] sext_ln42_21_fu_1018_p1;
wire  signed [25:0] sext_ln42_22_fu_1038_p1;
wire  signed [25:0] sext_ln42_23_fu_1058_p1;
reg   [13:0] grp_fu_235_p1;
wire   [15:0] a_fu_363_p1;
wire   [25:0] grp_fu_235_p2;
wire   [25:0] add_ln42_fu_602_p2;
wire   [25:0] add_ln42_1_fu_622_p2;
wire   [25:0] add_ln42_2_fu_642_p2;
wire   [25:0] add_ln42_3_fu_662_p2;
wire   [25:0] add_ln42_4_fu_682_p2;
wire   [25:0] add_ln42_5_fu_702_p2;
wire   [25:0] add_ln42_6_fu_722_p2;
wire   [25:0] add_ln42_7_fu_742_p2;
wire   [25:0] add_ln42_8_fu_762_p2;
wire   [25:0] add_ln42_9_fu_782_p2;
wire   [25:0] add_ln42_10_fu_802_p2;
wire   [25:0] add_ln42_11_fu_822_p2;
wire   [25:0] add_ln42_12_fu_842_p2;
wire   [25:0] add_ln42_13_fu_862_p2;
wire   [25:0] add_ln42_14_fu_882_p2;
wire   [25:0] add_ln42_15_fu_902_p2;
wire   [25:0] add_ln42_16_fu_922_p2;
wire   [25:0] add_ln42_17_fu_942_p2;
wire   [25:0] add_ln42_18_fu_962_p2;
wire   [25:0] add_ln42_19_fu_982_p2;
wire   [25:0] add_ln42_20_fu_1002_p2;
wire   [25:0] add_ln42_21_fu_1022_p2;
wire   [25:0] add_ln42_22_fu_1042_p2;
wire   [25:0] add_ln42_23_fu_1062_p2;
wire   [15:0] trunc_ln41_22_fu_1068_p4;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 24'd1;
end

myproject_mul_16s_14ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14ns_26_1_1_U12(
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .dout(grp_fu_235_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer4_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_10_reg_1168 <= {{layer2_out_dout[191:176]}};
        a_11_reg_1173 <= {{layer2_out_dout[207:192]}};
        a_12_reg_1178 <= {{layer2_out_dout[223:208]}};
        a_13_reg_1183 <= {{layer2_out_dout[239:224]}};
        a_14_reg_1188 <= {{layer2_out_dout[255:240]}};
        a_15_reg_1193 <= {{layer2_out_dout[271:256]}};
        a_16_reg_1198 <= {{layer2_out_dout[287:272]}};
        a_17_reg_1203 <= {{layer2_out_dout[303:288]}};
        a_18_reg_1208 <= {{layer2_out_dout[319:304]}};
        a_19_reg_1213 <= {{layer2_out_dout[335:320]}};
        a_1_reg_1118 <= {{layer2_out_dout[31:16]}};
        a_20_reg_1218 <= {{layer2_out_dout[351:336]}};
        a_21_reg_1163 <= {{layer2_out_dout[175:160]}};
        a_22_reg_1113 <= {{layer2_out_dout[383:368]}};
        a_23_reg_1108 <= {{layer2_out_dout[367:352]}};
        a_2_reg_1123 <= {{layer2_out_dout[47:32]}};
        a_3_reg_1128 <= {{layer2_out_dout[63:48]}};
        a_4_reg_1133 <= {{layer2_out_dout[79:64]}};
        a_5_reg_1138 <= {{layer2_out_dout[95:80]}};
        a_6_reg_1143 <= {{layer2_out_dout[111:96]}};
        a_7_reg_1148 <= {{layer2_out_dout[127:112]}};
        a_8_reg_1153 <= {{layer2_out_dout[143:128]}};
        a_9_reg_1158 <= {{layer2_out_dout[159:144]}};
        trunc_ln_reg_1223 <= {{add_ln42_fu_602_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln41_10_reg_1278 <= {{add_ln42_11_fu_822_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln41_11_reg_1283 <= {{add_ln42_12_fu_842_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        trunc_ln41_12_reg_1288 <= {{add_ln42_13_fu_862_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln41_13_reg_1293 <= {{add_ln42_14_fu_882_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trunc_ln41_14_reg_1298 <= {{add_ln42_15_fu_902_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        trunc_ln41_15_reg_1303 <= {{add_ln42_16_fu_922_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        trunc_ln41_16_reg_1308 <= {{add_ln42_17_fu_942_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        trunc_ln41_17_reg_1313 <= {{add_ln42_18_fu_962_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        trunc_ln41_18_reg_1318 <= {{add_ln42_19_fu_982_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        trunc_ln41_19_reg_1323 <= {{add_ln42_20_fu_1002_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln41_1_reg_1228 <= {{add_ln42_1_fu_622_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        trunc_ln41_20_reg_1328 <= {{add_ln42_21_fu_1022_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        trunc_ln41_21_reg_1333 <= {{add_ln42_22_fu_1042_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln41_2_reg_1233 <= {{add_ln42_2_fu_642_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln41_3_reg_1238 <= {{add_ln42_3_fu_662_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln41_4_reg_1243 <= {{add_ln42_4_fu_682_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln41_5_reg_1248 <= {{add_ln42_5_fu_702_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln41_6_reg_1253 <= {{add_ln42_6_fu_722_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln41_7_reg_1258 <= {{add_ln42_7_fu_742_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln41_8_reg_1263 <= {{add_ln42_8_fu_762_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln41_9_reg_1268 <= {{add_ln42_9_fu_782_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln41_s_reg_1273 <= {{add_ln42_10_fu_802_p2[25:10]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((layer4_out_full_n == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((layer4_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_235_p0 = sext_ln42_23_fu_1058_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_235_p0 = sext_ln42_22_fu_1038_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_235_p0 = sext_ln42_21_fu_1018_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_235_p0 = sext_ln42_20_fu_998_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_235_p0 = sext_ln42_19_fu_978_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_235_p0 = sext_ln42_18_fu_958_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_235_p0 = sext_ln42_17_fu_938_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_235_p0 = sext_ln42_16_fu_918_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_235_p0 = sext_ln42_15_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_235_p0 = sext_ln42_14_fu_878_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_235_p0 = sext_ln42_13_fu_858_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_235_p0 = sext_ln42_12_fu_838_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_235_p0 = sext_ln42_11_fu_818_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_235_p0 = sext_ln42_10_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_235_p0 = sext_ln42_9_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_235_p0 = sext_ln42_8_fu_758_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_235_p0 = sext_ln42_7_fu_738_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_235_p0 = sext_ln42_6_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_235_p0 = sext_ln42_5_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_235_p0 = sext_ln42_4_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_235_p0 = sext_ln42_3_fu_658_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_235_p0 = sext_ln42_2_fu_638_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_235_p0 = sext_ln42_1_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_235_p0 = sext_ln42_fu_597_p1;
    end else begin
        grp_fu_235_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_235_p1 = 26'd2184;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_235_p1 = 26'd4264;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_235_p1 = 26'd4017;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_235_p1 = 26'd3434;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_235_p1 = 26'd1974;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_235_p1 = 26'd4815;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_235_p1 = 26'd3038;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_235_p1 = 26'd2520;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_235_p1 = 26'd2365;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_235_p1 = 26'd5519;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_235_p1 = 26'd3179;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_235_p1 = 26'd3291;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_235_p1 = 26'd3715;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_235_p1 = 26'd3635;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_235_p1 = 26'd3542;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_235_p1 = 26'd2384;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_235_p1 = 26'd2084;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_235_p1 = 26'd7316;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_235_p1 = 26'd2116;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_235_p1 = 26'd4135;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_235_p1 = 26'd2171;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_235_p1 = 26'd2755;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_235_p1 = 26'd3285;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_235_p1 = 26'd1717;
    end else begin
        grp_fu_235_p1 = 'bx;
    end
end

always @ (*) begin
    if (((layer4_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        layer4_out_blk_n = layer4_out_full_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer4_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        layer4_out_write = 1'b1;
    end else begin
        layer4_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((layer4_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_363_p1 = layer2_out_dout[15:0];

assign add_ln42_10_fu_802_p2 = (grp_fu_235_p2 + 26'd1882112);

assign add_ln42_11_fu_822_p2 = (grp_fu_235_p2 + 26'd1441792);

assign add_ln42_12_fu_842_p2 = (grp_fu_235_p2 + 26'd419840);

assign add_ln42_13_fu_862_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66196480));

assign add_ln42_14_fu_882_p2 = (grp_fu_235_p2 + 26'd1274880);

assign add_ln42_15_fu_902_p2 = (grp_fu_235_p2 + 26'd66560);

assign add_ln42_16_fu_922_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66622464));

assign add_ln42_17_fu_942_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66136064));

assign add_ln42_18_fu_962_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66037760));

assign add_ln42_19_fu_982_p2 = ($signed(grp_fu_235_p2) + $signed(26'd67098624));

assign add_ln42_1_fu_622_p2 = ($signed(grp_fu_235_p2) + $signed(26'd65887232));

assign add_ln42_20_fu_1002_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66621440));

assign add_ln42_21_fu_1022_p2 = (grp_fu_235_p2 + 26'd743424);

assign add_ln42_22_fu_1042_p2 = (grp_fu_235_p2 + 26'd67584);

assign add_ln42_23_fu_1062_p2 = (grp_fu_235_p2 + 26'd750592);

assign add_ln42_2_fu_642_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66532352));

assign add_ln42_3_fu_662_p2 = (grp_fu_235_p2 + 26'd14336);

assign add_ln42_4_fu_682_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66523136));

assign add_ln42_5_fu_702_p2 = (grp_fu_235_p2 + 26'd1182720);

assign add_ln42_6_fu_722_p2 = (grp_fu_235_p2 + 26'd883712);

assign add_ln42_7_fu_742_p2 = (grp_fu_235_p2 + 26'd1024000);

assign add_ln42_8_fu_762_p2 = ($signed(grp_fu_235_p2) + $signed(26'd67077120));

assign add_ln42_9_fu_782_p2 = ($signed(grp_fu_235_p2) + $signed(26'd66590720));

assign add_ln42_fu_602_p2 = (grp_fu_235_p2 + 26'd159744);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign layer4_out_din = {{{{{{{{{{{{{{{{{{{{{{{{trunc_ln41_22_fu_1068_p4}, {trunc_ln41_21_reg_1333}}, {trunc_ln41_20_reg_1328}}, {trunc_ln41_19_reg_1323}}, {trunc_ln41_18_reg_1318}}, {trunc_ln41_17_reg_1313}}, {trunc_ln41_16_reg_1308}}, {trunc_ln41_15_reg_1303}}, {trunc_ln41_14_reg_1298}}, {trunc_ln41_13_reg_1293}}, {trunc_ln41_12_reg_1288}}, {trunc_ln41_11_reg_1283}}, {trunc_ln41_10_reg_1278}}, {trunc_ln41_s_reg_1273}}, {trunc_ln41_9_reg_1268}}, {trunc_ln41_8_reg_1263}}, {trunc_ln41_7_reg_1258}}, {trunc_ln41_6_reg_1253}}, {trunc_ln41_5_reg_1248}}, {trunc_ln41_4_reg_1243}}, {trunc_ln41_3_reg_1238}}, {trunc_ln41_2_reg_1233}}, {trunc_ln41_1_reg_1228}}, {trunc_ln_reg_1223}};

assign sext_ln42_10_fu_798_p1 = $signed(a_21_reg_1163);

assign sext_ln42_11_fu_818_p1 = $signed(a_10_reg_1168);

assign sext_ln42_12_fu_838_p1 = $signed(a_11_reg_1173);

assign sext_ln42_13_fu_858_p1 = $signed(a_12_reg_1178);

assign sext_ln42_14_fu_878_p1 = $signed(a_13_reg_1183);

assign sext_ln42_15_fu_898_p1 = $signed(a_14_reg_1188);

assign sext_ln42_16_fu_918_p1 = $signed(a_15_reg_1193);

assign sext_ln42_17_fu_938_p1 = $signed(a_16_reg_1198);

assign sext_ln42_18_fu_958_p1 = $signed(a_17_reg_1203);

assign sext_ln42_19_fu_978_p1 = $signed(a_18_reg_1208);

assign sext_ln42_1_fu_618_p1 = $signed(a_1_reg_1118);

assign sext_ln42_20_fu_998_p1 = $signed(a_19_reg_1213);

assign sext_ln42_21_fu_1018_p1 = $signed(a_20_reg_1218);

assign sext_ln42_22_fu_1038_p1 = $signed(a_23_reg_1108);

assign sext_ln42_23_fu_1058_p1 = $signed(a_22_reg_1113);

assign sext_ln42_2_fu_638_p1 = $signed(a_2_reg_1123);

assign sext_ln42_3_fu_658_p1 = $signed(a_3_reg_1128);

assign sext_ln42_4_fu_678_p1 = $signed(a_4_reg_1133);

assign sext_ln42_5_fu_698_p1 = $signed(a_5_reg_1138);

assign sext_ln42_6_fu_718_p1 = $signed(a_6_reg_1143);

assign sext_ln42_7_fu_738_p1 = $signed(a_7_reg_1148);

assign sext_ln42_8_fu_758_p1 = $signed(a_8_reg_1153);

assign sext_ln42_9_fu_778_p1 = $signed(a_9_reg_1158);

assign sext_ln42_fu_597_p1 = $signed(a_fu_363_p1);

assign start_out = real_start;

assign trunc_ln41_22_fu_1068_p4 = {{add_ln42_23_fu_1062_p2[25:10]}};

endmodule //myproject_normalize_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_config4_s
