// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_normalize_array_ap_fixed_16u_array_ap_fixed_15_5_5_3_0_16u_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer6_out_dout,
        layer6_out_num_data_valid,
        layer6_out_fifo_cap,
        layer6_out_empty_n,
        layer6_out_read,
        layer14_out_din,
        layer14_out_num_data_valid,
        layer14_out_fifo_cap,
        layer14_out_full_n,
        layer14_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] layer6_out_dout;
input  [1:0] layer6_out_num_data_valid;
input  [1:0] layer6_out_fifo_cap;
input   layer6_out_empty_n;
output   layer6_out_read;
output  [239:0] layer14_out_din;
input  [1:0] layer14_out_num_data_valid;
input  [1:0] layer14_out_fifo_cap;
input   layer14_out_full_n;
output   layer14_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer6_out_read;
reg layer14_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer6_out_blk_n;
reg    layer14_out_blk_n;
reg    ap_block_state1;
wire   [14:0] trunc_ln85_fu_151_p1;
wire   [22:0] y_fu_155_p3;
wire   [22:0] add_ln42_fu_163_p2;
wire   [14:0] tmp_s_fu_179_p4;
wire   [22:0] y_31_fu_189_p3;
wire   [22:0] add_ln42_80_fu_197_p2;
wire   [14:0] tmp_133_fu_213_p4;
wire   [22:0] y_32_fu_223_p3;
wire   [22:0] add_ln42_81_fu_231_p2;
wire   [14:0] tmp_134_fu_247_p4;
wire   [22:0] y_33_fu_257_p3;
wire   [22:0] add_ln42_82_fu_265_p2;
wire   [15:0] tmp_135_fu_281_p4;
wire   [22:0] y_34_fu_291_p3;
wire   [22:0] add_ln42_83_fu_299_p2;
wire   [14:0] tmp_136_fu_315_p4;
wire   [22:0] y_35_fu_325_p3;
wire   [22:0] add_ln42_84_fu_333_p2;
wire   [14:0] tmp_137_fu_349_p4;
wire   [22:0] y_36_fu_359_p3;
wire   [22:0] add_ln42_85_fu_367_p2;
wire   [15:0] tmp_138_fu_383_p4;
wire   [22:0] y_37_fu_393_p3;
wire   [22:0] add_ln42_86_fu_401_p2;
wire   [14:0] tmp_139_fu_417_p4;
wire   [22:0] y_38_fu_427_p3;
wire   [22:0] add_ln42_87_fu_435_p2;
wire   [14:0] tmp_140_fu_451_p4;
wire   [22:0] y_39_fu_461_p3;
wire   [22:0] add_ln42_88_fu_469_p2;
wire   [14:0] tmp_141_fu_485_p4;
wire   [22:0] y_40_fu_495_p3;
wire   [22:0] add_ln42_89_fu_503_p2;
wire   [14:0] tmp_142_fu_519_p4;
wire   [22:0] y_41_fu_529_p3;
wire   [22:0] add_ln42_90_fu_537_p2;
wire   [15:0] tmp_143_fu_553_p4;
wire   [22:0] y_42_fu_563_p3;
wire   [22:0] add_ln42_91_fu_571_p2;
wire   [15:0] tmp_144_fu_587_p4;
wire   [22:0] y_43_fu_597_p3;
wire   [22:0] add_ln42_92_fu_605_p2;
wire   [22:0] trunc_ln6_fu_621_p4;
wire   [22:0] add_ln42_93_fu_631_p2;
wire   [22:0] trunc_ln85_3_fu_647_p4;
wire   [22:0] add_ln42_94_fu_657_p2;
wire   [14:0] trunc_ln41_86_fu_663_p4;
wire   [14:0] trunc_ln41_85_fu_637_p4;
wire   [14:0] trunc_ln41_84_fu_611_p4;
wire   [14:0] trunc_ln41_83_fu_577_p4;
wire   [14:0] trunc_ln41_82_fu_543_p4;
wire   [14:0] trunc_ln41_81_fu_509_p4;
wire   [14:0] trunc_ln41_80_fu_475_p4;
wire   [14:0] trunc_ln41_79_fu_441_p4;
wire   [14:0] trunc_ln41_78_fu_407_p4;
wire   [14:0] trunc_ln41_77_fu_373_p4;
wire   [14:0] trunc_ln41_76_fu_339_p4;
wire   [14:0] trunc_ln41_75_fu_305_p4;
wire   [14:0] trunc_ln41_74_fu_271_p4;
wire   [14:0] trunc_ln41_73_fu_237_p4;
wire   [14:0] trunc_ln41_s_fu_203_p4;
wire   [14:0] trunc_ln_fu_169_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_blk_n = layer14_out_full_n;
    end else begin
        layer14_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_write = 1'b1;
    end else begin
        layer14_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_blk_n = layer6_out_empty_n;
    end else begin
        layer6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_read = 1'b1;
    end else begin
        layer6_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_80_fu_197_p2 = (y_31_fu_189_p3 + 23'd75776);

assign add_ln42_81_fu_231_p2 = ($signed(y_32_fu_223_p3) + $signed(23'd8384000));

assign add_ln42_82_fu_265_p2 = (y_33_fu_257_p3 + 23'd4608);

assign add_ln42_83_fu_299_p2 = (y_34_fu_291_p3 + 23'd120832);

assign add_ln42_84_fu_333_p2 = (y_35_fu_325_p3 + 23'd77824);

assign add_ln42_85_fu_367_p2 = ($signed(y_36_fu_359_p3) + $signed(23'd8357376));

assign add_ln42_86_fu_401_p2 = (y_37_fu_393_p3 + 23'd18432);

assign add_ln42_87_fu_435_p2 = (y_38_fu_427_p3 + 23'd39936);

assign add_ln42_88_fu_469_p2 = (y_39_fu_461_p3 + 23'd38400);

assign add_ln42_89_fu_503_p2 = ($signed(y_40_fu_495_p3) + $signed(23'd8275456));

assign add_ln42_90_fu_537_p2 = ($signed(y_41_fu_529_p3) + $signed(23'd8303616));

assign add_ln42_91_fu_571_p2 = (y_42_fu_563_p3 + 23'd138752);

assign add_ln42_92_fu_605_p2 = ($signed(y_43_fu_597_p3) + $signed(23'd8294912));

assign add_ln42_93_fu_631_p2 = ($signed(trunc_ln6_fu_621_p4) + $signed(23'd8310272));

assign add_ln42_94_fu_657_p2 = ($signed(trunc_ln85_3_fu_647_p4) + $signed(23'd8325120));

assign add_ln42_fu_163_p2 = (y_fu_155_p3 + 23'd65024);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer14_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign layer14_out_din = {{{{{{{{{{{{{{{{trunc_ln41_86_fu_663_p4}, {trunc_ln41_85_fu_637_p4}}, {trunc_ln41_84_fu_611_p4}}, {trunc_ln41_83_fu_577_p4}}, {trunc_ln41_82_fu_543_p4}}, {trunc_ln41_81_fu_509_p4}}, {trunc_ln41_80_fu_475_p4}}, {trunc_ln41_79_fu_441_p4}}, {trunc_ln41_78_fu_407_p4}}, {trunc_ln41_77_fu_373_p4}}, {trunc_ln41_76_fu_339_p4}}, {trunc_ln41_75_fu_305_p4}}, {trunc_ln41_74_fu_271_p4}}, {trunc_ln41_73_fu_237_p4}}, {trunc_ln41_s_fu_203_p4}}, {trunc_ln_fu_169_p4}};

assign start_out = real_start;

assign tmp_133_fu_213_p4 = {{layer6_out_dout[46:32]}};

assign tmp_134_fu_247_p4 = {{layer6_out_dout[62:48]}};

assign tmp_135_fu_281_p4 = {{layer6_out_dout[79:64]}};

assign tmp_136_fu_315_p4 = {{layer6_out_dout[94:80]}};

assign tmp_137_fu_349_p4 = {{layer6_out_dout[110:96]}};

assign tmp_138_fu_383_p4 = {{layer6_out_dout[127:112]}};

assign tmp_139_fu_417_p4 = {{layer6_out_dout[142:128]}};

assign tmp_140_fu_451_p4 = {{layer6_out_dout[158:144]}};

assign tmp_141_fu_485_p4 = {{layer6_out_dout[174:160]}};

assign tmp_142_fu_519_p4 = {{layer6_out_dout[190:176]}};

assign tmp_143_fu_553_p4 = {{layer6_out_dout[207:192]}};

assign tmp_144_fu_587_p4 = {{layer6_out_dout[223:208]}};

assign tmp_s_fu_179_p4 = {{layer6_out_dout[30:16]}};

assign trunc_ln41_73_fu_237_p4 = {{add_ln42_81_fu_231_p2[22:8]}};

assign trunc_ln41_74_fu_271_p4 = {{add_ln42_82_fu_265_p2[22:8]}};

assign trunc_ln41_75_fu_305_p4 = {{add_ln42_83_fu_299_p2[22:8]}};

assign trunc_ln41_76_fu_339_p4 = {{add_ln42_84_fu_333_p2[22:8]}};

assign trunc_ln41_77_fu_373_p4 = {{add_ln42_85_fu_367_p2[22:8]}};

assign trunc_ln41_78_fu_407_p4 = {{add_ln42_86_fu_401_p2[22:8]}};

assign trunc_ln41_79_fu_441_p4 = {{add_ln42_87_fu_435_p2[22:8]}};

assign trunc_ln41_80_fu_475_p4 = {{add_ln42_88_fu_469_p2[22:8]}};

assign trunc_ln41_81_fu_509_p4 = {{add_ln42_89_fu_503_p2[22:8]}};

assign trunc_ln41_82_fu_543_p4 = {{add_ln42_90_fu_537_p2[22:8]}};

assign trunc_ln41_83_fu_577_p4 = {{add_ln42_91_fu_571_p2[22:8]}};

assign trunc_ln41_84_fu_611_p4 = {{add_ln42_92_fu_605_p2[22:8]}};

assign trunc_ln41_85_fu_637_p4 = {{add_ln42_93_fu_631_p2[22:8]}};

assign trunc_ln41_86_fu_663_p4 = {{add_ln42_94_fu_657_p2[22:8]}};

assign trunc_ln41_s_fu_203_p4 = {{add_ln42_80_fu_197_p2[22:8]}};

assign trunc_ln6_fu_621_p4 = {{layer6_out_dout[238:216]}};

assign trunc_ln85_3_fu_647_p4 = {{layer6_out_dout[254:232]}};

assign trunc_ln85_fu_151_p1 = layer6_out_dout[14:0];

assign trunc_ln_fu_169_p4 = {{add_ln42_fu_163_p2[22:8]}};

assign y_31_fu_189_p3 = {{tmp_s_fu_179_p4}, {8'd0}};

assign y_32_fu_223_p3 = {{tmp_133_fu_213_p4}, {8'd0}};

assign y_33_fu_257_p3 = {{tmp_134_fu_247_p4}, {8'd0}};

assign y_34_fu_291_p3 = {{tmp_135_fu_281_p4}, {7'd0}};

assign y_35_fu_325_p3 = {{tmp_136_fu_315_p4}, {8'd0}};

assign y_36_fu_359_p3 = {{tmp_137_fu_349_p4}, {8'd0}};

assign y_37_fu_393_p3 = {{tmp_138_fu_383_p4}, {7'd0}};

assign y_38_fu_427_p3 = {{tmp_139_fu_417_p4}, {8'd0}};

assign y_39_fu_461_p3 = {{tmp_140_fu_451_p4}, {8'd0}};

assign y_40_fu_495_p3 = {{tmp_141_fu_485_p4}, {8'd0}};

assign y_41_fu_529_p3 = {{tmp_142_fu_519_p4}, {8'd0}};

assign y_42_fu_563_p3 = {{tmp_143_fu_553_p4}, {7'd0}};

assign y_43_fu_597_p3 = {{tmp_144_fu_587_p4}, {7'd0}};

assign y_fu_155_p3 = {{trunc_ln85_fu_151_p1}, {8'd0}};

endmodule //myproject_normalize_array_ap_fixed_16u_array_ap_fixed_15_5_5_3_0_16u_config14_s
