-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_array_ap_ufixed_24u_array_ap_fixed_16_6_5_3_0_12u_config6_s_w6_ROM_AUTOdEe is 
    generic(
             DataWidth     : integer := 10; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_array_ap_ufixed_24u_array_ap_fixed_16_6_5_3_0_12u_config6_s_w6_ROM_AUTOdEe is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1101010110", 1 => "0000000000", 2 => "0010101100", 3 => "0010111100", 
    4 => "0000000000", 5 => "1011111010", 6 => "1110011001", 7 => "0101111000", 
    8 => "0000000000", 9 => "1100001101", 10 => "1110010010", 11 => "0000011100", 
    12 => "0001110000", 13 => "1100101010", 14 => "1011101100", 15 => "0001000011", 
    16 => "1101110000", 17 => "1101111000", 18 => "1100110010", 19 => "0011010001", 
    20 => "1100001011", 21 => "0011100001", 22 => "0100000111", 23 => "1110111111", 
    24 => "0000000000", 25 => "1110111000", 26 => "0000000000", 27 => "0101101011", 
    28 => "1110110100", 29 => "0000000000", 30 => "0000000000", 31 => "1110110100", 
    32 => "0000000000", 33 => "0001111110", 34 => "1101011111", 35 => "0001100010", 
    36 => "0010111001", 37 => "1110000000", 38 => "0000000010", 39 => "0100011101", 
    40 => "1101100011", 41 => "1111011000", 42 => "0001110100", 43 => "0001001001", 
    44 => "1101110000", 45 => "0001011000", 46 => "1000001000", 47 => "0001110000", 
    48 => "1100101010", 49 => "0000000000", 50 => "1101100101", 51 => "0010110101", 
    52 => "1101101010", 53 => "0000110110", 54 => "0000000000", 55 => "1111000101", 
    56 => "1110111100", 57 => "0011100100", 58 => "1100010011", 59 => "0000000000", 
    60 => "0011110010", 61 => "0010011101", 62 => "0100000000", 63 => "0100011100", 
    64 => "1110100100", 65 => "0000000000", 66 => "0000011000", 67 => "0000000000", 
    68 => "0000000000", 69 => "0001010001", 70 => "1010100100", 71 => "1111000101", 
    72 => "0000000000", 73 => "0000000000", 74 => "1101001100", 75 => "0000000000", 
    76 => "1010111011", 77 => "0010111101", 78 => "1110100111", 79 => "0000000000", 
    80 => "1111110010", 81 => "1111001011", 82 => "1101100100", 83 => "1101011011", 
    84 => "1111000110", 85 => "0010111110", 86 => "0011101011", 87 => "0110001111", 
    88 => "0000000000", 89 => "0000000000", 90 => "0000000000", 91 => "1111001011", 
    92 => "1110010010", 93 => "0000000000", 94 => "1011111001", 95 => "0001111011", 
    96 => "0000000000", 97 => "0001111001", 98 => "0010001010", 99 => "0000000000", 
    100 => "0010011110", 101 => "1011100111", 102 => "0000000000", 103 => "0101101001", 
    104 => "1101011111", 105 => "0000000000", 106 => "0000000000", 107 => "0001001110", 
    108 => "0100000110", 109 => "1011010001", 110 => "1110100000", 111 => "1101100001", 
    112 => "1001111100", 113 => "0001100001", 114 => "0000000000", 115 => "1101000011", 
    116 => "0000000000", 117 => "0001100101", 118 => "0000000000", 119 => "0000000000", 
    120 => "0000101011", 121 => "0100101111", 122 => "1100111101", 123 => "0000000000", 
    124 => "0000000000", 125 => "0000000000", 126 => "1010101100", 127 => "1100111000", 
    128 => "1110010111", 129 => "0010000111", 130 => "0010001000", 131 => "0000000000", 
    132 => "0000000000", 133 => "0010111101", 134 => "0000000000", 135 => "0000000000", 
    136 => "1111100111", 137 => "0001000111", 138 => "0110100110", 139 => "0000000000", 
    140 => "0000110001", 141 => "0000000000", 142 => "1101111001", 143 => "0000000000", 
    144 => "0101110110", 145 => "0000000000", 146 => "0000000000", 147 => "0000010100", 
    148 => "0000000000", 149 => "0011111111", 150 => "0010001001", 151 => "1101101000", 
    152 => "1101110001", 153 => "1100101111", 154 => "0000110010", 155 => "0000000000", 
    156 => "1101100110", 157 => "0001101110", 158 => "0000000000", 159 => "1111010000", 
    160 => "0100000011", 161 => "0100011001", 162 => "0010011011", 163 => "1000010010", 
    164 => "0000000000", 165 => "1110001111", 166 => "1101011111", 167 => "0101011001", 
    168 => "0011110001", 169 => "0000000000", 170 => "0010100111", 171 => "1100100101", 
    172 => "0001011111", 173 => "0000000000", 174 => "0001101000", 175 => "0001111001", 
    176 => "1100101111", 177 => "1100110010", 178 => "0001000100", 179 => "1111000000", 
    180 => "0000000000", 181 => "1001100110", 182 => "1111000101", 183 => "1010011011", 
    184 => "1101000000", 185 => "0010101111", 186 => "0001111001", 187 => "0000000000", 
    188 => "0010111111", 189 => "0000000000", 190 => "0000000000", 191 => "0001100011", 
    192 => "1110001110", 193 => "0010001010", 194 => "1001100001", 195 => "0000001111", 
    196 => "0000000000", 197 => "1101010101", 198 => "1011100011", 199 => "1110110110", 
    200 => "1010000101", 201 => "0000000000", 202 => "1111110000", 203 => "1100111010", 
    204 => "0000000000", 205 => "1110010001", 206 => "0000000000", 207 => "0100001100", 
    208 => "0001111001", 209 => "0000000000", 210 => "0011101001", 211 => "0000000000", 
    212 => "0000000000", 213 => "0001110010", 214 => "0101101000", 215 => "0000000000", 
    216 => "0010010001", 217 => "1101010000", 218 => "0000000000", 219 => "0000000000", 
    220 => "0010011000", 221 => "1101111000", 222 => "0100010011", 223 => "0001001101", 
    224 => "0011010110", 225 => "0000000000", 226 => "0000000000", 227 => "0001001000", 
    228 => "0011001101", 229 => "0000000000", 230 => "1101111110", 231 => "1100101110", 
    232 => "0011000010", 233 => "0000000000", 234 => "0011100111", 235 => "0010010000", 
    236 => "1011010101", 237 => "1110111111", 238 => "1100010011", 239 => "0000000000", 
    240 => "0000111001", 241 => "0001100000", 242 => "0000000000", 243 => "1110111011", 
    244 => "0000000000", 245 => "0000000000", 246 => "0000000000", 247 => "0010010011", 
    248 => "1100100101", 249 => "0001000110", 250 => "1110100001", 251 => "0000000000", 
    252 => "0011100110", 253 => "1011111101", 254 => "0000000000", 255 => "0011000111", 
    256 => "0010000001", 257 => "0000000000", 258 => "0110100110", 259 => "0001111110", 
    260 => "0000000000", 261 => "0111101110", 262 => "0000000000", 263 => "0001101010", 
    264 => "0011000110", 265 => "0000000000", 266 => "0000000000", 267 => "0000000000", 
    268 => "0000000000", 269 => "0000101011", 270 => "0000000000", 271 => "0001111100", 
    272 => "1100000110", 273 => "1010110110", 274 => "1110011001", 275 => "1111110000", 
    276 => "0000000000", 277 => "0001001100", 278 => "1010010111", 279 => "0000000000", 
    280 => "0011000110", 281 => "0000000000", 282 => "1100100101", 283 => "1000010100", 
    284 => "1110101011", 285 => "0001000000", 286 => "0000000000", 287 => "0101000110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

