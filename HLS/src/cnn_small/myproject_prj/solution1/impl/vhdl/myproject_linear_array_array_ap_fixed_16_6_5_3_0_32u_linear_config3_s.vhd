-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_linear_array_array_ap_fixed_16_6_5_3_0_32u_linear_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer13_out_dout : IN STD_LOGIC_VECTOR (479 downto 0);
    layer13_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_empty_n : IN STD_LOGIC;
    layer13_out_read : OUT STD_LOGIC;
    layer3_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    layer3_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer3_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer3_out_full_n : IN STD_LOGIC;
    layer3_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_linear_array_array_ap_fixed_16_6_5_3_0_32u_linear_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000010";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010001";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001101";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_11C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011100";
    constant ap_const_lv32_11D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011101";
    constant ap_const_lv32_12B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101011";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_13A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111010";
    constant ap_const_lv32_13B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111011";
    constant ap_const_lv32_149 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001001";
    constant ap_const_lv32_14A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001010";
    constant ap_const_lv32_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011000";
    constant ap_const_lv32_159 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011001";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_176 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110110";
    constant ap_const_lv32_177 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110111";
    constant ap_const_lv32_185 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000101";
    constant ap_const_lv32_186 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000110";
    constant ap_const_lv32_194 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010100";
    constant ap_const_lv32_195 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010101";
    constant ap_const_lv32_1A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100011";
    constant ap_const_lv32_1A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100100";
    constant ap_const_lv32_1B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110010";
    constant ap_const_lv32_1B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110011";
    constant ap_const_lv32_1C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer13_out_blk_n : STD_LOGIC;
    signal layer3_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln22_fu_211_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_29_fu_505_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_30_fu_515_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_s_fu_215_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_2_fu_235_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln22_3_fu_245_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_4_fu_541_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_545_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln22_4_fu_255_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_5_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_557_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln22_5_fu_265_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_6_fu_565_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_7_fu_569_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln22_6_fu_275_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_7_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_581_p3 : STD_LOGIC_VECTOR (78 downto 0);
    signal trunc_ln22_7_fu_285_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_8_fu_589_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_9_fu_593_p3 : STD_LOGIC_VECTOR (94 downto 0);
    signal trunc_ln22_8_fu_295_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_9_fu_601_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_10_fu_605_p3 : STD_LOGIC_VECTOR (110 downto 0);
    signal trunc_ln22_9_fu_305_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_10_fu_613_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_11_fu_617_p3 : STD_LOGIC_VECTOR (126 downto 0);
    signal trunc_ln22_10_fu_315_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_11_fu_625_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_12_fu_629_p3 : STD_LOGIC_VECTOR (142 downto 0);
    signal trunc_ln22_11_fu_325_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_12_fu_637_p1 : STD_LOGIC_VECTOR (143 downto 0);
    signal tmp_13_fu_641_p3 : STD_LOGIC_VECTOR (158 downto 0);
    signal trunc_ln22_12_fu_335_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_13_fu_649_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_14_fu_653_p3 : STD_LOGIC_VECTOR (174 downto 0);
    signal trunc_ln22_13_fu_345_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_14_fu_661_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_15_fu_665_p3 : STD_LOGIC_VECTOR (190 downto 0);
    signal trunc_ln22_14_fu_355_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_15_fu_673_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_16_fu_677_p3 : STD_LOGIC_VECTOR (206 downto 0);
    signal trunc_ln22_15_fu_365_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_16_fu_685_p1 : STD_LOGIC_VECTOR (207 downto 0);
    signal tmp_17_fu_689_p3 : STD_LOGIC_VECTOR (222 downto 0);
    signal trunc_ln22_16_fu_375_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_17_fu_697_p1 : STD_LOGIC_VECTOR (223 downto 0);
    signal tmp_18_fu_701_p3 : STD_LOGIC_VECTOR (238 downto 0);
    signal trunc_ln22_17_fu_385_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_18_fu_709_p1 : STD_LOGIC_VECTOR (239 downto 0);
    signal tmp_19_fu_713_p3 : STD_LOGIC_VECTOR (254 downto 0);
    signal trunc_ln22_18_fu_395_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_19_fu_721_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_20_fu_725_p3 : STD_LOGIC_VECTOR (270 downto 0);
    signal trunc_ln22_19_fu_405_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_20_fu_733_p1 : STD_LOGIC_VECTOR (271 downto 0);
    signal tmp_21_fu_737_p3 : STD_LOGIC_VECTOR (286 downto 0);
    signal trunc_ln22_20_fu_415_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_21_fu_745_p1 : STD_LOGIC_VECTOR (287 downto 0);
    signal tmp_22_fu_749_p3 : STD_LOGIC_VECTOR (302 downto 0);
    signal trunc_ln22_21_fu_425_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_22_fu_757_p1 : STD_LOGIC_VECTOR (303 downto 0);
    signal tmp_23_fu_761_p3 : STD_LOGIC_VECTOR (318 downto 0);
    signal trunc_ln22_22_fu_435_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_23_fu_769_p1 : STD_LOGIC_VECTOR (319 downto 0);
    signal tmp_24_fu_773_p3 : STD_LOGIC_VECTOR (334 downto 0);
    signal trunc_ln22_23_fu_445_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_24_fu_781_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_25_fu_785_p3 : STD_LOGIC_VECTOR (350 downto 0);
    signal trunc_ln22_24_fu_455_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_25_fu_793_p1 : STD_LOGIC_VECTOR (351 downto 0);
    signal tmp_26_fu_797_p3 : STD_LOGIC_VECTOR (366 downto 0);
    signal trunc_ln22_25_fu_465_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_26_fu_805_p1 : STD_LOGIC_VECTOR (367 downto 0);
    signal tmp_27_fu_809_p3 : STD_LOGIC_VECTOR (382 downto 0);
    signal trunc_ln22_26_fu_475_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_27_fu_817_p1 : STD_LOGIC_VECTOR (383 downto 0);
    signal tmp_28_fu_821_p3 : STD_LOGIC_VECTOR (398 downto 0);
    signal trunc_ln22_27_fu_485_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_28_fu_829_p1 : STD_LOGIC_VECTOR (399 downto 0);
    signal tmp_29_fu_833_p3 : STD_LOGIC_VECTOR (414 downto 0);
    signal trunc_ln22_28_fu_495_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_29_fu_841_p1 : STD_LOGIC_VECTOR (415 downto 0);
    signal tmp_30_fu_845_p3 : STD_LOGIC_VECTOR (430 downto 0);
    signal trunc_ln22_1_fu_225_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_3_fu_537_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_2_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_30_fu_853_p1 : STD_LOGIC_VECTOR (431 downto 0);
    signal sext_ln29_fu_525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_857_p7 : STD_LOGIC_VECTOR (510 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer13_out_empty_n, layer3_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer3_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer3_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer3_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer3_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer13_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_blk_n <= layer13_out_empty_n;
        else 
            layer13_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer13_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer3_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_read <= ap_const_logic_1;
        else 
            layer13_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer3_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer3_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_blk_n <= layer3_out_full_n;
        else 
            layer3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer3_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_857_p7),512));


    layer3_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer3_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer3_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_write <= ap_const_logic_1;
        else 
            layer3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln29_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_fu_211_p1),16));

        sext_ln32_10_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_605_p3),112));

        sext_ln32_11_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_617_p3),128));

        sext_ln32_12_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_629_p3),144));

        sext_ln32_13_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_641_p3),160));

        sext_ln32_14_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_653_p3),176));

        sext_ln32_15_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_665_p3),192));

        sext_ln32_16_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_677_p3),208));

        sext_ln32_17_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_689_p3),224));

        sext_ln32_18_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_701_p3),240));

        sext_ln32_19_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_713_p3),256));

        sext_ln32_20_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_725_p3),272));

        sext_ln32_21_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_737_p3),288));

        sext_ln32_22_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_749_p3),304));

        sext_ln32_23_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_761_p3),320));

        sext_ln32_24_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_773_p3),336));

        sext_ln32_25_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_785_p3),352));

        sext_ln32_26_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_797_p3),368));

        sext_ln32_27_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_809_p3),384));

        sext_ln32_28_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_821_p3),400));

        sext_ln32_29_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_833_p3),416));

        sext_ln32_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_30_fu_515_p4),16));

        sext_ln32_30_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_845_p3),432));

        sext_ln32_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_s_fu_215_p4),16));

        sext_ln32_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_2_fu_235_p4),16));

        sext_ln32_5_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_545_p3),32));

        sext_ln32_6_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_557_p3),48));

        sext_ln32_7_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_569_p3),64));

        sext_ln32_8_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_581_p3),80));

        sext_ln32_9_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_593_p3),96));

        sext_ln32_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_29_fu_505_p4),16));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_605_p3 <= (trunc_ln22_8_fu_295_p4 & sext_ln32_9_fu_601_p1);
    tmp_11_fu_617_p3 <= (trunc_ln22_9_fu_305_p4 & sext_ln32_10_fu_613_p1);
    tmp_12_fu_629_p3 <= (trunc_ln22_10_fu_315_p4 & sext_ln32_11_fu_625_p1);
    tmp_13_fu_641_p3 <= (trunc_ln22_11_fu_325_p4 & sext_ln32_12_fu_637_p1);
    tmp_14_fu_653_p3 <= (trunc_ln22_12_fu_335_p4 & sext_ln32_13_fu_649_p1);
    tmp_15_fu_665_p3 <= (trunc_ln22_13_fu_345_p4 & sext_ln32_14_fu_661_p1);
    tmp_16_fu_677_p3 <= (trunc_ln22_14_fu_355_p4 & sext_ln32_15_fu_673_p1);
    tmp_17_fu_689_p3 <= (trunc_ln22_15_fu_365_p4 & sext_ln32_16_fu_685_p1);
    tmp_18_fu_701_p3 <= (trunc_ln22_16_fu_375_p4 & sext_ln32_17_fu_697_p1);
    tmp_19_fu_713_p3 <= (trunc_ln22_17_fu_385_p4 & sext_ln32_18_fu_709_p1);
    tmp_20_fu_725_p3 <= (trunc_ln22_18_fu_395_p4 & sext_ln32_19_fu_721_p1);
    tmp_21_fu_737_p3 <= (trunc_ln22_19_fu_405_p4 & sext_ln32_20_fu_733_p1);
    tmp_22_fu_749_p3 <= (trunc_ln22_20_fu_415_p4 & sext_ln32_21_fu_745_p1);
    tmp_23_fu_761_p3 <= (trunc_ln22_21_fu_425_p4 & sext_ln32_22_fu_757_p1);
    tmp_24_fu_773_p3 <= (trunc_ln22_22_fu_435_p4 & sext_ln32_23_fu_769_p1);
    tmp_25_fu_785_p3 <= (trunc_ln22_23_fu_445_p4 & sext_ln32_24_fu_781_p1);
    tmp_26_fu_797_p3 <= (trunc_ln22_24_fu_455_p4 & sext_ln32_25_fu_793_p1);
    tmp_27_fu_809_p3 <= (trunc_ln22_25_fu_465_p4 & sext_ln32_26_fu_805_p1);
    tmp_28_fu_821_p3 <= (trunc_ln22_26_fu_475_p4 & sext_ln32_27_fu_817_p1);
    tmp_29_fu_833_p3 <= (trunc_ln22_27_fu_485_p4 & sext_ln32_28_fu_829_p1);
    tmp_30_fu_845_p3 <= (trunc_ln22_28_fu_495_p4 & sext_ln32_29_fu_841_p1);
    tmp_31_fu_857_p7 <= (((((trunc_ln22_1_fu_225_p4 & sext_ln32_3_fu_537_p1) & sext_ln32_2_fu_533_p1) & sext_ln32_fu_529_p1) & sext_ln32_30_fu_853_p1) & sext_ln29_fu_525_p1);
    tmp_5_fu_545_p3 <= (trunc_ln22_3_fu_245_p4 & sext_ln32_4_fu_541_p1);
    tmp_6_fu_557_p3 <= (trunc_ln22_4_fu_255_p4 & sext_ln32_5_fu_553_p1);
    tmp_7_fu_569_p3 <= (trunc_ln22_5_fu_265_p4 & sext_ln32_6_fu_565_p1);
    tmp_8_fu_581_p3 <= (trunc_ln22_6_fu_275_p4 & sext_ln32_7_fu_577_p1);
    tmp_9_fu_593_p3 <= (trunc_ln22_7_fu_285_p4 & sext_ln32_8_fu_589_p1);
    trunc_ln22_10_fu_315_p4 <= layer13_out_dout(149 downto 135);
    trunc_ln22_11_fu_325_p4 <= layer13_out_dout(164 downto 150);
    trunc_ln22_12_fu_335_p4 <= layer13_out_dout(179 downto 165);
    trunc_ln22_13_fu_345_p4 <= layer13_out_dout(194 downto 180);
    trunc_ln22_14_fu_355_p4 <= layer13_out_dout(209 downto 195);
    trunc_ln22_15_fu_365_p4 <= layer13_out_dout(224 downto 210);
    trunc_ln22_16_fu_375_p4 <= layer13_out_dout(239 downto 225);
    trunc_ln22_17_fu_385_p4 <= layer13_out_dout(254 downto 240);
    trunc_ln22_18_fu_395_p4 <= layer13_out_dout(269 downto 255);
    trunc_ln22_19_fu_405_p4 <= layer13_out_dout(284 downto 270);
    trunc_ln22_1_fu_225_p4 <= layer13_out_dout(479 downto 465);
    trunc_ln22_20_fu_415_p4 <= layer13_out_dout(299 downto 285);
    trunc_ln22_21_fu_425_p4 <= layer13_out_dout(314 downto 300);
    trunc_ln22_22_fu_435_p4 <= layer13_out_dout(329 downto 315);
    trunc_ln22_23_fu_445_p4 <= layer13_out_dout(344 downto 330);
    trunc_ln22_24_fu_455_p4 <= layer13_out_dout(359 downto 345);
    trunc_ln22_25_fu_465_p4 <= layer13_out_dout(374 downto 360);
    trunc_ln22_26_fu_475_p4 <= layer13_out_dout(389 downto 375);
    trunc_ln22_27_fu_485_p4 <= layer13_out_dout(404 downto 390);
    trunc_ln22_28_fu_495_p4 <= layer13_out_dout(419 downto 405);
    trunc_ln22_29_fu_505_p4 <= layer13_out_dout(434 downto 420);
    trunc_ln22_2_fu_235_p4 <= layer13_out_dout(29 downto 15);
    trunc_ln22_30_fu_515_p4 <= layer13_out_dout(449 downto 435);
    trunc_ln22_3_fu_245_p4 <= layer13_out_dout(44 downto 30);
    trunc_ln22_4_fu_255_p4 <= layer13_out_dout(59 downto 45);
    trunc_ln22_5_fu_265_p4 <= layer13_out_dout(74 downto 60);
    trunc_ln22_6_fu_275_p4 <= layer13_out_dout(89 downto 75);
    trunc_ln22_7_fu_285_p4 <= layer13_out_dout(104 downto 90);
    trunc_ln22_8_fu_295_p4 <= layer13_out_dout(119 downto 105);
    trunc_ln22_9_fu_305_p4 <= layer13_out_dout(134 downto 120);
    trunc_ln22_fu_211_p1 <= layer13_out_dout(15 - 1 downto 0);
    trunc_ln22_s_fu_215_p4 <= layer13_out_dout(464 downto 450);
end behav;
