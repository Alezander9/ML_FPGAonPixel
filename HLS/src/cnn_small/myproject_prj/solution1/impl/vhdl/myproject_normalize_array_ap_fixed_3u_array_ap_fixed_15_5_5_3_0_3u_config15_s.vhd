-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_fixed_3u_array_ap_fixed_15_5_5_3_0_3u_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer10_out_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer10_out_empty_n : IN STD_LOGIC;
    layer10_out_read : OUT STD_LOGIC;
    layer15_out_din : OUT STD_LOGIC_VECTOR (44 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_full_n : IN STD_LOGIC;
    layer15_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_fixed_3u_array_ap_fixed_15_5_5_3_0_3u_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_15800 : STD_LOGIC_VECTOR (22 downto 0) := "00000010101100000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_7C8400 : STD_LOGIC_VECTOR (22 downto 0) := "11111001000010000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv23_7CCE00 : STD_LOGIC_VECTOR (22 downto 0) := "11111001100111000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer10_out_blk_n : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln85_fu_63_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_fu_67_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_fu_75_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln5_fu_91_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_47_fu_101_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln85_1_fu_117_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln42_48_fu_127_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln41_42_fu_133_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_s_fu_107_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_81_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer10_out_empty_n, layer15_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_47_fu_101_p2 <= std_logic_vector(unsigned(trunc_ln5_fu_91_p4) + unsigned(ap_const_lv23_7C8400));
    add_ln42_48_fu_127_p2 <= std_logic_vector(unsigned(trunc_ln85_1_fu_117_p4) + unsigned(ap_const_lv23_7CCE00));
    add_ln42_fu_75_p2 <= std_logic_vector(unsigned(y_fu_67_p3) + unsigned(ap_const_lv23_15800));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer10_out_empty_n, layer15_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer10_out_empty_n, layer15_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer10_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer10_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer10_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer10_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer10_out_blk_n <= layer10_out_empty_n;
        else 
            layer10_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer10_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer10_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer10_out_read <= ap_const_logic_1;
        else 
            layer10_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_full_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer15_out_din <= ((trunc_ln41_42_fu_133_p4 & trunc_ln41_s_fu_107_p4) & trunc_ln_fu_81_p4);

    layer15_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer10_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer10_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_write <= ap_const_logic_1;
        else 
            layer15_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln41_42_fu_133_p4 <= add_ln42_48_fu_127_p2(22 downto 8);
    trunc_ln41_s_fu_107_p4 <= add_ln42_47_fu_101_p2(22 downto 8);
    trunc_ln5_fu_91_p4 <= layer10_out_dout(30 downto 8);
    trunc_ln85_1_fu_117_p4 <= layer10_out_dout(46 downto 24);
    trunc_ln85_fu_63_p1 <= layer10_out_dout(15 - 1 downto 0);
    trunc_ln_fu_81_p4 <= add_ln42_fu_75_p2(22 downto 8);
    y_fu_67_p3 <= (trunc_ln85_fu_63_p1 & ap_const_lv8_0);
end behav;
