-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer2_out_dout : IN STD_LOGIC_VECTOR (383 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer2_out_empty_n : IN STD_LOGIC;
    layer2_out_read : OUT STD_LOGIC;
    layer4_out_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    layer4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer4_out_full_n : IN STD_LOGIC;
    layer4_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv26_6B5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010110101";
    constant ap_const_lv26_CD5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110011010101";
    constant ap_const_lv26_AC3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000101011000011";
    constant ap_const_lv26_87B : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100001111011";
    constant ap_const_lv26_1027 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000100111";
    constant ap_const_lv26_844 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100001000100";
    constant ap_const_lv26_1C94 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001110010010100";
    constant ap_const_lv26_824 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000100100";
    constant ap_const_lv26_950 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100101010000";
    constant ap_const_lv26_DD6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110111010110";
    constant ap_const_lv26_E33 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000111000110011";
    constant ap_const_lv26_E83 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000111010000011";
    constant ap_const_lv26_CDB : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110011011011";
    constant ap_const_lv26_C6B : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110001101011";
    constant ap_const_lv26_158F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001010110001111";
    constant ap_const_lv26_93D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100100111101";
    constant ap_const_lv26_9D8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100111011000";
    constant ap_const_lv26_BDE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000101111011110";
    constant ap_const_lv26_12CF : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001001011001111";
    constant ap_const_lv26_7B6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011110110110";
    constant ap_const_lv26_D6A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000110101101010";
    constant ap_const_lv26_FB1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000111110110001";
    constant ap_const_lv26_10A8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000010101000";
    constant ap_const_lv26_888 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100010001000";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv26_27000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100111000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_3ED5C00 : STD_LOGIC_VECTOR (25 downto 0) := "11111011010101110000000000";
    constant ap_const_lv26_3F73400 : STD_LOGIC_VECTOR (25 downto 0) := "11111101110011010000000000";
    constant ap_const_lv26_3800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000011100000000000";
    constant ap_const_lv26_3F71000 : STD_LOGIC_VECTOR (25 downto 0) := "11111101110001000000000000";
    constant ap_const_lv26_120C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000100100000110000000000";
    constant ap_const_lv26_D7C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000011010111110000000000";
    constant ap_const_lv26_FA000 : STD_LOGIC_VECTOR (25 downto 0) := "00000011111010000000000000";
    constant ap_const_lv26_3FF8400 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111000010000000000";
    constant ap_const_lv26_3F81800 : STD_LOGIC_VECTOR (25 downto 0) := "11111110000001100000000000";
    constant ap_const_lv26_1CB800 : STD_LOGIC_VECTOR (25 downto 0) := "00000111001011100000000000";
    constant ap_const_lv26_160000 : STD_LOGIC_VECTOR (25 downto 0) := "00000101100000000000000000";
    constant ap_const_lv26_66800 : STD_LOGIC_VECTOR (25 downto 0) := "00000001100110100000000000";
    constant ap_const_lv26_3F21400 : STD_LOGIC_VECTOR (25 downto 0) := "11111100100001010000000000";
    constant ap_const_lv26_137400 : STD_LOGIC_VECTOR (25 downto 0) := "00000100110111010000000000";
    constant ap_const_lv26_10400 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000010000000000";
    constant ap_const_lv26_3F89400 : STD_LOGIC_VECTOR (25 downto 0) := "11111110001001010000000000";
    constant ap_const_lv26_3F12800 : STD_LOGIC_VECTOR (25 downto 0) := "11111100010010100000000000";
    constant ap_const_lv26_3EFA800 : STD_LOGIC_VECTOR (25 downto 0) := "11111011111010100000000000";
    constant ap_const_lv26_3FFD800 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111101100000000000";
    constant ap_const_lv26_3F89000 : STD_LOGIC_VECTOR (25 downto 0) := "11111110001001000000000000";
    constant ap_const_lv26_B5800 : STD_LOGIC_VECTOR (25 downto 0) := "00000010110101100000000000";
    constant ap_const_lv26_10800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000100000000000";
    constant ap_const_lv26_B7400 : STD_LOGIC_VECTOR (25 downto 0) := "00000010110111010000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer2_out_blk_n : STD_LOGIC;
    signal layer4_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal a_23_reg_1108 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal a_22_reg_1113 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_reg_1123 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_3_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_4_reg_1133 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_5_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_6_reg_1143 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_7_reg_1148 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_8_reg_1153 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_9_reg_1158 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_21_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_10_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_11_reg_1173 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_12_reg_1178 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_13_reg_1183 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_14_reg_1188 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_15_reg_1193 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_16_reg_1198 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_17_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_18_reg_1208 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_19_reg_1213 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_20_reg_1218 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_1223 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_1_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln41_2_reg_1233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln41_3_reg_1238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln41_4_reg_1243 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln41_5_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln41_6_reg_1253 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln41_7_reg_1258 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln41_8_reg_1263 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln41_9_reg_1268 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln41_s_reg_1273 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln41_10_reg_1278 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln41_11_reg_1283 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln41_12_reg_1288 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln41_13_reg_1293 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln41_14_reg_1298 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln41_15_reg_1303 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln41_16_reg_1308 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln41_17_reg_1313 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln41_18_reg_1318 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln41_19_reg_1323 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln41_20_reg_1328 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln41_21_reg_1333 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_597_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_1_fu_618_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_2_fu_638_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_3_fu_658_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_4_fu_678_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_5_fu_698_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_6_fu_718_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_7_fu_738_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_8_fu_758_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_9_fu_778_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_10_fu_798_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_11_fu_818_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_12_fu_838_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_13_fu_858_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_14_fu_878_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_15_fu_898_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_16_fu_918_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_17_fu_938_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_18_fu_958_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_19_fu_978_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_20_fu_998_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_21_fu_1018_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_22_fu_1038_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln42_23_fu_1058_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_fu_602_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_1_fu_622_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_2_fu_642_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_3_fu_662_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_4_fu_682_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_5_fu_702_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_6_fu_722_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_7_fu_742_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_8_fu_762_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_9_fu_782_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_10_fu_802_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_11_fu_822_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_12_fu_842_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_13_fu_862_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_14_fu_882_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_15_fu_902_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_16_fu_922_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_17_fu_942_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_18_fu_962_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_19_fu_982_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_20_fu_1002_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_21_fu_1022_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_22_fu_1042_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_23_fu_1062_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln41_22_fu_1068_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_14ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_14ns_26_1_1_U12 : component myproject_mul_16s_14ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        dout => grp_fu_235_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer4_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((layer2_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_10_reg_1168 <= layer2_out_dout(191 downto 176);
                a_11_reg_1173 <= layer2_out_dout(207 downto 192);
                a_12_reg_1178 <= layer2_out_dout(223 downto 208);
                a_13_reg_1183 <= layer2_out_dout(239 downto 224);
                a_14_reg_1188 <= layer2_out_dout(255 downto 240);
                a_15_reg_1193 <= layer2_out_dout(271 downto 256);
                a_16_reg_1198 <= layer2_out_dout(287 downto 272);
                a_17_reg_1203 <= layer2_out_dout(303 downto 288);
                a_18_reg_1208 <= layer2_out_dout(319 downto 304);
                a_19_reg_1213 <= layer2_out_dout(335 downto 320);
                a_1_reg_1118 <= layer2_out_dout(31 downto 16);
                a_20_reg_1218 <= layer2_out_dout(351 downto 336);
                a_21_reg_1163 <= layer2_out_dout(175 downto 160);
                a_22_reg_1113 <= layer2_out_dout(383 downto 368);
                a_23_reg_1108 <= layer2_out_dout(367 downto 352);
                a_2_reg_1123 <= layer2_out_dout(47 downto 32);
                a_3_reg_1128 <= layer2_out_dout(63 downto 48);
                a_4_reg_1133 <= layer2_out_dout(79 downto 64);
                a_5_reg_1138 <= layer2_out_dout(95 downto 80);
                a_6_reg_1143 <= layer2_out_dout(111 downto 96);
                a_7_reg_1148 <= layer2_out_dout(127 downto 112);
                a_8_reg_1153 <= layer2_out_dout(143 downto 128);
                a_9_reg_1158 <= layer2_out_dout(159 downto 144);
                trunc_ln_reg_1223 <= add_ln42_fu_602_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln41_10_reg_1278 <= add_ln42_11_fu_822_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln41_11_reg_1283 <= add_ln42_12_fu_842_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln41_12_reg_1288 <= add_ln42_13_fu_862_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln41_13_reg_1293 <= add_ln42_14_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                trunc_ln41_14_reg_1298 <= add_ln42_15_fu_902_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                trunc_ln41_15_reg_1303 <= add_ln42_16_fu_922_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                trunc_ln41_16_reg_1308 <= add_ln42_17_fu_942_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                trunc_ln41_17_reg_1313 <= add_ln42_18_fu_962_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln41_18_reg_1318 <= add_ln42_19_fu_982_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                trunc_ln41_19_reg_1323 <= add_ln42_20_fu_1002_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln41_1_reg_1228 <= add_ln42_1_fu_622_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                trunc_ln41_20_reg_1328 <= add_ln42_21_fu_1022_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                trunc_ln41_21_reg_1333 <= add_ln42_22_fu_1042_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln41_2_reg_1233 <= add_ln42_2_fu_642_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln41_3_reg_1238 <= add_ln42_3_fu_662_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln41_4_reg_1243 <= add_ln42_4_fu_682_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln41_5_reg_1248 <= add_ln42_5_fu_702_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln41_6_reg_1253 <= add_ln42_6_fu_722_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln41_7_reg_1258 <= add_ln42_7_fu_742_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln41_8_reg_1263 <= add_ln42_8_fu_762_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln41_9_reg_1268 <= add_ln42_9_fu_782_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln41_s_reg_1273 <= add_ln42_10_fu_802_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer2_out_empty_n, layer4_out_full_n, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer2_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((layer4_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_363_p1 <= layer2_out_dout(16 - 1 downto 0);
    add_ln42_10_fu_802_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_1CB800));
    add_ln42_11_fu_822_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_160000));
    add_ln42_12_fu_842_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_66800));
    add_ln42_13_fu_862_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F21400));
    add_ln42_14_fu_882_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_137400));
    add_ln42_15_fu_902_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_10400));
    add_ln42_16_fu_922_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F89400));
    add_ln42_17_fu_942_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F12800));
    add_ln42_18_fu_962_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3EFA800));
    add_ln42_19_fu_982_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3FFD800));
    add_ln42_1_fu_622_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3ED5C00));
    add_ln42_20_fu_1002_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F89000));
    add_ln42_21_fu_1022_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_B5800));
    add_ln42_22_fu_1042_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_10800));
    add_ln42_23_fu_1062_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_B7400));
    add_ln42_2_fu_642_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F73400));
    add_ln42_3_fu_662_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3800));
    add_ln42_4_fu_682_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F71000));
    add_ln42_5_fu_702_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_120C00));
    add_ln42_6_fu_722_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_D7C00));
    add_ln42_7_fu_742_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_FA000));
    add_ln42_8_fu_762_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3FF8400));
    add_ln42_9_fu_782_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_3F81800));
    add_ln42_fu_602_p2 <= std_logic_vector(unsigned(grp_fu_235_p2) + unsigned(ap_const_lv26_27000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer2_out_empty_n)
    begin
        if (((layer2_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(layer4_out_full_n)
    begin
        if ((layer4_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer2_out_empty_n)
    begin
                ap_block_state1 <= ((layer2_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer4_out_full_n, ap_CS_fsm_state24)
    begin
        if (((layer4_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_235_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, sext_ln42_fu_597_p1, sext_ln42_1_fu_618_p1, sext_ln42_2_fu_638_p1, sext_ln42_3_fu_658_p1, sext_ln42_4_fu_678_p1, sext_ln42_5_fu_698_p1, sext_ln42_6_fu_718_p1, sext_ln42_7_fu_738_p1, sext_ln42_8_fu_758_p1, sext_ln42_9_fu_778_p1, sext_ln42_10_fu_798_p1, sext_ln42_11_fu_818_p1, sext_ln42_12_fu_838_p1, sext_ln42_13_fu_858_p1, sext_ln42_14_fu_878_p1, sext_ln42_15_fu_898_p1, sext_ln42_16_fu_918_p1, sext_ln42_17_fu_938_p1, sext_ln42_18_fu_958_p1, sext_ln42_19_fu_978_p1, sext_ln42_20_fu_998_p1, sext_ln42_21_fu_1018_p1, sext_ln42_22_fu_1038_p1, sext_ln42_23_fu_1058_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_235_p0 <= sext_ln42_23_fu_1058_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_235_p0 <= sext_ln42_22_fu_1038_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_235_p0 <= sext_ln42_21_fu_1018_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_235_p0 <= sext_ln42_20_fu_998_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_235_p0 <= sext_ln42_19_fu_978_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_235_p0 <= sext_ln42_18_fu_958_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_235_p0 <= sext_ln42_17_fu_938_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_235_p0 <= sext_ln42_16_fu_918_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_235_p0 <= sext_ln42_15_fu_898_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_235_p0 <= sext_ln42_14_fu_878_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_235_p0 <= sext_ln42_13_fu_858_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_235_p0 <= sext_ln42_12_fu_838_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_235_p0 <= sext_ln42_11_fu_818_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_235_p0 <= sext_ln42_10_fu_798_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_235_p0 <= sext_ln42_9_fu_778_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_235_p0 <= sext_ln42_8_fu_758_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_235_p0 <= sext_ln42_7_fu_738_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_235_p0 <= sext_ln42_6_fu_718_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_235_p0 <= sext_ln42_5_fu_698_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_235_p0 <= sext_ln42_4_fu_678_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_235_p0 <= sext_ln42_3_fu_658_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_235_p0 <= sext_ln42_2_fu_638_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_235_p0 <= sext_ln42_1_fu_618_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_235_p0 <= sext_ln42_fu_597_p1(16 - 1 downto 0);
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_235_p1 <= ap_const_lv26_888(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_235_p1 <= ap_const_lv26_10A8(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_235_p1 <= ap_const_lv26_FB1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_235_p1 <= ap_const_lv26_D6A(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_235_p1 <= ap_const_lv26_7B6(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_235_p1 <= ap_const_lv26_12CF(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_235_p1 <= ap_const_lv26_BDE(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_235_p1 <= ap_const_lv26_9D8(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_235_p1 <= ap_const_lv26_93D(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_235_p1 <= ap_const_lv26_158F(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_235_p1 <= ap_const_lv26_C6B(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_235_p1 <= ap_const_lv26_CDB(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_235_p1 <= ap_const_lv26_E83(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_235_p1 <= ap_const_lv26_E33(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_235_p1 <= ap_const_lv26_DD6(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_235_p1 <= ap_const_lv26_950(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_235_p1 <= ap_const_lv26_824(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_235_p1 <= ap_const_lv26_1C94(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_235_p1 <= ap_const_lv26_844(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_235_p1 <= ap_const_lv26_1027(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_235_p1 <= ap_const_lv26_87B(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_235_p1 <= ap_const_lv26_AC3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_235_p1 <= ap_const_lv26_CD5(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_235_p1 <= ap_const_lv26_6B5(14 - 1 downto 0);
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(layer4_out_full_n, ap_CS_fsm_state24)
    begin
        if (((layer4_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer2_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer2_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_blk_n <= layer2_out_empty_n;
        else 
            layer2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer2_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer2_out_empty_n)
    begin
        if ((not(((layer2_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_read <= ap_const_logic_1;
        else 
            layer2_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer4_out_blk_n_assign_proc : process(layer4_out_full_n, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer4_out_blk_n <= layer4_out_full_n;
        else 
            layer4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer4_out_din <= (((((((((((((((((((((((trunc_ln41_22_fu_1068_p4 & trunc_ln41_21_reg_1333) & trunc_ln41_20_reg_1328) & trunc_ln41_19_reg_1323) & trunc_ln41_18_reg_1318) & trunc_ln41_17_reg_1313) & trunc_ln41_16_reg_1308) & trunc_ln41_15_reg_1303) & trunc_ln41_14_reg_1298) & trunc_ln41_13_reg_1293) & trunc_ln41_12_reg_1288) & trunc_ln41_11_reg_1283) & trunc_ln41_10_reg_1278) & trunc_ln41_s_reg_1273) & trunc_ln41_9_reg_1268) & trunc_ln41_8_reg_1263) & trunc_ln41_7_reg_1258) & trunc_ln41_6_reg_1253) & trunc_ln41_5_reg_1248) & trunc_ln41_4_reg_1243) & trunc_ln41_3_reg_1238) & trunc_ln41_2_reg_1233) & trunc_ln41_1_reg_1228) & trunc_ln_reg_1223);

    layer4_out_write_assign_proc : process(layer4_out_full_n, ap_CS_fsm_state24)
    begin
        if (((layer4_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            layer4_out_write <= ap_const_logic_1;
        else 
            layer4_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln42_10_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_21_reg_1163),26));

        sext_ln42_11_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_10_reg_1168),26));

        sext_ln42_12_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_11_reg_1173),26));

        sext_ln42_13_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_12_reg_1178),26));

        sext_ln42_14_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_13_reg_1183),26));

        sext_ln42_15_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_14_reg_1188),26));

        sext_ln42_16_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_15_reg_1193),26));

        sext_ln42_17_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_16_reg_1198),26));

        sext_ln42_18_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_17_reg_1203),26));

        sext_ln42_19_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_18_reg_1208),26));

        sext_ln42_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_1_reg_1118),26));

        sext_ln42_20_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_19_reg_1213),26));

        sext_ln42_21_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_20_reg_1218),26));

        sext_ln42_22_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_23_reg_1108),26));

        sext_ln42_23_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_22_reg_1113),26));

        sext_ln42_2_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_2_reg_1123),26));

        sext_ln42_3_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_3_reg_1128),26));

        sext_ln42_4_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_4_reg_1133),26));

        sext_ln42_5_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_5_reg_1138),26));

        sext_ln42_6_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_6_reg_1143),26));

        sext_ln42_7_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_7_reg_1148),26));

        sext_ln42_8_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_8_reg_1153),26));

        sext_ln42_9_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_9_reg_1158),26));

        sext_ln42_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_fu_363_p1),26));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln41_22_fu_1068_p4 <= add_ln42_23_fu_1062_p2(25 downto 10);
end behav;
