-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_normalize_array_ap_ufixed_32u_array_ap_fixed_16_6_5_3_0_32u_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer4_out_dout : IN STD_LOGIC_VECTOR (479 downto 0);
    layer4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer4_out_empty_n : IN STD_LOGIC;
    layer4_out_read : OUT STD_LOGIC;
    layer5_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer5_out_full_n : IN STD_LOGIC;
    layer5_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_normalize_array_ap_ufixed_32u_array_ap_fixed_16_6_5_3_0_32u_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv26_73F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011100111111";
    constant ap_const_lv26_76D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011101101101";
    constant ap_const_lv26_727 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011100100111";
    constant ap_const_lv26_5BC : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110111100";
    constant ap_const_lv26_6F5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011110101";
    constant ap_const_lv31_7FFF81E2 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111000000111100010";
    constant ap_const_lv30_41A8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000110101000";
    constant ap_const_lv27_BBD : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101110111101";
    constant ap_const_lv31_7FFF85EC : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111000010111101100";
    constant ap_const_lv27_8F7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100011110111";
    constant ap_const_lv26_610 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000010000";
    constant ap_const_lv26_6A6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010100110";
    constant ap_const_lv26_756 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011101010110";
    constant ap_const_lv25_379 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001101111001";
    constant ap_const_lv27_8E3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100011100011";
    constant ap_const_lv27_C02 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000110000000010";
    constant ap_const_lv26_6F3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011110011";
    constant ap_const_lv27_9F9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100111111001";
    constant ap_const_lv26_664 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001100100";
    constant ap_const_lv27_B13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101100010011";
    constant ap_const_lv27_DF7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000110111110111";
    constant ap_const_lv25_3CC : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001111001100";
    constant ap_const_lv26_468 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010001101000";
    constant ap_const_lv27_855 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100001010101";
    constant ap_const_lv28_155A : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001010101011010";
    constant ap_const_lv26_451 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010001010001";
    constant ap_const_lv27_A54 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101001010100";
    constant ap_const_lv26_5D4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111010100";
    constant ap_const_lv26_5BE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110111110";
    constant ap_const_lv30_7EB5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000111111010110101";
    constant ap_const_lv26_7CD : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111001101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001101";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_11C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011100";
    constant ap_const_lv32_11D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011101";
    constant ap_const_lv32_12B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101011";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_13A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111010";
    constant ap_const_lv32_13B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111011";
    constant ap_const_lv32_149 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001001";
    constant ap_const_lv32_14A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001010";
    constant ap_const_lv32_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011000";
    constant ap_const_lv32_159 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011001";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_176 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110110";
    constant ap_const_lv32_177 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110111";
    constant ap_const_lv32_185 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000101";
    constant ap_const_lv32_186 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000110";
    constant ap_const_lv32_194 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010100";
    constant ap_const_lv32_195 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010101";
    constant ap_const_lv32_1A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100011";
    constant ap_const_lv32_1A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100100";
    constant ap_const_lv32_1B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110010";
    constant ap_const_lv32_1B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110011";
    constant ap_const_lv32_1C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv27_6FF8000 : STD_LOGIC_VECTOR (26 downto 0) := "110111111111000000000000000";
    constant ap_const_lv27_74D8000 : STD_LOGIC_VECTOR (26 downto 0) := "111010011011000000000000000";
    constant ap_const_lv32_1C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000010";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010001";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv27_76C8000 : STD_LOGIC_VECTOR (26 downto 0) := "111011011001000000000000000";
    constant ap_const_lv27_78B8000 : STD_LOGIC_VECTOR (26 downto 0) := "111100010111000000000000000";
    constant ap_const_lv26_2480000 : STD_LOGIC_VECTOR (25 downto 0) := "10010010000000000000000000";
    constant ap_const_lv27_4B28000 : STD_LOGIC_VECTOR (26 downto 0) := "100101100101000000000000000";
    constant ap_const_lv31_7FA68000 : STD_LOGIC_VECTOR (30 downto 0) := "1111111101001101000000000000000";
    constant ap_const_lv31_7FE90000 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111010010000000000000000";
    constant ap_const_lv28_A4E0000 : STD_LOGIC_VECTOR (27 downto 0) := "1010010011100000000000000000";
    constant ap_const_lv31_7FFE8000 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111101000000000000000";
    constant ap_const_lv27_4510000 : STD_LOGIC_VECTOR (26 downto 0) := "100010100010000000000000000";
    constant ap_const_lv26_2018000 : STD_LOGIC_VECTOR (25 downto 0) := "10000000011000000000000000";
    constant ap_const_lv27_7578000 : STD_LOGIC_VECTOR (26 downto 0) := "111010101111000000000000000";
    constant ap_const_lv26_20B0000 : STD_LOGIC_VECTOR (25 downto 0) := "10000010110000000000000000";
    constant ap_const_lv26_3E48000 : STD_LOGIC_VECTOR (25 downto 0) := "11111001001000000000000000";
    constant ap_const_lv28_BCA0000 : STD_LOGIC_VECTOR (27 downto 0) := "1011110010100000000000000000";
    constant ap_const_lv28_F348000 : STD_LOGIC_VECTOR (27 downto 0) := "1111001101001000000000000000";
    constant ap_const_lv27_4A90000 : STD_LOGIC_VECTOR (26 downto 0) := "100101010010000000000000000";
    constant ap_const_lv28_F838000 : STD_LOGIC_VECTOR (27 downto 0) := "1111100000111000000000000000";
    constant ap_const_lv27_53F8000 : STD_LOGIC_VECTOR (26 downto 0) := "101001111111000000000000000";
    constant ap_const_lv28_FA38000 : STD_LOGIC_VECTOR (27 downto 0) := "1111101000111000000000000000";
    constant ap_const_lv28_FA88000 : STD_LOGIC_VECTOR (27 downto 0) := "1111101010001000000000000000";
    constant ap_const_lv26_2428000 : STD_LOGIC_VECTOR (25 downto 0) := "10010000101000000000000000";
    constant ap_const_lv26_2060000 : STD_LOGIC_VECTOR (25 downto 0) := "10000001100000000000000000";
    constant ap_const_lv27_7080000 : STD_LOGIC_VECTOR (26 downto 0) := "111000010000000000000000000";
    constant ap_const_lv29_15840000 : STD_LOGIC_VECTOR (28 downto 0) := "10101100001000000000000000000";
    constant ap_const_lv26_2B88000 : STD_LOGIC_VECTOR (25 downto 0) := "10101110001000000000000000";
    constant ap_const_lv28_B880000 : STD_LOGIC_VECTOR (27 downto 0) := "1011100010000000000000000000";
    constant ap_const_lv27_5C08000 : STD_LOGIC_VECTOR (26 downto 0) := "101110000001000000000000000";
    constant ap_const_lv26_2ED8000 : STD_LOGIC_VECTOR (25 downto 0) := "10111011011000000000000000";
    constant ap_const_lv30_20000 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_const_lv27_6B90000 : STD_LOGIC_VECTOR (26 downto 0) := "110101110010000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer4_out_blk_n : STD_LOGIC;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal a_1_reg_1697 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal a_2_reg_1702 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_3_reg_1707 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_4_reg_1712 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_5_reg_1717 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_6_reg_1722 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_7_reg_1727 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_8_reg_1732 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_9_reg_1737 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_28_reg_1742 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_10_reg_1747 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_11_reg_1752 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_12_reg_1757 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_13_reg_1762 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_14_reg_1767 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_15_reg_1772 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_16_reg_1777 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_17_reg_1782 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_18_reg_1787 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_19_reg_1792 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_20_reg_1797 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_21_reg_1802 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_22_reg_1807 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_23_reg_1812 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_24_reg_1817 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_25_reg_1822 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_26_reg_1827 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_27_reg_1832 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_reg_1837 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln41_1_reg_1842 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln3_reg_1847 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln73_1_reg_1852 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln41_2_reg_1857 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln41_3_reg_1862 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln41_4_reg_1867 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln41_5_reg_1872 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln41_6_reg_1877 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln41_7_reg_1882 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln41_8_reg_1887 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln41_9_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln41_s_reg_1897 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln41_10_reg_1902 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln41_11_reg_1907 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln41_12_reg_1912 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln41_13_reg_1917 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln41_14_reg_1922 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln41_15_reg_1927 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln41_16_reg_1932 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln41_17_reg_1937 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln41_18_reg_1942 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln41_19_reg_1947 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln41_20_reg_1952 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln41_21_reg_1957 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln41_22_reg_1962 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln41_23_reg_1967 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln41_24_reg_1972 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln41_25_reg_1977 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal trunc_ln41_26_reg_1982 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln41_27_reg_1987 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal trunc_ln41_28_reg_1992 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_s_reg_1997 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_319_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln73_2_fu_822_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_3_fu_867_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_4_fu_891_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_5_fu_915_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_7_fu_935_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_6_fu_959_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln73_8_fu_979_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln73_10_fu_1003_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_9_fu_1027_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln73_11_fu_1047_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_12_fu_1067_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_13_fu_1087_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_14_fu_1111_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_15_fu_1131_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln73_16_fu_1155_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_17_fu_1179_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_18_fu_1203_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_19_fu_1227_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_20_fu_1251_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_21_fu_1275_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_22_fu_1299_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_23_fu_1323_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln73_24_fu_1347_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_25_fu_1367_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_26_fu_1387_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln73_27_fu_1411_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_28_fu_1431_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_29_fu_1455_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_30_fu_1479_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln73_31_fu_1499_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln73_32_fu_1603_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln73_fu_772_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_776_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln73_1_fu_788_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln73_fu_784_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln73_1_fu_796_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_32_fu_800_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_fu_806_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal a_fu_482_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln42_fu_827_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln42_fu_827_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_1_fu_831_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_1_fu_871_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_1_fu_871_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_2_fu_875_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_2_fu_895_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_2_fu_895_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_3_fu_899_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_4_fu_919_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_4_fu_919_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_3_fu_939_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_3_fu_939_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_5_fu_943_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_6_fu_963_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln42_4_fu_983_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln42_4_fu_983_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_7_fu_987_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln42_5_fu_1007_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_5_fu_1007_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_8_fu_1011_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_9_fu_1031_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_10_fu_1051_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_10_fu_1051_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_11_fu_1071_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_11_fu_1071_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_6_fu_1091_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_6_fu_1091_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_12_fu_1095_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_13_fu_1115_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_13_fu_1115_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_7_fu_1135_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln42_7_fu_1135_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_14_fu_1139_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_8_fu_1159_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_8_fu_1159_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_15_fu_1163_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_9_fu_1183_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_9_fu_1183_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_16_fu_1187_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_10_fu_1207_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_10_fu_1207_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_17_fu_1211_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_11_fu_1231_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_11_fu_1231_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_18_fu_1235_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_12_fu_1255_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_12_fu_1255_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_19_fu_1259_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_13_fu_1279_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_13_fu_1279_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_20_fu_1283_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_14_fu_1303_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_14_fu_1303_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_21_fu_1307_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_15_fu_1327_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln42_15_fu_1327_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_22_fu_1331_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_23_fu_1351_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_23_fu_1351_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_24_fu_1371_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_24_fu_1371_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_16_fu_1391_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_16_fu_1391_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_25_fu_1395_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln42_26_fu_1415_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_26_fu_1415_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_17_fu_1435_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln42_17_fu_1435_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln42_27_fu_1439_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln42_18_fu_1459_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_18_fu_1459_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_28_fu_1463_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_29_fu_1483_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_29_fu_1483_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln42_30_fu_1503_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln42_30_fu_1503_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln42_19_fu_1607_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln42_19_fu_1607_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln42_31_fu_1611_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln41_29_fu_1617_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln41_fu_1600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_26_fu_1597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_25_fu_1594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_24_fu_1591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_23_fu_1588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_22_fu_1585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_21_fu_1582_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_20_fu_1579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_19_fu_1576_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_18_fu_1573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_17_fu_1570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_16_fu_1567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_15_fu_1564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_14_fu_1561_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_13_fu_1558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_12_fu_1555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_11_fu_1552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_10_fu_1549_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_9_fu_1546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_8_fu_1543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_7_fu_1540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_6_fu_1537_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_5_fu_1534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_4_fu_1531_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_3_fu_1528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_2_fu_1525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_1_fu_1522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_fu_1519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1627_p33 : STD_LOGIC_VECTOR (507 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_15ns_17s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    mul_15ns_17s_31_1_1_U18 : component myproject_mul_15ns_17s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 17,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_319_p0,
        din1 => grp_fu_319_p1,
        dout => grp_fu_319_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer5_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((layer4_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_10_reg_1747 <= layer4_out_dout(194 downto 180);
                a_11_reg_1752 <= layer4_out_dout(209 downto 195);
                a_12_reg_1757 <= layer4_out_dout(224 downto 210);
                a_13_reg_1762 <= layer4_out_dout(239 downto 225);
                a_14_reg_1767 <= layer4_out_dout(254 downto 240);
                a_15_reg_1772 <= layer4_out_dout(269 downto 255);
                a_16_reg_1777 <= layer4_out_dout(284 downto 270);
                a_17_reg_1782 <= layer4_out_dout(299 downto 285);
                a_18_reg_1787 <= layer4_out_dout(314 downto 300);
                a_19_reg_1792 <= layer4_out_dout(329 downto 315);
                a_1_reg_1697 <= layer4_out_dout(44 downto 30);
                a_20_reg_1797 <= layer4_out_dout(344 downto 330);
                a_21_reg_1802 <= layer4_out_dout(359 downto 345);
                a_22_reg_1807 <= layer4_out_dout(374 downto 360);
                a_23_reg_1812 <= layer4_out_dout(389 downto 375);
                a_24_reg_1817 <= layer4_out_dout(404 downto 390);
                a_25_reg_1822 <= layer4_out_dout(419 downto 405);
                a_26_reg_1827 <= layer4_out_dout(434 downto 420);
                a_27_reg_1832 <= layer4_out_dout(449 downto 435);
                a_28_reg_1742 <= layer4_out_dout(179 downto 165);
                a_2_reg_1702 <= layer4_out_dout(59 downto 45);
                a_3_reg_1707 <= layer4_out_dout(74 downto 60);
                a_4_reg_1712 <= layer4_out_dout(89 downto 75);
                a_5_reg_1717 <= layer4_out_dout(104 downto 90);
                a_6_reg_1722 <= layer4_out_dout(119 downto 105);
                a_7_reg_1727 <= layer4_out_dout(134 downto 120);
                a_8_reg_1732 <= layer4_out_dout(149 downto 135);
                a_9_reg_1737 <= layer4_out_dout(164 downto 150);
                trunc_ln3_reg_1847 <= layer4_out_dout(464 downto 450);
                trunc_ln41_1_reg_1842 <= add_ln42_1_fu_831_p2(26 downto 15);
                trunc_ln73_1_reg_1852 <= layer4_out_dout(479 downto 465);
                trunc_ln_reg_1837 <= add_ln42_fu_806_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_s_reg_1997 <= add_ln42_30_fu_1503_p2(29 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln41_10_reg_1902 <= add_ln42_11_fu_1071_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln41_11_reg_1907 <= add_ln42_12_fu_1095_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln41_12_reg_1912 <= add_ln42_13_fu_1115_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln41_13_reg_1917 <= add_ln42_14_fu_1139_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln41_14_reg_1922 <= add_ln42_15_fu_1163_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                trunc_ln41_15_reg_1927 <= add_ln42_16_fu_1187_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                trunc_ln41_16_reg_1932 <= add_ln42_17_fu_1211_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                trunc_ln41_17_reg_1937 <= add_ln42_18_fu_1235_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                trunc_ln41_18_reg_1942 <= add_ln42_19_fu_1259_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln41_19_reg_1947 <= add_ln42_20_fu_1283_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                trunc_ln41_20_reg_1952 <= add_ln42_21_fu_1307_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                trunc_ln41_21_reg_1957 <= add_ln42_22_fu_1331_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                trunc_ln41_22_reg_1962 <= add_ln42_23_fu_1351_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                trunc_ln41_23_reg_1967 <= add_ln42_24_fu_1371_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                trunc_ln41_24_reg_1972 <= add_ln42_25_fu_1395_p2(28 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                trunc_ln41_25_reg_1977 <= add_ln42_26_fu_1415_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                trunc_ln41_26_reg_1982 <= add_ln42_27_fu_1439_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                trunc_ln41_27_reg_1987 <= add_ln42_28_fu_1463_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                trunc_ln41_28_reg_1992 <= add_ln42_29_fu_1483_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln41_2_reg_1857 <= add_ln42_2_fu_875_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln41_3_reg_1862 <= add_ln42_3_fu_899_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln41_4_reg_1867 <= add_ln42_4_fu_919_p2(25 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln41_5_reg_1872 <= add_ln42_5_fu_943_p2(26 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln41_6_reg_1877 <= add_ln42_6_fu_963_p2(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln41_7_reg_1882 <= add_ln42_7_fu_987_p2(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln41_8_reg_1887 <= add_ln42_8_fu_1011_p2(27 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln41_9_reg_1892 <= add_ln42_9_fu_1031_p2(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln41_s_reg_1897 <= add_ln42_10_fu_1051_p2(26 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer4_out_empty_n, layer5_out_full_n, ap_CS_fsm_state31)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer4_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((layer5_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_482_p4 <= layer4_out_dout(29 downto 15);
    add_ln42_10_fu_1051_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    add_ln42_10_fu_1051_p2 <= std_logic_vector(unsigned(add_ln42_10_fu_1051_p0) + unsigned(ap_const_lv27_4510000));
    add_ln42_11_fu_1071_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_11_fu_1071_p2 <= std_logic_vector(unsigned(add_ln42_11_fu_1071_p0) + unsigned(ap_const_lv26_2018000));
    add_ln42_12_fu_1095_p2 <= std_logic_vector(unsigned(zext_ln42_6_fu_1091_p1) + unsigned(ap_const_lv27_7578000));
    add_ln42_13_fu_1115_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_13_fu_1115_p2 <= std_logic_vector(unsigned(add_ln42_13_fu_1115_p0) + unsigned(ap_const_lv26_20B0000));
    add_ln42_14_fu_1139_p2 <= std_logic_vector(unsigned(zext_ln42_7_fu_1135_p1) + unsigned(ap_const_lv26_3E48000));
    add_ln42_15_fu_1163_p2 <= std_logic_vector(unsigned(zext_ln42_8_fu_1159_p1) + unsigned(ap_const_lv28_BCA0000));
    add_ln42_16_fu_1187_p2 <= std_logic_vector(unsigned(zext_ln42_9_fu_1183_p1) + unsigned(ap_const_lv28_F348000));
    add_ln42_17_fu_1211_p2 <= std_logic_vector(unsigned(zext_ln42_10_fu_1207_p1) + unsigned(ap_const_lv27_4A90000));
    add_ln42_18_fu_1235_p2 <= std_logic_vector(unsigned(zext_ln42_11_fu_1231_p1) + unsigned(ap_const_lv28_F838000));
    add_ln42_19_fu_1259_p2 <= std_logic_vector(unsigned(zext_ln42_12_fu_1255_p1) + unsigned(ap_const_lv27_53F8000));
    add_ln42_1_fu_831_p2 <= std_logic_vector(unsigned(zext_ln42_fu_827_p1) + unsigned(ap_const_lv27_74D8000));
    add_ln42_20_fu_1283_p2 <= std_logic_vector(unsigned(zext_ln42_13_fu_1279_p1) + unsigned(ap_const_lv28_FA38000));
    add_ln42_21_fu_1307_p2 <= std_logic_vector(unsigned(zext_ln42_14_fu_1303_p1) + unsigned(ap_const_lv28_FA88000));
    add_ln42_22_fu_1331_p2 <= std_logic_vector(unsigned(zext_ln42_15_fu_1327_p1) + unsigned(ap_const_lv26_2428000));
    add_ln42_23_fu_1351_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_23_fu_1351_p2 <= std_logic_vector(unsigned(add_ln42_23_fu_1351_p0) + unsigned(ap_const_lv26_2060000));
    add_ln42_24_fu_1371_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    add_ln42_24_fu_1371_p2 <= std_logic_vector(unsigned(add_ln42_24_fu_1371_p0) + unsigned(ap_const_lv27_7080000));
    add_ln42_25_fu_1395_p2 <= std_logic_vector(unsigned(zext_ln42_16_fu_1391_p1) + unsigned(ap_const_lv29_15840000));
    add_ln42_26_fu_1415_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_26_fu_1415_p2 <= std_logic_vector(unsigned(add_ln42_26_fu_1415_p0) + unsigned(ap_const_lv26_2B88000));
    add_ln42_27_fu_1439_p2 <= std_logic_vector(unsigned(zext_ln42_17_fu_1435_p1) + unsigned(ap_const_lv28_B880000));
    add_ln42_28_fu_1463_p2 <= std_logic_vector(unsigned(zext_ln42_18_fu_1459_p1) + unsigned(ap_const_lv27_5C08000));
    add_ln42_29_fu_1483_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_29_fu_1483_p2 <= std_logic_vector(unsigned(add_ln42_29_fu_1483_p0) + unsigned(ap_const_lv26_2ED8000));
    add_ln42_2_fu_875_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_871_p1) + unsigned(ap_const_lv27_76C8000));
    add_ln42_30_fu_1503_p0 <= grp_fu_319_p2(30 - 1 downto 0);
    add_ln42_30_fu_1503_p2 <= std_logic_vector(unsigned(add_ln42_30_fu_1503_p0) + unsigned(ap_const_lv30_20000));
    add_ln42_31_fu_1611_p2 <= std_logic_vector(unsigned(zext_ln42_19_fu_1607_p1) + unsigned(ap_const_lv27_6B90000));
    add_ln42_32_fu_800_p2 <= std_logic_vector(unsigned(zext_ln73_fu_784_p1) + unsigned(zext_ln73_1_fu_796_p1));
    add_ln42_3_fu_899_p2 <= std_logic_vector(unsigned(zext_ln42_2_fu_895_p1) + unsigned(ap_const_lv27_78B8000));
    add_ln42_4_fu_919_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    add_ln42_4_fu_919_p2 <= std_logic_vector(unsigned(add_ln42_4_fu_919_p0) + unsigned(ap_const_lv26_2480000));
    add_ln42_5_fu_943_p2 <= std_logic_vector(unsigned(zext_ln42_3_fu_939_p1) + unsigned(ap_const_lv27_4B28000));
    add_ln42_6_fu_963_p2 <= std_logic_vector(unsigned(grp_fu_319_p2) + unsigned(ap_const_lv31_7FA68000));
    add_ln42_7_fu_987_p2 <= std_logic_vector(unsigned(zext_ln42_4_fu_983_p1) + unsigned(ap_const_lv31_7FE90000));
    add_ln42_8_fu_1011_p2 <= std_logic_vector(unsigned(zext_ln42_5_fu_1007_p1) + unsigned(ap_const_lv28_A4E0000));
    add_ln42_9_fu_1031_p2 <= std_logic_vector(unsigned(grp_fu_319_p2) + unsigned(ap_const_lv31_7FFE8000));
    add_ln42_fu_806_p2 <= std_logic_vector(unsigned(add_ln42_32_fu_800_p2) + unsigned(ap_const_lv27_6FF8000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer4_out_empty_n)
    begin
        if (((layer4_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(layer5_out_full_n)
    begin
        if ((layer5_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer4_out_empty_n)
    begin
                ap_block_state1 <= ((layer4_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer5_out_full_n, ap_CS_fsm_state31)
    begin
        if (((layer5_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_319_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state31, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, zext_ln73_2_fu_822_p1, zext_ln73_3_fu_867_p1, zext_ln73_4_fu_891_p1, zext_ln73_5_fu_915_p1, zext_ln73_7_fu_935_p1, zext_ln73_6_fu_959_p1, zext_ln73_8_fu_979_p1, zext_ln73_10_fu_1003_p1, zext_ln73_9_fu_1027_p1, zext_ln73_11_fu_1047_p1, zext_ln73_12_fu_1067_p1, zext_ln73_13_fu_1087_p1, zext_ln73_14_fu_1111_p1, zext_ln73_15_fu_1131_p1, zext_ln73_16_fu_1155_p1, zext_ln73_17_fu_1179_p1, zext_ln73_18_fu_1203_p1, zext_ln73_19_fu_1227_p1, zext_ln73_20_fu_1251_p1, zext_ln73_21_fu_1275_p1, zext_ln73_22_fu_1299_p1, zext_ln73_23_fu_1323_p1, zext_ln73_24_fu_1347_p1, zext_ln73_25_fu_1367_p1, zext_ln73_26_fu_1387_p1, zext_ln73_27_fu_1411_p1, zext_ln73_28_fu_1431_p1, zext_ln73_29_fu_1455_p1, zext_ln73_30_fu_1479_p1, zext_ln73_31_fu_1499_p1, zext_ln73_32_fu_1603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_319_p0 <= zext_ln73_32_fu_1603_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_319_p0 <= zext_ln73_31_fu_1499_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_319_p0 <= zext_ln73_30_fu_1479_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_319_p0 <= zext_ln73_29_fu_1455_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_319_p0 <= zext_ln73_28_fu_1431_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_319_p0 <= zext_ln73_27_fu_1411_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_319_p0 <= zext_ln73_26_fu_1387_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_319_p0 <= zext_ln73_25_fu_1367_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_319_p0 <= zext_ln73_24_fu_1347_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_319_p0 <= zext_ln73_23_fu_1323_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_319_p0 <= zext_ln73_22_fu_1299_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_319_p0 <= zext_ln73_21_fu_1275_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_319_p0 <= zext_ln73_20_fu_1251_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_319_p0 <= zext_ln73_19_fu_1227_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_319_p0 <= zext_ln73_18_fu_1203_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_319_p0 <= zext_ln73_17_fu_1179_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_319_p0 <= zext_ln73_16_fu_1155_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_319_p0 <= zext_ln73_15_fu_1131_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_319_p0 <= zext_ln73_14_fu_1111_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_319_p0 <= zext_ln73_13_fu_1087_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_319_p0 <= zext_ln73_12_fu_1067_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_319_p0 <= zext_ln73_11_fu_1047_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_319_p0 <= zext_ln73_9_fu_1027_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_319_p0 <= zext_ln73_10_fu_1003_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_319_p0 <= zext_ln73_8_fu_979_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_319_p0 <= zext_ln73_6_fu_959_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_319_p0 <= zext_ln73_7_fu_935_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_319_p0 <= zext_ln73_5_fu_915_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_319_p0 <= zext_ln73_4_fu_891_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_319_p0 <= zext_ln73_3_fu_867_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_319_p0 <= zext_ln73_2_fu_822_p1(15 - 1 downto 0);
        else 
            grp_fu_319_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_319_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state31, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_319_p1 <= ap_const_lv26_7CD(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_319_p1 <= ap_const_lv30_7EB5(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_319_p1 <= ap_const_lv26_5BE(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_319_p1 <= ap_const_lv26_5D4(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_319_p1 <= ap_const_lv27_A54(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_319_p1 <= ap_const_lv26_451(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_319_p1 <= ap_const_lv28_155A(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_319_p1 <= ap_const_lv27_855(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_319_p1 <= ap_const_lv26_468(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_319_p1 <= ap_const_lv25_3CC(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_319_p1 <= ap_const_lv27_DF7(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_319_p1 <= ap_const_lv27_B13(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_319_p1 <= ap_const_lv26_664(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_319_p1 <= ap_const_lv27_9F9(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_319_p1 <= ap_const_lv26_6F3(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_319_p1 <= ap_const_lv27_C02(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_319_p1 <= ap_const_lv27_8E3(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_319_p1 <= ap_const_lv25_379(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_319_p1 <= ap_const_lv26_756(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_319_p1 <= ap_const_lv26_6A6(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_319_p1 <= ap_const_lv26_610(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_319_p1 <= ap_const_lv27_8F7(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_319_p1 <= ap_const_lv31_7FFF85EC(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_319_p1 <= ap_const_lv27_BBD(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_319_p1 <= ap_const_lv30_41A8(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_319_p1 <= ap_const_lv31_7FFF81E2(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_319_p1 <= ap_const_lv26_6F5(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_319_p1 <= ap_const_lv26_5BC(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_319_p1 <= ap_const_lv26_727(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_319_p1 <= ap_const_lv26_76D(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_319_p1 <= ap_const_lv26_73F(17 - 1 downto 0);
        else 
            grp_fu_319_p1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(layer5_out_full_n, ap_CS_fsm_state31)
    begin
        if (((layer5_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer4_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer4_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer4_out_blk_n <= layer4_out_empty_n;
        else 
            layer4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer4_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer4_out_empty_n)
    begin
        if ((not(((layer4_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer4_out_read <= ap_const_logic_1;
        else 
            layer4_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer5_out_blk_n_assign_proc : process(layer5_out_full_n, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer5_out_blk_n <= layer5_out_full_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer5_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_1627_p33),512));


    layer5_out_write_assign_proc : process(layer5_out_full_n, ap_CS_fsm_state31)
    begin
        if (((layer5_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            layer5_out_write <= ap_const_logic_1;
        else 
            layer5_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln41_10_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_12_reg_1912),16));

        sext_ln41_11_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_13_reg_1917),16));

        sext_ln41_12_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_14_reg_1922),16));

        sext_ln41_13_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_15_reg_1927),16));

        sext_ln41_14_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_16_reg_1932),16));

        sext_ln41_15_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_17_reg_1937),16));

        sext_ln41_16_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_18_reg_1942),16));

        sext_ln41_17_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_19_reg_1947),16));

        sext_ln41_18_fu_1573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_20_reg_1952),16));

        sext_ln41_19_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_21_reg_1957),16));

        sext_ln41_1_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_1_reg_1842),16));

        sext_ln41_20_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_22_reg_1962),16));

        sext_ln41_21_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_23_reg_1967),16));

        sext_ln41_22_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_24_reg_1972),16));

        sext_ln41_23_fu_1588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_25_reg_1977),16));

        sext_ln41_24_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_26_reg_1982),16));

        sext_ln41_25_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_27_reg_1987),16));

        sext_ln41_26_fu_1597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_28_reg_1992),16));

        sext_ln41_2_fu_1525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_2_reg_1857),16));

        sext_ln41_3_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_3_reg_1862),16));

        sext_ln41_4_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_4_reg_1867),16));

        sext_ln41_5_fu_1534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_5_reg_1872),16));

        sext_ln41_6_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_8_reg_1887),16));

        sext_ln41_7_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_s_reg_1897),16));

        sext_ln41_8_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_10_reg_1902),16));

        sext_ln41_9_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_11_reg_1907),16));

        sext_ln41_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1837),16));

    shl_ln73_1_fu_788_p3 <= (trunc_ln73_fu_772_p1 & ap_const_lv8_0);
    shl_ln_fu_776_p3 <= (trunc_ln73_fu_772_p1 & ap_const_lv11_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_1627_p33 <= (((((((((((((((((((((((((((((((trunc_ln41_29_fu_1617_p4 & zext_ln41_fu_1600_p1) & sext_ln41_26_fu_1597_p1) & sext_ln41_25_fu_1594_p1) & sext_ln41_24_fu_1591_p1) & sext_ln41_23_fu_1588_p1) & sext_ln41_22_fu_1585_p1) & sext_ln41_21_fu_1582_p1) & sext_ln41_20_fu_1579_p1) & sext_ln41_19_fu_1576_p1) & sext_ln41_18_fu_1573_p1) & sext_ln41_17_fu_1570_p1) & sext_ln41_16_fu_1567_p1) & sext_ln41_15_fu_1564_p1) & sext_ln41_14_fu_1561_p1) & sext_ln41_13_fu_1558_p1) & sext_ln41_12_fu_1555_p1) & sext_ln41_11_fu_1552_p1) & sext_ln41_10_fu_1549_p1) & sext_ln41_9_fu_1546_p1) & sext_ln41_8_fu_1543_p1) & sext_ln41_7_fu_1540_p1) & trunc_ln41_9_reg_1892) & sext_ln41_6_fu_1537_p1) & trunc_ln41_7_reg_1882) & trunc_ln41_6_reg_1877) & sext_ln41_5_fu_1534_p1) & sext_ln41_4_fu_1531_p1) & sext_ln41_3_fu_1528_p1) & sext_ln41_2_fu_1525_p1) & sext_ln41_1_fu_1522_p1) & sext_ln41_fu_1519_p1);
    trunc_ln41_29_fu_1617_p4 <= add_ln42_31_fu_1611_p2(26 downto 15);
    trunc_ln73_fu_772_p1 <= layer4_out_dout(15 - 1 downto 0);
    zext_ln41_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1997),16));
    zext_ln42_10_fu_1207_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_10_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_10_fu_1207_p0),27));
    zext_ln42_11_fu_1231_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_11_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_11_fu_1231_p0),28));
    zext_ln42_12_fu_1255_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_12_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_12_fu_1255_p0),27));
    zext_ln42_13_fu_1279_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_13_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_13_fu_1279_p0),28));
    zext_ln42_14_fu_1303_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_14_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_14_fu_1303_p0),28));
    zext_ln42_15_fu_1327_p0 <= grp_fu_319_p2(25 - 1 downto 0);
    zext_ln42_15_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_15_fu_1327_p0),26));
    zext_ln42_16_fu_1391_p0 <= grp_fu_319_p2(28 - 1 downto 0);
    zext_ln42_16_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_16_fu_1391_p0),29));
    zext_ln42_17_fu_1435_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_17_fu_1435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_17_fu_1435_p0),28));
    zext_ln42_18_fu_1459_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_18_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_18_fu_1459_p0),27));
    zext_ln42_19_fu_1607_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_19_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_19_fu_1607_p0),27));
    zext_ln42_1_fu_871_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_1_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_1_fu_871_p0),27));
    zext_ln42_2_fu_895_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_2_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_2_fu_895_p0),27));
    zext_ln42_3_fu_939_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_3_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_3_fu_939_p0),27));
    zext_ln42_4_fu_983_p0 <= grp_fu_319_p2(30 - 1 downto 0);
    zext_ln42_4_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_4_fu_983_p0),31));
    zext_ln42_5_fu_1007_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_5_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_5_fu_1007_p0),28));
    zext_ln42_6_fu_1091_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_6_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_6_fu_1091_p0),27));
    zext_ln42_7_fu_1135_p0 <= grp_fu_319_p2(25 - 1 downto 0);
    zext_ln42_7_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_7_fu_1135_p0),26));
    zext_ln42_8_fu_1159_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_8_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_8_fu_1159_p0),28));
    zext_ln42_9_fu_1183_p0 <= grp_fu_319_p2(27 - 1 downto 0);
    zext_ln42_9_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_9_fu_1183_p0),28));
    zext_ln42_fu_827_p0 <= grp_fu_319_p2(26 - 1 downto 0);
    zext_ln42_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_fu_827_p0),27));
    zext_ln73_10_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_7_reg_1727),27));
    zext_ln73_11_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_9_reg_1737),27));
    zext_ln73_12_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_28_reg_1742),26));
    zext_ln73_13_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_10_reg_1747),26));
    zext_ln73_14_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_11_reg_1752),26));
    zext_ln73_15_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_12_reg_1757),25));
    zext_ln73_16_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_13_reg_1762),27));
    zext_ln73_17_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_14_reg_1767),27));
    zext_ln73_18_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_15_reg_1772),26));
    zext_ln73_19_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_16_reg_1777),27));
    zext_ln73_1_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_1_fu_788_p3),27));
    zext_ln73_20_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_17_reg_1782),26));
    zext_ln73_21_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_18_reg_1787),27));
    zext_ln73_22_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_19_reg_1792),27));
    zext_ln73_23_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_20_reg_1797),25));
    zext_ln73_24_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_21_reg_1802),26));
    zext_ln73_25_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_22_reg_1807),27));
    zext_ln73_26_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_23_reg_1812),28));
    zext_ln73_27_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_24_reg_1817),26));
    zext_ln73_28_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_25_reg_1822),27));
    zext_ln73_29_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_26_reg_1827),26));
    zext_ln73_2_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_482_p4),26));
    zext_ln73_30_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_27_reg_1832),26));
    zext_ln73_31_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_1847),30));
    zext_ln73_32_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln73_1_reg_1852),26));
    zext_ln73_3_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_reg_1697),26));
    zext_ln73_4_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_2_reg_1702),26));
    zext_ln73_5_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_3_reg_1707),26));
    zext_ln73_6_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_5_reg_1717),31));
    zext_ln73_7_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_4_reg_1712),26));
    zext_ln73_8_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_6_reg_1722),30));
    zext_ln73_9_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_8_reg_1732),31));
    zext_ln73_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_776_p3),27));
end behav;
