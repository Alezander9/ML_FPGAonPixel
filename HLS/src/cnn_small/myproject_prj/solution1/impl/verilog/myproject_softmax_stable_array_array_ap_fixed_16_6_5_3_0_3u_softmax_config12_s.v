// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer11_out_dout,
        layer11_out_num_data_valid,
        layer11_out_fifo_cap,
        layer11_out_empty_n,
        layer11_out_read,
        layer12_out_TDATA,
        layer12_out_TVALID,
        layer12_out_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] layer11_out_dout;
input  [1:0] layer11_out_num_data_valid;
input  [1:0] layer11_out_fifo_cap;
input   layer11_out_empty_n;
output   layer11_out_read;
output  [47:0] layer12_out_TDATA;
output   layer12_out_TVALID;
input   layer12_out_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer11_out_read;
reg layer12_out_TVALID;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg    layer11_out_blk_n;
reg    layer12_out_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire  signed [15:0] trunc_ln199_fu_176_p1;
reg  signed [15:0] trunc_ln199_reg_567;
reg  signed [15:0] trunc_ln199_1_reg_574;
reg  signed [15:0] trunc_ln199_2_reg_581;
wire    ap_CS_fsm_state2;
reg   [16:0] exp_table_load_reg_603;
wire    ap_CS_fsm_state3;
reg   [16:0] exp_table_load_1_reg_608;
reg   [16:0] exp_table_load_2_reg_613;
wire  signed [25:0] sext_ln244_fu_541_p1;
reg  signed [25:0] sext_ln244_reg_623;
wire    ap_CS_fsm_state4;
wire   [15:0] grp_fu_166_p4;
reg   [15:0] trunc_ln2_reg_628;
reg   [15:0] trunc_ln244_1_reg_633;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln225_fu_393_p1;
wire   [63:0] zext_ln225_1_fu_424_p1;
wire   [63:0] zext_ln225_2_fu_455_p1;
wire   [63:0] zext_ln235_fu_536_p1;
reg    ap_block_state1;
reg  signed [17:0] grp_fu_149_p0;
reg   [16:0] grp_fu_149_p1;
wire   [25:0] zext_ln244_fu_546_p1;
wire   [25:0] zext_ln244_1_fu_550_p1;
wire   [25:0] zext_ln244_2_fu_554_p1;
wire   [25:0] grp_fu_149_p2;
wire   [0:0] icmp_ln65_fu_200_p2;
wire   [0:0] xor_ln65_fu_204_p2;
wire   [15:0] select_ln65_fu_210_p3;
wire   [0:0] icmp_ln65_1_fu_216_p2;
wire   [0:0] xor_ln65_1_fu_221_p2;
wire   [15:0] x_max_fu_227_p3;
wire  signed [16:0] sext_ln215_fu_234_p1;
wire  signed [16:0] sext_ln215_1_fu_237_p1;
wire   [16:0] sub_ln215_fu_241_p2;
wire   [0:0] tmp_4_fu_247_p3;
wire   [0:0] tmp_5_fu_255_p3;
wire   [0:0] xor_ln215_fu_263_p2;
wire  signed [16:0] sext_ln215_2_fu_281_p1;
wire   [16:0] sub_ln215_1_fu_284_p2;
wire   [0:0] tmp_6_fu_290_p3;
wire   [0:0] tmp_7_fu_298_p3;
wire   [0:0] xor_ln215_2_fu_306_p2;
wire  signed [16:0] sext_ln215_3_fu_324_p1;
wire   [16:0] sub_ln215_2_fu_327_p2;
wire   [0:0] tmp_8_fu_333_p3;
wire   [0:0] tmp_9_fu_341_p3;
wire   [0:0] xor_ln215_4_fu_349_p2;
wire   [0:0] and_ln215_fu_269_p2;
wire   [0:0] xor_ln215_1_fu_275_p2;
wire   [9:0] select_ln215_fu_367_p3;
wire   [9:0] tmp_fu_375_p4;
wire   [9:0] select_ln215_1_fu_385_p3;
wire   [0:0] and_ln215_1_fu_312_p2;
wire   [0:0] xor_ln215_3_fu_318_p2;
wire   [9:0] select_ln215_2_fu_398_p3;
wire   [9:0] tmp_1_fu_406_p4;
wire   [9:0] select_ln215_3_fu_416_p3;
wire   [0:0] and_ln215_2_fu_355_p2;
wire   [0:0] xor_ln215_5_fu_361_p2;
wire   [9:0] select_ln215_4_fu_429_p3;
wire   [9:0] tmp_2_fu_437_p4;
wire   [9:0] select_ln215_5_fu_447_p3;
wire   [17:0] exp_table_load_1_cast2_fu_464_p1;
wire   [17:0] exp_table_load_cast1_fu_460_p1;
wire   [17:0] add_ln50_fu_472_p2;
wire   [0:0] tmp_10_fu_484_p3;
wire   [16:0] add_ln50_2_fu_478_p2;
wire   [16:0] select_ln50_fu_492_p3;
wire   [17:0] zext_ln50_fu_500_p1;
wire   [17:0] exp_table_load_2_cast3_fu_468_p1;
wire   [17:0] add_ln50_1_fu_504_p2;
wire   [0:0] tmp_11_fu_510_p3;
wire   [9:0] tmp_3_fu_518_p4;
wire   [9:0] select_ln50_1_fu_528_p3;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_exp_tablg8j #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2)
);

myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s_invert_thbi #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U54(
    .din0(grp_fu_149_p0),
    .din1(grp_fu_149_p1),
    .dout(grp_fu_149_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_load_1_reg_608 <= exp_table_q1;
        exp_table_load_2_reg_613 <= exp_table_q0;
        exp_table_load_reg_603 <= exp_table_q2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_ln244_reg_623 <= sext_ln244_fu_541_p1;
        trunc_ln2_reg_628 <= {{grp_fu_149_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln199_1_reg_574 <= {{layer11_out_dout[31:16]}};
        trunc_ln199_2_reg_581 <= {{layer11_out_dout[47:32]}};
        trunc_ln199_reg_567 <= trunc_ln199_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln244_1_reg_633 <= {{grp_fu_149_p2[25:10]}};
    end
end

always @ (*) begin
    if (((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((layer12_out_TREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_149_p0 = sext_ln244_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_149_p0 = sext_ln244_fu_541_p1;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_149_p1 = zext_ln244_2_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_149_p1 = zext_ln244_1_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_149_p1 = zext_ln244_fu_546_p1;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        layer11_out_blk_n = layer11_out_empty_n;
    end else begin
        layer11_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer11_out_read = 1'b1;
    end else begin
        layer11_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        layer12_out_TDATA_blk_n = layer12_out_TREADY;
    end else begin
        layer12_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer12_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        layer12_out_TVALID = 1'b1;
    end else begin
        layer12_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((layer12_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_504_p2 = (zext_ln50_fu_500_p1 + exp_table_load_2_cast3_fu_468_p1);

assign add_ln50_2_fu_478_p2 = (exp_table_q1 + exp_table_q2);

assign add_ln50_fu_472_p2 = (exp_table_load_1_cast2_fu_464_p1 + exp_table_load_cast1_fu_460_p1);

assign and_ln215_1_fu_312_p2 = (xor_ln215_2_fu_306_p2 & tmp_7_fu_298_p3);

assign and_ln215_2_fu_355_p2 = (xor_ln215_4_fu_349_p2 & tmp_9_fu_341_p3);

assign and_ln215_fu_269_p2 = (xor_ln215_fu_263_p2 & tmp_5_fu_255_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign exp_table_address0 = zext_ln225_2_fu_455_p1;

assign exp_table_address1 = zext_ln225_1_fu_424_p1;

assign exp_table_address2 = zext_ln225_fu_393_p1;

assign exp_table_load_1_cast2_fu_464_p1 = exp_table_q1;

assign exp_table_load_2_cast3_fu_468_p1 = exp_table_q0;

assign exp_table_load_cast1_fu_460_p1 = exp_table_q2;

assign grp_fu_166_p4 = {{grp_fu_149_p2[25:10]}};

assign icmp_ln65_1_fu_216_p2 = (($signed(select_ln65_fu_210_p3) < $signed(trunc_ln199_2_reg_581)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_200_p2 = (($signed(trunc_ln199_reg_567) < $signed(trunc_ln199_1_reg_574)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln235_fu_536_p1;

assign layer12_out_TDATA = {{{grp_fu_166_p4}, {trunc_ln244_1_reg_633}}, {trunc_ln2_reg_628}};

assign select_ln215_1_fu_385_p3 = ((xor_ln215_1_fu_275_p2[0:0] == 1'b1) ? select_ln215_fu_367_p3 : tmp_fu_375_p4);

assign select_ln215_2_fu_398_p3 = ((and_ln215_1_fu_312_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln215_3_fu_416_p3 = ((xor_ln215_3_fu_318_p2[0:0] == 1'b1) ? select_ln215_2_fu_398_p3 : tmp_1_fu_406_p4);

assign select_ln215_4_fu_429_p3 = ((and_ln215_2_fu_355_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln215_5_fu_447_p3 = ((xor_ln215_5_fu_361_p2[0:0] == 1'b1) ? select_ln215_4_fu_429_p3 : tmp_2_fu_437_p4);

assign select_ln215_fu_367_p3 = ((and_ln215_fu_269_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln50_1_fu_528_p3 = ((tmp_11_fu_510_p3[0:0] == 1'b1) ? 10'd511 : tmp_3_fu_518_p4);

assign select_ln50_fu_492_p3 = ((tmp_10_fu_484_p3[0:0] == 1'b1) ? 17'd131071 : add_ln50_2_fu_478_p2);

assign select_ln65_fu_210_p3 = ((xor_ln65_fu_204_p2[0:0] == 1'b1) ? trunc_ln199_reg_567 : trunc_ln199_1_reg_574);

assign sext_ln215_1_fu_237_p1 = $signed(x_max_fu_227_p3);

assign sext_ln215_2_fu_281_p1 = trunc_ln199_1_reg_574;

assign sext_ln215_3_fu_324_p1 = trunc_ln199_2_reg_581;

assign sext_ln215_fu_234_p1 = trunc_ln199_reg_567;

assign sext_ln244_fu_541_p1 = $signed(invert_table_q0);

assign sub_ln215_1_fu_284_p2 = ($signed(sext_ln215_2_fu_281_p1) - $signed(sext_ln215_1_fu_237_p1));

assign sub_ln215_2_fu_327_p2 = ($signed(sext_ln215_3_fu_324_p1) - $signed(sext_ln215_1_fu_237_p1));

assign sub_ln215_fu_241_p2 = ($signed(sext_ln215_fu_234_p1) - $signed(sext_ln215_1_fu_237_p1));

assign tmp_10_fu_484_p3 = add_ln50_fu_472_p2[32'd17];

assign tmp_11_fu_510_p3 = add_ln50_1_fu_504_p2[32'd17];

assign tmp_1_fu_406_p4 = {{sub_ln215_1_fu_284_p2[15:6]}};

assign tmp_2_fu_437_p4 = {{sub_ln215_2_fu_327_p2[15:6]}};

assign tmp_3_fu_518_p4 = {{add_ln50_1_fu_504_p2[17:8]}};

assign tmp_4_fu_247_p3 = sub_ln215_fu_241_p2[32'd16];

assign tmp_5_fu_255_p3 = sub_ln215_fu_241_p2[32'd15];

assign tmp_6_fu_290_p3 = sub_ln215_1_fu_284_p2[32'd16];

assign tmp_7_fu_298_p3 = sub_ln215_1_fu_284_p2[32'd15];

assign tmp_8_fu_333_p3 = sub_ln215_2_fu_327_p2[32'd16];

assign tmp_9_fu_341_p3 = sub_ln215_2_fu_327_p2[32'd15];

assign tmp_fu_375_p4 = {{sub_ln215_fu_241_p2[15:6]}};

assign trunc_ln199_fu_176_p1 = layer11_out_dout[15:0];

assign x_max_fu_227_p3 = ((xor_ln65_1_fu_221_p2[0:0] == 1'b1) ? select_ln65_fu_210_p3 : trunc_ln199_2_reg_581);

assign xor_ln215_1_fu_275_p2 = (tmp_5_fu_255_p3 ^ tmp_4_fu_247_p3);

assign xor_ln215_2_fu_306_p2 = (tmp_6_fu_290_p3 ^ 1'd1);

assign xor_ln215_3_fu_318_p2 = (tmp_7_fu_298_p3 ^ tmp_6_fu_290_p3);

assign xor_ln215_4_fu_349_p2 = (tmp_8_fu_333_p3 ^ 1'd1);

assign xor_ln215_5_fu_361_p2 = (tmp_9_fu_341_p3 ^ tmp_8_fu_333_p3);

assign xor_ln215_fu_263_p2 = (tmp_4_fu_247_p3 ^ 1'd1);

assign xor_ln65_1_fu_221_p2 = (icmp_ln65_1_fu_216_p2 ^ 1'd1);

assign xor_ln65_fu_204_p2 = (icmp_ln65_fu_200_p2 ^ 1'd1);

assign zext_ln225_1_fu_424_p1 = select_ln215_3_fu_416_p3;

assign zext_ln225_2_fu_455_p1 = select_ln215_5_fu_447_p3;

assign zext_ln225_fu_393_p1 = select_ln215_1_fu_385_p3;

assign zext_ln235_fu_536_p1 = select_ln50_1_fu_528_p3;

assign zext_ln244_1_fu_550_p1 = exp_table_load_1_reg_608;

assign zext_ln244_2_fu_554_p1 = exp_table_load_2_reg_613;

assign zext_ln244_fu_546_p1 = exp_table_load_reg_603;

assign zext_ln50_fu_500_p1 = select_ln50_fu_492_p3;

endmodule //myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config12_s
