// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_normalize_array_ap_fixed_3u_array_ap_fixed_15_5_5_3_0_3u_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer10_out_dout,
        layer10_out_num_data_valid,
        layer10_out_fifo_cap,
        layer10_out_empty_n,
        layer10_out_read,
        layer15_out_din,
        layer15_out_num_data_valid,
        layer15_out_fifo_cap,
        layer15_out_full_n,
        layer15_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [47:0] layer10_out_dout;
input  [1:0] layer10_out_num_data_valid;
input  [1:0] layer10_out_fifo_cap;
input   layer10_out_empty_n;
output   layer10_out_read;
output  [44:0] layer15_out_din;
input  [1:0] layer15_out_num_data_valid;
input  [1:0] layer15_out_fifo_cap;
input   layer15_out_full_n;
output   layer15_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer10_out_read;
reg layer15_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer10_out_blk_n;
reg    layer15_out_blk_n;
reg    ap_block_state1;
wire   [14:0] trunc_ln85_fu_63_p1;
wire   [22:0] y_fu_67_p3;
wire   [22:0] add_ln42_fu_75_p2;
wire   [22:0] trunc_ln5_fu_91_p4;
wire   [22:0] add_ln42_47_fu_101_p2;
wire   [22:0] trunc_ln85_1_fu_117_p4;
wire   [22:0] add_ln42_48_fu_127_p2;
wire   [14:0] trunc_ln41_42_fu_133_p4;
wire   [14:0] trunc_ln41_s_fu_107_p4;
wire   [14:0] trunc_ln_fu_81_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer10_out_blk_n = layer10_out_empty_n;
    end else begin
        layer10_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer10_out_read = 1'b1;
    end else begin
        layer10_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_blk_n = layer15_out_full_n;
    end else begin
        layer15_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_write = 1'b1;
    end else begin
        layer15_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_47_fu_101_p2 = ($signed(trunc_ln5_fu_91_p4) + $signed(23'd8160256));

assign add_ln42_48_fu_127_p2 = ($signed(trunc_ln85_1_fu_117_p4) + $signed(23'd8179200));

assign add_ln42_fu_75_p2 = (y_fu_67_p3 + 23'd88064);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer10_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign layer15_out_din = {{{trunc_ln41_42_fu_133_p4}, {trunc_ln41_s_fu_107_p4}}, {trunc_ln_fu_81_p4}};

assign start_out = real_start;

assign trunc_ln41_42_fu_133_p4 = {{add_ln42_48_fu_127_p2[22:8]}};

assign trunc_ln41_s_fu_107_p4 = {{add_ln42_47_fu_101_p2[22:8]}};

assign trunc_ln5_fu_91_p4 = {{layer10_out_dout[30:8]}};

assign trunc_ln85_1_fu_117_p4 = {{layer10_out_dout[46:24]}};

assign trunc_ln85_fu_63_p1 = layer10_out_dout[14:0];

assign trunc_ln_fu_81_p4 = {{add_ln42_fu_75_p2[22:8]}};

assign y_fu_67_p3 = {{trunc_ln85_fu_63_p1}, {8'd0}};

endmodule //myproject_normalize_array_ap_fixed_3u_array_ap_fixed_15_5_5_3_0_3u_config15_s
