// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_normalize_array_ap_ufixed_16u_array_ap_fixed_16_6_5_3_0_16u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer8_out_dout,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_empty_n,
        layer8_out_read,
        layer9_out_din,
        layer9_out_num_data_valid,
        layer9_out_fifo_cap,
        layer9_out_full_n,
        layer9_out_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [239:0] layer8_out_dout;
input  [1:0] layer8_out_num_data_valid;
input  [1:0] layer8_out_fifo_cap;
input   layer8_out_empty_n;
output   layer8_out_read;
output  [255:0] layer9_out_din;
input  [1:0] layer9_out_num_data_valid;
input  [1:0] layer9_out_fifo_cap;
input   layer9_out_full_n;
output   layer9_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer8_out_read;
reg layer9_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer8_out_blk_n;
reg    layer9_out_blk_n;
wire    ap_CS_fsm_state16;
reg   [14:0] a_40_reg_854;
reg    ap_block_state1;
reg   [14:0] a_28_reg_859;
reg   [14:0] a_29_reg_864;
reg   [14:0] a_30_reg_869;
reg   [14:0] a_31_reg_874;
reg   [14:0] a_32_reg_879;
reg   [14:0] a_33_reg_884;
reg   [14:0] a_34_reg_889;
reg   [14:0] a_35_reg_894;
reg   [14:0] a_36_reg_899;
reg   [14:0] a_37_reg_904;
reg   [14:0] a_38_reg_909;
reg   [14:0] a_39_reg_914;
reg   [11:0] trunc_ln_reg_919;
reg   [14:0] trunc_ln4_reg_924;
reg   [14:0] trunc_ln73_2_reg_929;
reg   [11:0] trunc_ln41_s_reg_934;
wire    ap_CS_fsm_state2;
reg   [12:0] trunc_ln41_30_reg_939;
wire    ap_CS_fsm_state3;
reg   [10:0] tmp_reg_944;
wire    ap_CS_fsm_state4;
reg   [11:0] tmp_103_reg_949;
wire    ap_CS_fsm_state5;
reg   [12:0] trunc_ln41_31_reg_954;
wire    ap_CS_fsm_state6;
reg   [12:0] trunc_ln41_32_reg_959;
wire    ap_CS_fsm_state7;
reg   [13:0] trunc_ln41_33_reg_964;
wire    ap_CS_fsm_state8;
reg   [11:0] trunc_ln41_34_reg_969;
wire    ap_CS_fsm_state9;
reg   [11:0] trunc_ln41_35_reg_974;
wire    ap_CS_fsm_state10;
reg   [13:0] trunc_ln41_36_reg_979;
wire    ap_CS_fsm_state11;
reg   [12:0] trunc_ln41_37_reg_984;
wire    ap_CS_fsm_state12;
reg   [12:0] trunc_ln41_38_reg_989;
wire    ap_CS_fsm_state13;
reg   [12:0] trunc_ln41_39_reg_994;
wire    ap_CS_fsm_state14;
reg   [12:0] trunc_ln41_40_reg_999;
wire    ap_CS_fsm_state15;
reg   [14:0] grp_fu_181_p0;
wire   [26:0] zext_ln73_fu_403_p1;
wire   [26:0] zext_ln73_33_fu_444_p1;
wire   [26:0] zext_ln73_34_fu_464_p1;
wire   [25:0] zext_ln73_35_fu_488_p1;
wire   [26:0] zext_ln73_36_fu_508_p1;
wire   [27:0] zext_ln73_37_fu_528_p1;
wire   [26:0] zext_ln73_38_fu_548_p1;
wire   [27:0] zext_ln73_39_fu_572_p1;
wire   [26:0] zext_ln73_40_fu_596_p1;
wire   [25:0] zext_ln73_41_fu_616_p1;
wire   [27:0] zext_ln73_42_fu_640_p1;
wire   [27:0] zext_ln73_43_fu_664_p1;
wire   [27:0] zext_ln73_44_fu_684_p1;
wire   [27:0] zext_ln73_45_fu_704_p1;
wire   [26:0] zext_ln73_46_fu_724_p1;
wire   [27:0] zext_ln73_47_fu_793_p1;
reg   [13:0] grp_fu_181_p1;
wire   [14:0] a_fu_269_p1;
wire   [26:0] add_ln42_fu_408_p0;
wire   [27:0] grp_fu_181_p2;
wire   [26:0] add_ln42_fu_408_p2;
wire   [26:0] add_ln42_32_fu_448_p0;
wire   [26:0] add_ln42_32_fu_448_p2;
wire   [26:0] zext_ln42_fu_468_p0;
wire   [27:0] zext_ln42_fu_468_p1;
wire   [27:0] add_ln42_33_fu_472_p2;
wire   [25:0] add_ln42_34_fu_492_p0;
wire   [25:0] add_ln42_34_fu_492_p2;
wire   [26:0] add_ln42_35_fu_512_p0;
wire   [26:0] add_ln42_35_fu_512_p2;
wire   [27:0] add_ln42_36_fu_532_p2;
wire   [26:0] zext_ln42_20_fu_552_p0;
wire   [27:0] zext_ln42_20_fu_552_p1;
wire   [27:0] add_ln42_37_fu_556_p2;
wire   [28:0] zext_ln42_21_fu_576_p1;
wire   [28:0] add_ln42_38_fu_580_p2;
wire   [26:0] add_ln42_39_fu_600_p0;
wire   [26:0] add_ln42_39_fu_600_p2;
wire   [25:0] zext_ln42_22_fu_620_p0;
wire   [26:0] zext_ln42_22_fu_620_p1;
wire   [26:0] add_ln42_40_fu_624_p2;
wire   [28:0] zext_ln42_23_fu_644_p1;
wire   [28:0] add_ln42_41_fu_648_p2;
wire   [27:0] add_ln42_42_fu_668_p2;
wire   [27:0] add_ln42_43_fu_688_p2;
wire   [27:0] add_ln42_44_fu_708_p2;
wire   [26:0] zext_ln42_24_fu_728_p0;
wire   [27:0] zext_ln42_24_fu_728_p1;
wire   [27:0] add_ln42_45_fu_732_p2;
wire   [27:0] add_ln42_46_fu_797_p2;
wire   [12:0] trunc_ln41_41_fu_803_p4;
wire  signed [15:0] sext_ln41_38_fu_790_p1;
wire  signed [15:0] sext_ln41_37_fu_787_p1;
wire  signed [15:0] sext_ln41_36_fu_784_p1;
wire  signed [15:0] sext_ln41_35_fu_781_p1;
wire  signed [15:0] sext_ln41_34_fu_778_p1;
wire  signed [15:0] sext_ln41_33_fu_775_p1;
wire  signed [15:0] sext_ln41_32_fu_772_p1;
wire  signed [15:0] sext_ln41_31_fu_769_p1;
wire  signed [15:0] sext_ln41_30_fu_766_p1;
wire  signed [15:0] sext_ln41_29_fu_763_p1;
wire   [15:0] zext_ln41_1_fu_760_p1;
wire   [15:0] zext_ln41_fu_757_p1;
wire  signed [15:0] sext_ln41_28_fu_754_p1;
wire  signed [15:0] sext_ln41_27_fu_751_p1;
wire  signed [15:0] sext_ln41_fu_748_p1;
wire   [252:0] tmp_s_fu_813_p17;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
end

myproject_mul_15ns_14ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mul_15ns_14ns_28_1_1_U37(
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .dout(grp_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer9_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_28_reg_859 <= {{layer8_out_dout[44:30]}};
        a_29_reg_864 <= {{layer8_out_dout[59:45]}};
        a_30_reg_869 <= {{layer8_out_dout[74:60]}};
        a_31_reg_874 <= {{layer8_out_dout[89:75]}};
        a_32_reg_879 <= {{layer8_out_dout[104:90]}};
        a_33_reg_884 <= {{layer8_out_dout[119:105]}};
        a_34_reg_889 <= {{layer8_out_dout[134:120]}};
        a_35_reg_894 <= {{layer8_out_dout[149:135]}};
        a_36_reg_899 <= {{layer8_out_dout[164:150]}};
        a_37_reg_904 <= {{layer8_out_dout[179:165]}};
        a_38_reg_909 <= {{layer8_out_dout[194:180]}};
        a_39_reg_914 <= {{layer8_out_dout[209:195]}};
        a_40_reg_854 <= {{layer8_out_dout[29:15]}};
        trunc_ln4_reg_924 <= {{layer8_out_dout[224:210]}};
        trunc_ln73_2_reg_929 <= {{layer8_out_dout[239:225]}};
        trunc_ln_reg_919 <= {{add_ln42_fu_408_p2[26:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_103_reg_949 <= {{add_ln42_35_fu_512_p2[26:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_reg_944 <= {{add_ln42_34_fu_492_p2[25:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln41_30_reg_939 <= {{add_ln42_33_fu_472_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln41_31_reg_954 <= {{add_ln42_36_fu_532_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln41_32_reg_959 <= {{add_ln42_37_fu_556_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln41_33_reg_964 <= {{add_ln42_38_fu_580_p2[28:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln41_34_reg_969 <= {{add_ln42_39_fu_600_p2[26:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln41_35_reg_974 <= {{add_ln42_40_fu_624_p2[26:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln41_36_reg_979 <= {{add_ln42_41_fu_648_p2[28:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln41_37_reg_984 <= {{add_ln42_42_fu_668_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln41_38_reg_989 <= {{add_ln42_43_fu_688_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        trunc_ln41_39_reg_994 <= {{add_ln42_44_fu_708_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln41_40_reg_999 <= {{add_ln42_45_fu_732_p2[27:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln41_s_reg_934 <= {{add_ln42_32_fu_448_p2[26:15]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((layer9_out_full_n == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((layer9_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_181_p0 = zext_ln73_47_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_181_p0 = zext_ln73_46_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_181_p0 = zext_ln73_45_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_181_p0 = zext_ln73_44_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_181_p0 = zext_ln73_43_fu_664_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_181_p0 = zext_ln73_42_fu_640_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_181_p0 = zext_ln73_41_fu_616_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_181_p0 = zext_ln73_40_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_181_p0 = zext_ln73_39_fu_572_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_181_p0 = zext_ln73_38_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_181_p0 = zext_ln73_37_fu_528_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_181_p0 = zext_ln73_36_fu_508_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_181_p0 = zext_ln73_35_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_181_p0 = zext_ln73_34_fu_464_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_181_p0 = zext_ln73_33_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_181_p0 = zext_ln73_fu_403_p1;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_181_p1 = 28'd4554;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_181_p1 = 27'd3281;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_181_p1 = 28'd4200;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_181_p1 = 28'd4118;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_181_p1 = 28'd4107;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_181_p1 = 28'd6983;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_181_p1 = 26'd1830;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_181_p1 = 27'd2807;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_181_p1 = 28'd5819;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_181_p1 = 27'd3436;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_181_p1 = 28'd4331;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_181_p1 = 27'd2193;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_181_p1 = 26'd1069;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_181_p1 = 27'd2805;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_181_p1 = 27'd2110;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_181_p1 = 27'd3879;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    if (((layer9_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_blk_n = layer8_out_empty_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_read = 1'b1;
    end else begin
        layer8_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        layer9_out_blk_n = layer9_out_full_n;
    end else begin
        layer9_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer9_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        layer9_out_write = 1'b1;
    end else begin
        layer9_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((layer9_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_269_p1 = layer8_out_dout[14:0];

assign add_ln42_32_fu_448_p0 = grp_fu_181_p2;

assign add_ln42_32_fu_448_p2 = ($signed(add_ln42_32_fu_448_p0) + $signed(27'd99155968));

assign add_ln42_33_fu_472_p2 = ($signed(zext_ln42_fu_468_p1) + $signed(28'd249102336));

assign add_ln42_34_fu_492_p0 = grp_fu_181_p2;

assign add_ln42_34_fu_492_p2 = (add_ln42_34_fu_492_p0 + 26'd12779520);

assign add_ln42_35_fu_512_p0 = grp_fu_181_p2;

assign add_ln42_35_fu_512_p2 = (add_ln42_35_fu_512_p0 + 27'd4096000);

assign add_ln42_36_fu_532_p2 = ($signed(grp_fu_181_p2) + $signed(28'd201228288));

assign add_ln42_37_fu_556_p2 = ($signed(zext_ln42_20_fu_552_p1) + $signed(28'd259653632));

assign add_ln42_38_fu_580_p2 = ($signed(zext_ln42_21_fu_576_p1) + $signed(29'd514457600));

assign add_ln42_39_fu_600_p0 = grp_fu_181_p2;

assign add_ln42_39_fu_600_p2 = ($signed(add_ln42_39_fu_600_p0) + $signed(27'd109084672));

assign add_ln42_40_fu_624_p2 = ($signed(zext_ln42_22_fu_620_p1) + $signed(27'd128024576));

assign add_ln42_41_fu_648_p2 = ($signed(zext_ln42_23_fu_644_p1) + $signed(29'd510754816));

assign add_ln42_42_fu_668_p2 = ($signed(grp_fu_181_p2) + $signed(28'd246710272));

assign add_ln42_43_fu_688_p2 = ($signed(grp_fu_181_p2) + $signed(28'd203620352));

assign add_ln42_44_fu_708_p2 = ($signed(grp_fu_181_p2) + $signed(28'd257130496));

assign add_ln42_45_fu_732_p2 = ($signed(zext_ln42_24_fu_728_p1) + $signed(28'd239403008));

assign add_ln42_46_fu_797_p2 = ($signed(grp_fu_181_p2) + $signed(28'd238878720));

assign add_ln42_fu_408_p0 = grp_fu_181_p2;

assign add_ln42_fu_408_p2 = ($signed(add_ln42_fu_408_p0) + $signed(27'd67600384));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((layer8_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign layer9_out_din = $signed(tmp_s_fu_813_p17);

assign sext_ln41_27_fu_751_p1 = $signed(trunc_ln41_s_reg_934);

assign sext_ln41_28_fu_754_p1 = $signed(trunc_ln41_30_reg_939);

assign sext_ln41_29_fu_763_p1 = $signed(trunc_ln41_31_reg_954);

assign sext_ln41_30_fu_766_p1 = $signed(trunc_ln41_32_reg_959);

assign sext_ln41_31_fu_769_p1 = $signed(trunc_ln41_33_reg_964);

assign sext_ln41_32_fu_772_p1 = $signed(trunc_ln41_34_reg_969);

assign sext_ln41_33_fu_775_p1 = $signed(trunc_ln41_35_reg_974);

assign sext_ln41_34_fu_778_p1 = $signed(trunc_ln41_36_reg_979);

assign sext_ln41_35_fu_781_p1 = $signed(trunc_ln41_37_reg_984);

assign sext_ln41_36_fu_784_p1 = $signed(trunc_ln41_38_reg_989);

assign sext_ln41_37_fu_787_p1 = $signed(trunc_ln41_39_reg_994);

assign sext_ln41_38_fu_790_p1 = $signed(trunc_ln41_40_reg_999);

assign sext_ln41_fu_748_p1 = $signed(trunc_ln_reg_919);

assign start_out = real_start;

assign tmp_s_fu_813_p17 = {{{{{{{{{{{{{{{{trunc_ln41_41_fu_803_p4}, {sext_ln41_38_fu_790_p1}}, {sext_ln41_37_fu_787_p1}}, {sext_ln41_36_fu_784_p1}}, {sext_ln41_35_fu_781_p1}}, {sext_ln41_34_fu_778_p1}}, {sext_ln41_33_fu_775_p1}}, {sext_ln41_32_fu_772_p1}}, {sext_ln41_31_fu_769_p1}}, {sext_ln41_30_fu_766_p1}}, {sext_ln41_29_fu_763_p1}}, {zext_ln41_1_fu_760_p1}}, {zext_ln41_fu_757_p1}}, {sext_ln41_28_fu_754_p1}}, {sext_ln41_27_fu_751_p1}}, {sext_ln41_fu_748_p1}};

assign trunc_ln41_41_fu_803_p4 = {{add_ln42_46_fu_797_p2[27:15]}};

assign zext_ln41_1_fu_760_p1 = tmp_103_reg_949;

assign zext_ln41_fu_757_p1 = tmp_reg_944;

assign zext_ln42_20_fu_552_p0 = grp_fu_181_p2;

assign zext_ln42_20_fu_552_p1 = zext_ln42_20_fu_552_p0;

assign zext_ln42_21_fu_576_p1 = grp_fu_181_p2;

assign zext_ln42_22_fu_620_p0 = grp_fu_181_p2;

assign zext_ln42_22_fu_620_p1 = zext_ln42_22_fu_620_p0;

assign zext_ln42_23_fu_644_p1 = grp_fu_181_p2;

assign zext_ln42_24_fu_728_p0 = grp_fu_181_p2;

assign zext_ln42_24_fu_728_p1 = zext_ln42_24_fu_728_p0;

assign zext_ln42_fu_468_p0 = grp_fu_181_p2;

assign zext_ln42_fu_468_p1 = zext_ln42_fu_468_p0;

assign zext_ln73_33_fu_444_p1 = a_40_reg_854;

assign zext_ln73_34_fu_464_p1 = a_28_reg_859;

assign zext_ln73_35_fu_488_p1 = a_29_reg_864;

assign zext_ln73_36_fu_508_p1 = a_30_reg_869;

assign zext_ln73_37_fu_528_p1 = a_31_reg_874;

assign zext_ln73_38_fu_548_p1 = a_32_reg_879;

assign zext_ln73_39_fu_572_p1 = a_33_reg_884;

assign zext_ln73_40_fu_596_p1 = a_34_reg_889;

assign zext_ln73_41_fu_616_p1 = a_35_reg_894;

assign zext_ln73_42_fu_640_p1 = a_36_reg_899;

assign zext_ln73_43_fu_664_p1 = a_37_reg_904;

assign zext_ln73_44_fu_684_p1 = a_38_reg_909;

assign zext_ln73_45_fu_704_p1 = a_39_reg_914;

assign zext_ln73_46_fu_724_p1 = trunc_ln4_reg_924;

assign zext_ln73_47_fu_793_p1 = trunc_ln73_2_reg_929;

assign zext_ln73_fu_403_p1 = a_fu_269_p1;

endmodule //myproject_normalize_array_ap_ufixed_16u_array_ap_fixed_16_6_5_3_0_16u_config9_s
