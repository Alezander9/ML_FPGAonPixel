// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_normalize_array_ap_fixed_12u_array_ap_fixed_16_6_5_3_0_12u_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer6_out_dout,
        layer6_out_num_data_valid,
        layer6_out_fifo_cap,
        layer6_out_empty_n,
        layer6_out_read,
        layer8_out_din,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_full_n,
        layer8_out_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] layer6_out_dout;
input  [1:0] layer6_out_num_data_valid;
input  [1:0] layer6_out_fifo_cap;
input   layer6_out_empty_n;
output   layer6_out_read;
output  [191:0] layer8_out_din;
input  [1:0] layer8_out_num_data_valid;
input  [1:0] layer8_out_fifo_cap;
input   layer8_out_full_n;
output   layer8_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer6_out_read;
reg layer8_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer6_out_blk_n;
reg    layer8_out_blk_n;
wire    ap_CS_fsm_state12;
reg   [15:0] a_31_reg_588;
reg    ap_block_state1;
reg   [15:0] a_30_reg_593;
reg   [15:0] a_29_reg_598;
reg   [15:0] a_21_reg_603;
reg   [15:0] a_22_reg_608;
reg   [15:0] a_23_reg_613;
reg   [15:0] a_24_reg_618;
reg   [15:0] a_25_reg_623;
reg   [15:0] a_26_reg_628;
reg   [15:0] a_27_reg_633;
reg   [15:0] a_28_reg_638;
reg   [15:0] trunc_ln_reg_643;
reg   [15:0] trunc_ln41_s_reg_648;
wire    ap_CS_fsm_state2;
reg   [15:0] trunc_ln41_23_reg_653;
wire    ap_CS_fsm_state3;
reg   [15:0] trunc_ln41_24_reg_658;
wire    ap_CS_fsm_state4;
reg   [15:0] trunc_ln41_25_reg_663;
wire    ap_CS_fsm_state5;
reg   [15:0] trunc_ln41_26_reg_668;
wire    ap_CS_fsm_state6;
reg   [15:0] trunc_ln41_27_reg_673;
wire    ap_CS_fsm_state7;
reg   [15:0] trunc_ln41_28_reg_678;
wire    ap_CS_fsm_state8;
reg   [15:0] trunc_ln41_29_reg_683;
wire    ap_CS_fsm_state9;
reg   [15:0] trunc_ln41_30_reg_688;
wire    ap_CS_fsm_state10;
reg   [15:0] trunc_ln41_31_reg_693;
wire    ap_CS_fsm_state11;
reg  signed [15:0] grp_fu_143_p0;
wire  signed [25:0] sext_ln42_fu_325_p1;
wire  signed [25:0] sext_ln42_24_fu_346_p1;
wire  signed [25:0] sext_ln42_25_fu_366_p1;
wire  signed [25:0] sext_ln42_26_fu_386_p1;
wire  signed [25:0] sext_ln42_27_fu_406_p1;
wire  signed [25:0] sext_ln42_28_fu_426_p1;
wire  signed [25:0] sext_ln42_29_fu_446_p1;
wire  signed [25:0] sext_ln42_30_fu_466_p1;
wire  signed [25:0] sext_ln42_31_fu_486_p1;
wire  signed [25:0] sext_ln42_32_fu_506_p1;
wire  signed [25:0] sext_ln42_33_fu_526_p1;
wire  signed [24:0] sext_ln42_34_fu_546_p1;
reg   [12:0] grp_fu_143_p1;
wire   [15:0] a_fu_211_p1;
wire   [25:0] grp_fu_143_p2;
wire   [25:0] add_ln42_fu_330_p2;
wire   [25:0] add_ln42_24_fu_350_p2;
wire   [25:0] add_ln42_25_fu_370_p2;
wire   [25:0] add_ln42_26_fu_390_p2;
wire   [25:0] add_ln42_27_fu_410_p2;
wire   [25:0] add_ln42_28_fu_430_p2;
wire   [25:0] add_ln42_29_fu_450_p2;
wire   [25:0] add_ln42_30_fu_470_p2;
wire   [25:0] add_ln42_31_fu_490_p2;
wire   [25:0] add_ln42_32_fu_510_p2;
wire   [25:0] add_ln42_33_fu_530_p2;
wire   [24:0] add_ln42_34_fu_550_p0;
wire   [24:0] add_ln42_34_fu_550_p2;
wire   [14:0] trunc_ln41_32_fu_556_p4;
wire   [190:0] tmp_s_fu_566_p13;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

myproject_mul_16s_13ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_16s_13ns_26_1_1_U27(
    .din0(grp_fu_143_p0),
    .din1(grp_fu_143_p1),
    .dout(grp_fu_143_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer8_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_21_reg_603 <= {{layer6_out_dout[47:32]}};
        a_22_reg_608 <= {{layer6_out_dout[63:48]}};
        a_23_reg_613 <= {{layer6_out_dout[79:64]}};
        a_24_reg_618 <= {{layer6_out_dout[95:80]}};
        a_25_reg_623 <= {{layer6_out_dout[111:96]}};
        a_26_reg_628 <= {{layer6_out_dout[127:112]}};
        a_27_reg_633 <= {{layer6_out_dout[143:128]}};
        a_28_reg_638 <= {{layer6_out_dout[159:144]}};
        a_29_reg_598 <= {{layer6_out_dout[31:16]}};
        a_30_reg_593 <= {{layer6_out_dout[191:176]}};
        a_31_reg_588 <= {{layer6_out_dout[175:160]}};
        trunc_ln_reg_643 <= {{add_ln42_fu_330_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln41_23_reg_653 <= {{add_ln42_25_fu_370_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln41_24_reg_658 <= {{add_ln42_26_fu_390_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln41_25_reg_663 <= {{add_ln42_27_fu_410_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln41_26_reg_668 <= {{add_ln42_28_fu_430_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln41_27_reg_673 <= {{add_ln42_29_fu_450_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln41_28_reg_678 <= {{add_ln42_30_fu_470_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln41_29_reg_683 <= {{add_ln42_31_fu_490_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln41_30_reg_688 <= {{add_ln42_32_fu_510_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln41_31_reg_693 <= {{add_ln42_33_fu_530_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln41_s_reg_648 <= {{add_ln42_24_fu_350_p2[25:10]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((layer8_out_full_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((layer8_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_143_p0 = sext_ln42_34_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_143_p0 = sext_ln42_33_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_143_p0 = sext_ln42_32_fu_506_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_143_p0 = sext_ln42_31_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_143_p0 = sext_ln42_30_fu_466_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_143_p0 = sext_ln42_29_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_143_p0 = sext_ln42_28_fu_426_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_143_p0 = sext_ln42_27_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_143_p0 = sext_ln42_26_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_143_p0 = sext_ln42_25_fu_366_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_143_p0 = sext_ln42_24_fu_346_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_143_p0 = sext_ln42_fu_325_p1;
    end else begin
        grp_fu_143_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_143_p1 = 25'd495;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_143_p1 = 26'd3237;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_143_p1 = 26'd2567;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_143_p1 = 26'd754;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_143_p1 = 26'd2333;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_143_p1 = 26'd2855;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_143_p1 = 26'd697;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_143_p1 = 26'd1733;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_143_p1 = 26'd1396;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_143_p1 = 26'd2009;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_143_p1 = 26'd3487;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_143_p1 = 26'd2441;
    end else begin
        grp_fu_143_p1 = 'bx;
    end
end

always @ (*) begin
    if (((layer8_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_blk_n = layer6_out_empty_n;
    end else begin
        layer6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_read = 1'b1;
    end else begin
        layer6_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        layer8_out_blk_n = layer8_out_full_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer8_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        layer8_out_write = 1'b1;
    end else begin
        layer8_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((layer8_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_211_p1 = layer6_out_dout[15:0];

assign add_ln42_24_fu_350_p2 = ($signed(grp_fu_143_p2) + $signed(26'd66081792));

assign add_ln42_25_fu_370_p2 = (grp_fu_143_p2 + 26'd75776);

assign add_ln42_26_fu_390_p2 = ($signed(grp_fu_143_p2) + $signed(26'd66846720));

assign add_ln42_27_fu_410_p2 = (grp_fu_143_p2 + 26'd809984);

assign add_ln42_28_fu_430_p2 = (grp_fu_143_p2 + 26'd188416);

assign add_ln42_29_fu_450_p2 = ($signed(grp_fu_143_p2) + $signed(26'd65718272));

assign add_ln42_30_fu_470_p2 = (grp_fu_143_p2 + 26'd1044480);

assign add_ln42_31_fu_490_p2 = ($signed(grp_fu_143_p2) + $signed(26'd67103744));

assign add_ln42_32_fu_510_p2 = ($signed(grp_fu_143_p2) + $signed(26'd66521088));

assign add_ln42_33_fu_530_p2 = ($signed(grp_fu_143_p2) + $signed(26'd64463872));

assign add_ln42_34_fu_550_p0 = grp_fu_143_p2;

assign add_ln42_34_fu_550_p2 = (add_ln42_34_fu_550_p0 + 25'd89088);

assign add_ln42_fu_330_p2 = (grp_fu_143_p2 + 26'd860160);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((layer6_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign layer8_out_din = $signed(tmp_s_fu_566_p13);

assign sext_ln42_24_fu_346_p1 = $signed(a_29_reg_598);

assign sext_ln42_25_fu_366_p1 = $signed(a_21_reg_603);

assign sext_ln42_26_fu_386_p1 = $signed(a_22_reg_608);

assign sext_ln42_27_fu_406_p1 = $signed(a_23_reg_613);

assign sext_ln42_28_fu_426_p1 = $signed(a_24_reg_618);

assign sext_ln42_29_fu_446_p1 = $signed(a_25_reg_623);

assign sext_ln42_30_fu_466_p1 = $signed(a_26_reg_628);

assign sext_ln42_31_fu_486_p1 = $signed(a_27_reg_633);

assign sext_ln42_32_fu_506_p1 = $signed(a_28_reg_638);

assign sext_ln42_33_fu_526_p1 = $signed(a_31_reg_588);

assign sext_ln42_34_fu_546_p1 = $signed(a_30_reg_593);

assign sext_ln42_fu_325_p1 = $signed(a_fu_211_p1);

assign start_out = real_start;

assign tmp_s_fu_566_p13 = {{{{{{{{{{{{trunc_ln41_32_fu_556_p4}, {trunc_ln41_31_reg_693}}, {trunc_ln41_30_reg_688}}, {trunc_ln41_29_reg_683}}, {trunc_ln41_28_reg_678}}, {trunc_ln41_27_reg_673}}, {trunc_ln41_26_reg_668}}, {trunc_ln41_25_reg_663}}, {trunc_ln41_24_reg_658}}, {trunc_ln41_23_reg_653}}, {trunc_ln41_s_reg_648}}, {trunc_ln_reg_643}};

assign trunc_ln41_32_fu_556_p4 = {{add_ln42_34_fu_550_p2[24:10]}};

endmodule //myproject_normalize_array_ap_fixed_12u_array_ap_fixed_16_6_5_3_0_12u_config8_s
