// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_7u_array_ap_ufixed_10_0_4_0_0_7u_relu_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer13_out_dout,
        layer13_out_num_data_valid,
        layer13_out_fifo_cap,
        layer13_out_empty_n,
        layer13_out_read,
        layer15_out_din,
        layer15_out_num_data_valid,
        layer15_out_fifo_cap,
        layer15_out_full_n,
        layer15_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [111:0] layer13_out_dout;
input  [1:0] layer13_out_num_data_valid;
input  [1:0] layer13_out_fifo_cap;
input   layer13_out_empty_n;
output   layer13_out_read;
output  [69:0] layer15_out_din;
input  [1:0] layer15_out_num_data_valid;
input  [1:0] layer15_out_fifo_cap;
input   layer15_out_full_n;
output   layer15_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer13_out_read;
reg layer15_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer13_out_blk_n;
reg    layer15_out_blk_n;
reg    ap_block_state1;
wire   [15:0] in_data_fu_99_p1;
wire   [5:0] tmp_2_fu_173_p4;
wire   [0:0] icmp_ln52_fu_183_p2;
wire   [9:0] trunc_ln52_fu_169_p1;
wire   [0:0] icmp_ln51_fu_163_p2;
wire   [9:0] select_ln52_fu_189_p3;
wire   [15:0] in_data_4_fu_123_p4;
wire   [5:0] tmp_3_fu_221_p4;
wire   [0:0] icmp_ln52_7_fu_231_p2;
wire   [9:0] trunc_ln52_7_fu_211_p4;
wire   [0:0] icmp_ln51_7_fu_205_p2;
wire   [9:0] select_ln52_3_fu_237_p3;
wire   [15:0] in_data_5_fu_133_p4;
wire   [5:0] tmp_4_fu_269_p4;
wire   [0:0] icmp_ln52_8_fu_279_p2;
wire   [9:0] trunc_ln52_8_fu_259_p4;
wire   [0:0] icmp_ln51_8_fu_253_p2;
wire   [9:0] select_ln52_4_fu_285_p3;
wire   [15:0] in_data_6_fu_143_p4;
wire   [5:0] tmp_5_fu_317_p4;
wire   [0:0] icmp_ln52_9_fu_327_p2;
wire   [9:0] trunc_ln52_9_fu_307_p4;
wire   [0:0] icmp_ln51_9_fu_301_p2;
wire   [9:0] select_ln52_5_fu_333_p3;
wire   [15:0] tmp_fu_153_p4;
wire   [5:0] tmp_6_fu_365_p4;
wire   [0:0] icmp_ln52_10_fu_375_p2;
wire   [9:0] trunc_ln52_s_fu_355_p4;
wire   [0:0] icmp_ln51_10_fu_349_p2;
wire   [9:0] select_ln52_6_fu_381_p3;
wire   [15:0] trunc_ln44_s_fu_103_p4;
wire   [5:0] tmp_7_fu_413_p4;
wire   [0:0] icmp_ln52_11_fu_423_p2;
wire   [9:0] trunc_ln52_1_fu_403_p4;
wire   [0:0] icmp_ln51_11_fu_397_p2;
wire   [9:0] select_ln52_7_fu_429_p3;
wire   [15:0] trunc_ln44_1_fu_113_p4;
wire   [5:0] tmp_8_fu_461_p4;
wire   [0:0] icmp_ln52_12_fu_471_p2;
wire   [9:0] trunc_ln52_2_fu_451_p4;
wire   [0:0] icmp_ln51_12_fu_445_p2;
wire   [9:0] select_ln52_8_fu_477_p3;
wire   [9:0] select_ln51_8_fu_485_p3;
wire   [9:0] select_ln51_7_fu_437_p3;
wire   [9:0] select_ln51_6_fu_389_p3;
wire   [9:0] select_ln51_5_fu_341_p3;
wire   [9:0] select_ln51_4_fu_293_p3;
wire   [9:0] select_ln51_3_fu_245_p3;
wire   [9:0] select_ln51_fu_197_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer13_out_blk_n = layer13_out_empty_n;
    end else begin
        layer13_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer13_out_read = 1'b1;
    end else begin
        layer13_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_blk_n = layer15_out_full_n;
    end else begin
        layer15_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer15_out_write = 1'b1;
    end else begin
        layer15_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer15_out_full_n == 1'b0) | (layer13_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln51_10_fu_349_p2 = (($signed(tmp_fu_153_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_397_p2 = (($signed(trunc_ln44_s_fu_103_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_445_p2 = (($signed(trunc_ln44_1_fu_113_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_205_p2 = (($signed(in_data_4_fu_123_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_253_p2 = (($signed(in_data_5_fu_133_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_301_p2 = (($signed(in_data_6_fu_143_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_163_p2 = (($signed(in_data_fu_99_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_10_fu_375_p2 = ((tmp_6_fu_365_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_11_fu_423_p2 = ((tmp_7_fu_413_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_471_p2 = ((tmp_8_fu_461_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_231_p2 = ((tmp_3_fu_221_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_279_p2 = ((tmp_4_fu_269_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_9_fu_327_p2 = ((tmp_5_fu_317_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_183_p2 = ((tmp_2_fu_173_p4 != 6'd0) ? 1'b1 : 1'b0);

assign in_data_4_fu_123_p4 = {{layer13_out_dout[31:16]}};

assign in_data_5_fu_133_p4 = {{layer13_out_dout[47:32]}};

assign in_data_6_fu_143_p4 = {{layer13_out_dout[63:48]}};

assign in_data_fu_99_p1 = layer13_out_dout[15:0];

assign layer15_out_din = {{{{{{{select_ln51_8_fu_485_p3}, {select_ln51_7_fu_437_p3}}, {select_ln51_6_fu_389_p3}}, {select_ln51_5_fu_341_p3}}, {select_ln51_4_fu_293_p3}}, {select_ln51_3_fu_245_p3}}, {select_ln51_fu_197_p3}};

assign select_ln51_3_fu_245_p3 = ((icmp_ln51_7_fu_205_p2[0:0] == 1'b1) ? select_ln52_3_fu_237_p3 : 10'd0);

assign select_ln51_4_fu_293_p3 = ((icmp_ln51_8_fu_253_p2[0:0] == 1'b1) ? select_ln52_4_fu_285_p3 : 10'd0);

assign select_ln51_5_fu_341_p3 = ((icmp_ln51_9_fu_301_p2[0:0] == 1'b1) ? select_ln52_5_fu_333_p3 : 10'd0);

assign select_ln51_6_fu_389_p3 = ((icmp_ln51_10_fu_349_p2[0:0] == 1'b1) ? select_ln52_6_fu_381_p3 : 10'd0);

assign select_ln51_7_fu_437_p3 = ((icmp_ln51_11_fu_397_p2[0:0] == 1'b1) ? select_ln52_7_fu_429_p3 : 10'd0);

assign select_ln51_8_fu_485_p3 = ((icmp_ln51_12_fu_445_p2[0:0] == 1'b1) ? select_ln52_8_fu_477_p3 : 10'd0);

assign select_ln51_fu_197_p3 = ((icmp_ln51_fu_163_p2[0:0] == 1'b1) ? select_ln52_fu_189_p3 : 10'd0);

assign select_ln52_3_fu_237_p3 = ((icmp_ln52_7_fu_231_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_7_fu_211_p4);

assign select_ln52_4_fu_285_p3 = ((icmp_ln52_8_fu_279_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_8_fu_259_p4);

assign select_ln52_5_fu_333_p3 = ((icmp_ln52_9_fu_327_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_9_fu_307_p4);

assign select_ln52_6_fu_381_p3 = ((icmp_ln52_10_fu_375_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_s_fu_355_p4);

assign select_ln52_7_fu_429_p3 = ((icmp_ln52_11_fu_423_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_1_fu_403_p4);

assign select_ln52_8_fu_477_p3 = ((icmp_ln52_12_fu_471_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_2_fu_451_p4);

assign select_ln52_fu_189_p3 = ((icmp_ln52_fu_183_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_fu_169_p1);

assign start_out = real_start;

assign tmp_2_fu_173_p4 = {{layer13_out_dout[15:10]}};

assign tmp_3_fu_221_p4 = {{layer13_out_dout[31:26]}};

assign tmp_4_fu_269_p4 = {{layer13_out_dout[47:42]}};

assign tmp_5_fu_317_p4 = {{layer13_out_dout[63:58]}};

assign tmp_6_fu_365_p4 = {{layer13_out_dout[79:74]}};

assign tmp_7_fu_413_p4 = {{layer13_out_dout[95:90]}};

assign tmp_8_fu_461_p4 = {{layer13_out_dout[111:106]}};

assign tmp_fu_153_p4 = {{layer13_out_dout[79:64]}};

assign trunc_ln44_1_fu_113_p4 = {{layer13_out_dout[111:96]}};

assign trunc_ln44_s_fu_103_p4 = {{layer13_out_dout[95:80]}};

assign trunc_ln52_1_fu_403_p4 = {{layer13_out_dout[89:80]}};

assign trunc_ln52_2_fu_451_p4 = {{layer13_out_dout[105:96]}};

assign trunc_ln52_7_fu_211_p4 = {{layer13_out_dout[25:16]}};

assign trunc_ln52_8_fu_259_p4 = {{layer13_out_dout[41:32]}};

assign trunc_ln52_9_fu_307_p4 = {{layer13_out_dout[57:48]}};

assign trunc_ln52_fu_169_p1 = layer13_out_dout[9:0];

assign trunc_ln52_s_fu_355_p4 = {{layer13_out_dout[73:64]}};

endmodule //myproject_relu_array_ap_fixed_7u_array_ap_ufixed_10_0_4_0_0_7u_relu_config15_s
