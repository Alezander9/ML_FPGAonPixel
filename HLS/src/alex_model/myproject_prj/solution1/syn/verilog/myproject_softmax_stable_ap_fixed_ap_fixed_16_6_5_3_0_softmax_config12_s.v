// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        data_2_val,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
wire    ap_block_pp0_stage0_11001;
reg   [16:0] exp_table_load_reg_568;
reg   [16:0] exp_table_load_1_reg_573;
reg   [16:0] exp_table_load_2_reg_578;
wire   [63:0] zext_ln255_fu_326_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_357_p1;
wire   [63:0] zext_ln255_2_fu_388_p1;
wire   [63:0] zext_ln265_fu_469_p1;
wire  signed [15:0] icmp_ln65_fu_124_p0;
wire  signed [15:0] icmp_ln65_fu_124_p1;
wire   [0:0] icmp_ln65_fu_124_p2;
wire   [0:0] xor_ln65_fu_130_p2;
wire  signed [15:0] select_ln65_fu_136_p1;
wire  signed [15:0] select_ln65_fu_136_p2;
wire   [15:0] select_ln65_fu_136_p3;
wire  signed [15:0] icmp_ln65_1_fu_144_p1;
wire   [0:0] icmp_ln65_1_fu_144_p2;
wire   [0:0] xor_ln65_1_fu_150_p2;
wire  signed [15:0] x_max_fu_156_p2;
wire  signed [15:0] sext_ln245_fu_164_p0;
wire   [15:0] x_max_fu_156_p3;
wire  signed [16:0] sext_ln245_fu_164_p1;
wire  signed [16:0] sext_ln245_1_fu_168_p1;
wire   [16:0] sub_ln245_fu_172_p2;
wire   [0:0] tmp_4_fu_178_p3;
wire   [0:0] tmp_5_fu_186_p3;
wire   [0:0] xor_ln245_fu_194_p2;
wire  signed [15:0] sext_ln245_2_fu_212_p0;
wire  signed [16:0] sext_ln245_2_fu_212_p1;
wire   [16:0] sub_ln245_1_fu_216_p2;
wire   [0:0] tmp_6_fu_222_p3;
wire   [0:0] tmp_7_fu_230_p3;
wire   [0:0] xor_ln245_2_fu_238_p2;
wire  signed [15:0] sext_ln245_3_fu_256_p0;
wire  signed [16:0] sext_ln245_3_fu_256_p1;
wire   [16:0] sub_ln245_2_fu_260_p2;
wire   [0:0] tmp_8_fu_266_p3;
wire   [0:0] tmp_9_fu_274_p3;
wire   [0:0] xor_ln245_4_fu_282_p2;
wire   [0:0] and_ln245_fu_200_p2;
wire   [0:0] xor_ln245_1_fu_206_p2;
wire   [9:0] select_ln245_fu_300_p3;
wire   [9:0] tmp_fu_308_p4;
wire   [9:0] select_ln245_1_fu_318_p3;
wire   [0:0] and_ln245_1_fu_244_p2;
wire   [0:0] xor_ln245_3_fu_250_p2;
wire   [9:0] select_ln245_2_fu_331_p3;
wire   [9:0] tmp_1_fu_339_p4;
wire   [9:0] select_ln245_3_fu_349_p3;
wire   [0:0] and_ln245_2_fu_288_p2;
wire   [0:0] xor_ln245_5_fu_294_p2;
wire   [9:0] select_ln245_4_fu_362_p3;
wire   [9:0] tmp_2_fu_370_p4;
wire   [9:0] select_ln245_5_fu_380_p3;
wire   [17:0] zext_ln245_1_fu_397_p1;
wire   [17:0] zext_ln245_fu_393_p1;
wire   [17:0] add_ln50_fu_405_p2;
wire   [0:0] tmp_10_fu_417_p3;
wire   [16:0] add_ln50_2_fu_411_p2;
wire   [16:0] select_ln50_fu_425_p3;
wire   [17:0] zext_ln50_fu_401_p1;
wire   [17:0] zext_ln50_1_fu_433_p1;
wire   [17:0] add_ln50_1_fu_437_p2;
wire   [0:0] tmp_11_fu_443_p3;
wire   [9:0] tmp_3_fu_451_p4;
wire   [9:0] select_ln50_1_fu_461_p3;
wire  signed [17:0] mul_ln268_fu_481_p0;
wire  signed [25:0] sext_ln268_fu_474_p1;
wire   [16:0] mul_ln268_fu_481_p1;
wire   [25:0] mul_ln268_fu_481_p2;
wire  signed [17:0] mul_ln268_1_fu_500_p0;
wire   [16:0] mul_ln268_1_fu_500_p1;
wire   [25:0] mul_ln268_1_fu_500_p2;
wire  signed [17:0] mul_ln268_2_fu_519_p0;
wire   [16:0] mul_ln268_2_fu_519_p1;
wire   [25:0] mul_ln268_2_fu_519_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln268_1_fu_500_p10;
wire   [25:0] mul_ln268_2_fu_519_p10;
wire   [25:0] mul_ln268_fu_481_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_exp_table_ROM_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2)
);

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_invert_table_Rcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U2129(
    .din0(mul_ln268_fu_481_p0),
    .din1(mul_ln268_fu_481_p1),
    .dout(mul_ln268_fu_481_p2)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U2130(
    .din0(mul_ln268_1_fu_500_p0),
    .din1(mul_ln268_1_fu_500_p1),
    .dout(mul_ln268_1_fu_500_p2)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U2131(
    .din0(mul_ln268_2_fu_519_p0),
    .din1(mul_ln268_2_fu_519_p1),
    .dout(mul_ln268_2_fu_519_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_load_1_reg_573 <= exp_table_q1;
        exp_table_load_2_reg_578 <= exp_table_q0;
        exp_table_load_reg_568 <= exp_table_q2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_437_p2 = (zext_ln50_fu_401_p1 + zext_ln50_1_fu_433_p1);

assign add_ln50_2_fu_411_p2 = (exp_table_q1 + exp_table_q2);

assign add_ln50_fu_405_p2 = (zext_ln245_1_fu_397_p1 + zext_ln245_fu_393_p1);

assign and_ln245_1_fu_244_p2 = (xor_ln245_2_fu_238_p2 & tmp_7_fu_230_p3);

assign and_ln245_2_fu_288_p2 = (xor_ln245_4_fu_282_p2 & tmp_9_fu_274_p3);

assign and_ln245_fu_200_p2 = (xor_ln245_fu_194_p2 & tmp_5_fu_186_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln268_fu_481_p2[25:10]}};

assign ap_return_1 = {{mul_ln268_1_fu_500_p2[25:10]}};

assign ap_return_2 = {{mul_ln268_2_fu_519_p2[25:10]}};

assign exp_table_address0 = zext_ln255_2_fu_388_p1;

assign exp_table_address1 = zext_ln255_1_fu_357_p1;

assign exp_table_address2 = zext_ln255_fu_326_p1;

assign icmp_ln65_1_fu_144_p1 = data_2_val;

assign icmp_ln65_1_fu_144_p2 = (($signed(select_ln65_fu_136_p3) < $signed(icmp_ln65_1_fu_144_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_124_p0 = data_0_val;

assign icmp_ln65_fu_124_p1 = data_1_val;

assign icmp_ln65_fu_124_p2 = (($signed(icmp_ln65_fu_124_p0) < $signed(icmp_ln65_fu_124_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_469_p1;

assign mul_ln268_1_fu_500_p0 = sext_ln268_fu_474_p1;

assign mul_ln268_1_fu_500_p1 = mul_ln268_1_fu_500_p10;

assign mul_ln268_1_fu_500_p10 = exp_table_load_1_reg_573;

assign mul_ln268_2_fu_519_p0 = sext_ln268_fu_474_p1;

assign mul_ln268_2_fu_519_p1 = mul_ln268_2_fu_519_p10;

assign mul_ln268_2_fu_519_p10 = exp_table_load_2_reg_578;

assign mul_ln268_fu_481_p0 = sext_ln268_fu_474_p1;

assign mul_ln268_fu_481_p1 = mul_ln268_fu_481_p10;

assign mul_ln268_fu_481_p10 = exp_table_load_reg_568;

assign select_ln245_1_fu_318_p3 = ((xor_ln245_1_fu_206_p2[0:0] == 1'b1) ? select_ln245_fu_300_p3 : tmp_fu_308_p4);

assign select_ln245_2_fu_331_p3 = ((and_ln245_1_fu_244_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_3_fu_349_p3 = ((xor_ln245_3_fu_250_p2[0:0] == 1'b1) ? select_ln245_2_fu_331_p3 : tmp_1_fu_339_p4);

assign select_ln245_4_fu_362_p3 = ((and_ln245_2_fu_288_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_5_fu_380_p3 = ((xor_ln245_5_fu_294_p2[0:0] == 1'b1) ? select_ln245_4_fu_362_p3 : tmp_2_fu_370_p4);

assign select_ln245_fu_300_p3 = ((and_ln245_fu_200_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln50_1_fu_461_p3 = ((tmp_11_fu_443_p3[0:0] == 1'b1) ? 10'd511 : tmp_3_fu_451_p4);

assign select_ln50_fu_425_p3 = ((tmp_10_fu_417_p3[0:0] == 1'b1) ? 17'd131071 : add_ln50_2_fu_411_p2);

assign select_ln65_fu_136_p1 = data_0_val;

assign select_ln65_fu_136_p2 = data_1_val;

assign select_ln65_fu_136_p3 = ((xor_ln65_fu_130_p2[0:0] == 1'b1) ? select_ln65_fu_136_p1 : select_ln65_fu_136_p2);

assign sext_ln245_1_fu_168_p1 = $signed(x_max_fu_156_p3);

assign sext_ln245_2_fu_212_p0 = data_1_val;

assign sext_ln245_2_fu_212_p1 = sext_ln245_2_fu_212_p0;

assign sext_ln245_3_fu_256_p0 = data_2_val;

assign sext_ln245_3_fu_256_p1 = sext_ln245_3_fu_256_p0;

assign sext_ln245_fu_164_p0 = data_0_val;

assign sext_ln245_fu_164_p1 = sext_ln245_fu_164_p0;

assign sext_ln268_fu_474_p1 = $signed(invert_table_q0);

assign sub_ln245_1_fu_216_p2 = ($signed(sext_ln245_2_fu_212_p1) - $signed(sext_ln245_1_fu_168_p1));

assign sub_ln245_2_fu_260_p2 = ($signed(sext_ln245_3_fu_256_p1) - $signed(sext_ln245_1_fu_168_p1));

assign sub_ln245_fu_172_p2 = ($signed(sext_ln245_fu_164_p1) - $signed(sext_ln245_1_fu_168_p1));

assign tmp_10_fu_417_p3 = add_ln50_fu_405_p2[32'd17];

assign tmp_11_fu_443_p3 = add_ln50_1_fu_437_p2[32'd17];

assign tmp_1_fu_339_p4 = {{sub_ln245_1_fu_216_p2[15:6]}};

assign tmp_2_fu_370_p4 = {{sub_ln245_2_fu_260_p2[15:6]}};

assign tmp_3_fu_451_p4 = {{add_ln50_1_fu_437_p2[17:8]}};

assign tmp_4_fu_178_p3 = sub_ln245_fu_172_p2[32'd16];

assign tmp_5_fu_186_p3 = sub_ln245_fu_172_p2[32'd15];

assign tmp_6_fu_222_p3 = sub_ln245_1_fu_216_p2[32'd16];

assign tmp_7_fu_230_p3 = sub_ln245_1_fu_216_p2[32'd15];

assign tmp_8_fu_266_p3 = sub_ln245_2_fu_260_p2[32'd16];

assign tmp_9_fu_274_p3 = sub_ln245_2_fu_260_p2[32'd15];

assign tmp_fu_308_p4 = {{sub_ln245_fu_172_p2[15:6]}};

assign x_max_fu_156_p2 = data_2_val;

assign x_max_fu_156_p3 = ((xor_ln65_1_fu_150_p2[0:0] == 1'b1) ? select_ln65_fu_136_p3 : x_max_fu_156_p2);

assign xor_ln245_1_fu_206_p2 = (tmp_5_fu_186_p3 ^ tmp_4_fu_178_p3);

assign xor_ln245_2_fu_238_p2 = (tmp_6_fu_222_p3 ^ 1'd1);

assign xor_ln245_3_fu_250_p2 = (tmp_7_fu_230_p3 ^ tmp_6_fu_222_p3);

assign xor_ln245_4_fu_282_p2 = (tmp_8_fu_266_p3 ^ 1'd1);

assign xor_ln245_5_fu_294_p2 = (tmp_9_fu_274_p3 ^ tmp_8_fu_266_p3);

assign xor_ln245_fu_194_p2 = (tmp_4_fu_178_p3 ^ 1'd1);

assign xor_ln65_1_fu_150_p2 = (icmp_ln65_1_fu_144_p2 ^ 1'd1);

assign xor_ln65_fu_130_p2 = (icmp_ln65_fu_124_p2 ^ 1'd1);

assign zext_ln245_1_fu_397_p1 = exp_table_q1;

assign zext_ln245_fu_393_p1 = exp_table_q2;

assign zext_ln255_1_fu_357_p1 = select_ln245_3_fu_349_p3;

assign zext_ln255_2_fu_388_p1 = select_ln245_5_fu_380_p3;

assign zext_ln255_fu_326_p1 = select_ln245_1_fu_318_p3;

assign zext_ln265_fu_469_p1 = select_ln50_1_fu_461_p3;

assign zext_ln50_1_fu_433_p1 = select_ln50_fu_425_p3;

assign zext_ln50_fu_401_p1 = exp_table_q0;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s
