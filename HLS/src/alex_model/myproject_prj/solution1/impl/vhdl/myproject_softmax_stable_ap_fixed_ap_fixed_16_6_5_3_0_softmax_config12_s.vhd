-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table_load_reg_568 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_load_1_reg_573 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_load_2_reg_578 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln255_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln65_fu_124_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_124_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_136_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_136_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_136_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_fu_156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln245_fu_164_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_fu_156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln245_fu_164_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln245_1_fu_168_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_fu_172_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_2_fu_212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln245_2_fu_212_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_1_fu_216_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_3_fu_256_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln245_3_fu_256_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_2_fu_260_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_4_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln245_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_1_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_300_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_308_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_1_fu_318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_1_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_3_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_2_fu_331_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_339_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_2_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_5_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_4_fu_362_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_370_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_fu_380_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln245_1_fu_397_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln245_fu_393_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_fu_405_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_2_fu_411_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_fu_425_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_fu_401_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_1_fu_433_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_1_fu_437_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_451_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_1_fu_461_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln268_fu_481_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln268_fu_474_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_fu_481_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_fu_481_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_1_fu_500_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_1_fu_500_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_1_fu_500_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_2_fu_519_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_2_fu_519_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln268_2_fu_519_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln268_1_fu_500_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_2_fu_519_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln268_fu_481_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2);

    invert_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config12_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_1_1_U1256 : component myproject_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_fu_481_p0,
        din1 => mul_ln268_fu_481_p1,
        dout => mul_ln268_fu_481_p2);

    mul_18s_17ns_26_1_1_U1257 : component myproject_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_1_fu_500_p0,
        din1 => mul_ln268_1_fu_500_p1,
        dout => mul_ln268_1_fu_500_p2);

    mul_18s_17ns_26_1_1_U1258 : component myproject_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln268_2_fu_519_p0,
        din1 => mul_ln268_2_fu_519_p1,
        dout => mul_ln268_2_fu_519_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_table_load_1_reg_573 <= exp_table_q1;
                exp_table_load_2_reg_578 <= exp_table_q0;
                exp_table_load_reg_568 <= exp_table_q2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_437_p2 <= std_logic_vector(unsigned(zext_ln50_fu_401_p1) + unsigned(zext_ln50_1_fu_433_p1));
    add_ln50_2_fu_411_p2 <= std_logic_vector(unsigned(exp_table_q1) + unsigned(exp_table_q2));
    add_ln50_fu_405_p2 <= std_logic_vector(unsigned(zext_ln245_1_fu_397_p1) + unsigned(zext_ln245_fu_393_p1));
    and_ln245_1_fu_244_p2 <= (xor_ln245_2_fu_238_p2 and tmp_7_fu_230_p3);
    and_ln245_2_fu_288_p2 <= (xor_ln245_4_fu_282_p2 and tmp_9_fu_274_p3);
    and_ln245_fu_200_p2 <= (xor_ln245_fu_194_p2 and tmp_5_fu_186_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln268_fu_481_p2(25 downto 10);
    ap_return_1 <= mul_ln268_1_fu_500_p2(25 downto 10);
    ap_return_2 <= mul_ln268_2_fu_519_p2(25 downto 10);
    exp_table_address0 <= zext_ln255_2_fu_388_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_1_fu_357_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_fu_326_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln65_1_fu_144_p1 <= data_2_val;
    icmp_ln65_1_fu_144_p2 <= "1" when (signed(select_ln65_fu_136_p3) < signed(icmp_ln65_1_fu_144_p1)) else "0";
    icmp_ln65_fu_124_p0 <= data_0_val;
    icmp_ln65_fu_124_p1 <= data_1_val;
    icmp_ln65_fu_124_p2 <= "1" when (signed(icmp_ln65_fu_124_p0) < signed(icmp_ln65_fu_124_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_469_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln268_1_fu_500_p0 <= sext_ln268_fu_474_p1(18 - 1 downto 0);
    mul_ln268_1_fu_500_p1 <= mul_ln268_1_fu_500_p10(17 - 1 downto 0);
    mul_ln268_1_fu_500_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_1_reg_573),26));
    mul_ln268_2_fu_519_p0 <= sext_ln268_fu_474_p1(18 - 1 downto 0);
    mul_ln268_2_fu_519_p1 <= mul_ln268_2_fu_519_p10(17 - 1 downto 0);
    mul_ln268_2_fu_519_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_2_reg_578),26));
    mul_ln268_fu_481_p0 <= sext_ln268_fu_474_p1(18 - 1 downto 0);
    mul_ln268_fu_481_p1 <= mul_ln268_fu_481_p10(17 - 1 downto 0);
    mul_ln268_fu_481_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_load_reg_568),26));
    select_ln245_1_fu_318_p3 <= 
        select_ln245_fu_300_p3 when (xor_ln245_1_fu_206_p2(0) = '1') else 
        tmp_fu_308_p4;
    select_ln245_2_fu_331_p3 <= 
        ap_const_lv10_1FF when (and_ln245_1_fu_244_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_3_fu_349_p3 <= 
        select_ln245_2_fu_331_p3 when (xor_ln245_3_fu_250_p2(0) = '1') else 
        tmp_1_fu_339_p4;
    select_ln245_4_fu_362_p3 <= 
        ap_const_lv10_1FF when (and_ln245_2_fu_288_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_5_fu_380_p3 <= 
        select_ln245_4_fu_362_p3 when (xor_ln245_5_fu_294_p2(0) = '1') else 
        tmp_2_fu_370_p4;
    select_ln245_fu_300_p3 <= 
        ap_const_lv10_1FF when (and_ln245_fu_200_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln50_1_fu_461_p3 <= 
        ap_const_lv10_1FF when (tmp_11_fu_443_p3(0) = '1') else 
        tmp_3_fu_451_p4;
    select_ln50_fu_425_p3 <= 
        ap_const_lv17_1FFFF when (tmp_10_fu_417_p3(0) = '1') else 
        add_ln50_2_fu_411_p2;
    select_ln65_fu_136_p1 <= data_0_val;
    select_ln65_fu_136_p2 <= data_1_val;
    select_ln65_fu_136_p3 <= 
        select_ln65_fu_136_p1 when (xor_ln65_fu_130_p2(0) = '1') else 
        select_ln65_fu_136_p2;
        sext_ln245_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_fu_156_p3),17));

    sext_ln245_2_fu_212_p0 <= data_1_val;
        sext_ln245_2_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln245_2_fu_212_p0),17));

    sext_ln245_3_fu_256_p0 <= data_2_val;
        sext_ln245_3_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln245_3_fu_256_p0),17));

    sext_ln245_fu_164_p0 <= data_0_val;
        sext_ln245_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln245_fu_164_p0),17));

        sext_ln268_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table_q0),26));

    sub_ln245_1_fu_216_p2 <= std_logic_vector(signed(sext_ln245_2_fu_212_p1) - signed(sext_ln245_1_fu_168_p1));
    sub_ln245_2_fu_260_p2 <= std_logic_vector(signed(sext_ln245_3_fu_256_p1) - signed(sext_ln245_1_fu_168_p1));
    sub_ln245_fu_172_p2 <= std_logic_vector(signed(sext_ln245_fu_164_p1) - signed(sext_ln245_1_fu_168_p1));
    tmp_10_fu_417_p3 <= add_ln50_fu_405_p2(17 downto 17);
    tmp_11_fu_443_p3 <= add_ln50_1_fu_437_p2(17 downto 17);
    tmp_1_fu_339_p4 <= sub_ln245_1_fu_216_p2(15 downto 6);
    tmp_2_fu_370_p4 <= sub_ln245_2_fu_260_p2(15 downto 6);
    tmp_3_fu_451_p4 <= add_ln50_1_fu_437_p2(17 downto 8);
    tmp_4_fu_178_p3 <= sub_ln245_fu_172_p2(16 downto 16);
    tmp_5_fu_186_p3 <= sub_ln245_fu_172_p2(15 downto 15);
    tmp_6_fu_222_p3 <= sub_ln245_1_fu_216_p2(16 downto 16);
    tmp_7_fu_230_p3 <= sub_ln245_1_fu_216_p2(15 downto 15);
    tmp_8_fu_266_p3 <= sub_ln245_2_fu_260_p2(16 downto 16);
    tmp_9_fu_274_p3 <= sub_ln245_2_fu_260_p2(15 downto 15);
    tmp_fu_308_p4 <= sub_ln245_fu_172_p2(15 downto 6);
    x_max_fu_156_p2 <= data_2_val;
    x_max_fu_156_p3 <= 
        select_ln65_fu_136_p3 when (xor_ln65_1_fu_150_p2(0) = '1') else 
        x_max_fu_156_p2;
    xor_ln245_1_fu_206_p2 <= (tmp_5_fu_186_p3 xor tmp_4_fu_178_p3);
    xor_ln245_2_fu_238_p2 <= (tmp_6_fu_222_p3 xor ap_const_lv1_1);
    xor_ln245_3_fu_250_p2 <= (tmp_7_fu_230_p3 xor tmp_6_fu_222_p3);
    xor_ln245_4_fu_282_p2 <= (tmp_8_fu_266_p3 xor ap_const_lv1_1);
    xor_ln245_5_fu_294_p2 <= (tmp_9_fu_274_p3 xor tmp_8_fu_266_p3);
    xor_ln245_fu_194_p2 <= (tmp_4_fu_178_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_150_p2 <= (icmp_ln65_1_fu_144_p2 xor ap_const_lv1_1);
    xor_ln65_fu_130_p2 <= (icmp_ln65_fu_124_p2 xor ap_const_lv1_1);
    zext_ln245_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q1),18));
    zext_ln245_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q2),18));
    zext_ln255_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_3_fu_349_p3),64));
    zext_ln255_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_5_fu_380_p3),64));
    zext_ln255_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_1_fu_318_p3),64));
    zext_ln265_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_461_p3),64));
    zext_ln50_1_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_fu_425_p3),18));
    zext_ln50_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q0),18));
end behav;
