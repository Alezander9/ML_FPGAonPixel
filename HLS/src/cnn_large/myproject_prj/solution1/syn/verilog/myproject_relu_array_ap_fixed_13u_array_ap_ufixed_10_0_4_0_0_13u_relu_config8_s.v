// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer6_out_dout,
        layer6_out_num_data_valid,
        layer6_out_fifo_cap,
        layer6_out_empty_n,
        layer6_out_read,
        layer8_out_din,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer8_out_full_n,
        layer8_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [207:0] layer6_out_dout;
input  [5:0] layer6_out_num_data_valid;
input  [5:0] layer6_out_fifo_cap;
input   layer6_out_empty_n;
output   layer6_out_read;
output  [129:0] layer8_out_din;
input  [5:0] layer8_out_num_data_valid;
input  [5:0] layer8_out_fifo_cap;
input   layer8_out_full_n;
output   layer8_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer6_out_read;
reg layer8_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_177_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer6_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer8_out_blk_n;
reg   [4:0] i_fu_152;
wire   [4:0] i_8_fu_183_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] ap_sig_allocacmp_i_7;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_fu_194_p1;
wire   [5:0] tmp_6_fu_328_p4;
wire   [0:0] icmp_ln52_fu_338_p2;
wire   [9:0] trunc_ln52_fu_324_p1;
wire   [0:0] icmp_ln51_fu_318_p2;
wire   [9:0] out_data_fu_344_p3;
wire   [15:0] in_data_4_fu_218_p4;
wire   [5:0] tmp_7_fu_376_p4;
wire   [0:0] icmp_ln52_8_fu_386_p2;
wire   [9:0] trunc_ln52_8_fu_366_p4;
wire   [0:0] icmp_ln51_8_fu_360_p2;
wire   [9:0] out_data_9_fu_392_p3;
wire   [15:0] in_data_5_fu_228_p4;
wire   [5:0] tmp_8_fu_424_p4;
wire   [0:0] icmp_ln52_9_fu_434_p2;
wire   [9:0] trunc_ln52_9_fu_414_p4;
wire   [0:0] icmp_ln51_9_fu_408_p2;
wire   [9:0] out_data_11_fu_440_p3;
wire   [15:0] in_data_6_fu_238_p4;
wire   [5:0] tmp_9_fu_472_p4;
wire   [0:0] icmp_ln52_10_fu_482_p2;
wire   [9:0] trunc_ln52_s_fu_462_p4;
wire   [0:0] icmp_ln51_10_fu_456_p2;
wire   [9:0] out_data_13_fu_488_p3;
wire   [15:0] tmp_fu_248_p4;
wire   [5:0] tmp_10_fu_520_p4;
wire   [0:0] icmp_ln52_11_fu_530_p2;
wire   [9:0] trunc_ln52_1_fu_510_p4;
wire   [0:0] icmp_ln51_11_fu_504_p2;
wire   [9:0] select_ln52_fu_536_p3;
wire   [15:0] tmp_s_fu_258_p4;
wire   [5:0] tmp_11_fu_568_p4;
wire   [0:0] icmp_ln52_12_fu_578_p2;
wire   [9:0] trunc_ln52_2_fu_558_p4;
wire   [0:0] icmp_ln51_12_fu_552_p2;
wire   [9:0] select_ln52_4_fu_584_p3;
wire   [15:0] tmp_1_fu_268_p4;
wire   [5:0] tmp_12_fu_616_p4;
wire   [0:0] icmp_ln52_13_fu_626_p2;
wire   [9:0] trunc_ln52_3_fu_606_p4;
wire   [0:0] icmp_ln51_13_fu_600_p2;
wire   [9:0] select_ln52_5_fu_632_p3;
wire   [15:0] tmp_2_fu_278_p4;
wire   [5:0] tmp_13_fu_664_p4;
wire   [0:0] icmp_ln52_14_fu_674_p2;
wire   [9:0] trunc_ln52_4_fu_654_p4;
wire   [0:0] icmp_ln51_14_fu_648_p2;
wire   [9:0] select_ln52_6_fu_680_p3;
wire   [15:0] tmp_3_fu_288_p4;
wire   [5:0] tmp_14_fu_712_p4;
wire   [0:0] icmp_ln52_15_fu_722_p2;
wire   [9:0] trunc_ln52_5_fu_702_p4;
wire   [0:0] icmp_ln51_15_fu_696_p2;
wire   [9:0] select_ln52_7_fu_728_p3;
wire   [15:0] tmp_4_fu_298_p4;
wire   [5:0] tmp_15_fu_760_p4;
wire   [0:0] icmp_ln52_16_fu_770_p2;
wire   [9:0] trunc_ln52_6_fu_750_p4;
wire   [0:0] icmp_ln51_16_fu_744_p2;
wire   [9:0] select_ln52_8_fu_776_p3;
wire   [15:0] tmp_5_fu_308_p4;
wire   [5:0] tmp_16_fu_808_p4;
wire   [0:0] icmp_ln52_17_fu_818_p2;
wire   [9:0] trunc_ln52_7_fu_798_p4;
wire   [0:0] icmp_ln51_17_fu_792_p2;
wire   [9:0] select_ln52_9_fu_824_p3;
wire   [15:0] trunc_ln44_s_fu_198_p4;
wire   [5:0] tmp_17_fu_856_p4;
wire   [0:0] icmp_ln52_18_fu_866_p2;
wire   [9:0] trunc_ln52_10_fu_846_p4;
wire   [0:0] icmp_ln51_18_fu_840_p2;
wire   [9:0] select_ln52_10_fu_872_p3;
wire   [15:0] trunc_ln44_1_fu_208_p4;
wire   [5:0] tmp_18_fu_904_p4;
wire   [0:0] icmp_ln52_19_fu_914_p2;
wire   [9:0] trunc_ln52_11_fu_894_p4;
wire   [0:0] icmp_ln51_19_fu_888_p2;
wire   [9:0] select_ln52_11_fu_920_p3;
wire   [9:0] select_ln51_11_fu_928_p3;
wire   [9:0] select_ln51_10_fu_880_p3;
wire   [9:0] select_ln51_9_fu_832_p3;
wire   [9:0] select_ln51_8_fu_784_p3;
wire   [9:0] select_ln51_7_fu_736_p3;
wire   [9:0] select_ln51_6_fu_688_p3;
wire   [9:0] select_ln51_5_fu_640_p3;
wire   [9:0] select_ln51_4_fu_592_p3;
wire   [9:0] select_ln51_fu_544_p3;
wire   [9:0] out_data_14_fu_496_p3;
wire   [9:0] out_data_12_fu_448_p3;
wire   [9:0] out_data_10_fu_400_p3;
wire   [9:0] out_data_8_fu_352_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_101;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        if ((icmp_ln41_fu_177_p2 == 1'd0)) begin
            i_fu_152 <= i_8_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_152 <= 5'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_7 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer6_out_blk_n = layer6_out_empty_n;
    end else begin
        layer6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer6_out_read = 1'b1;
    end else begin
        layer6_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_blk_n = layer8_out_full_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_write = 1'b1;
    end else begin
        layer8_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_8_fu_183_p2 = (ap_sig_allocacmp_i_7 + 5'd1);

assign icmp_ln41_fu_177_p2 = ((ap_sig_allocacmp_i_7 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_456_p2 = (($signed(in_data_6_fu_238_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_504_p2 = (($signed(tmp_fu_248_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_552_p2 = (($signed(tmp_s_fu_258_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_600_p2 = (($signed(tmp_1_fu_268_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_14_fu_648_p2 = (($signed(tmp_2_fu_278_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_15_fu_696_p2 = (($signed(tmp_3_fu_288_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_16_fu_744_p2 = (($signed(tmp_4_fu_298_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_17_fu_792_p2 = (($signed(tmp_5_fu_308_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_18_fu_840_p2 = (($signed(trunc_ln44_s_fu_198_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_19_fu_888_p2 = (($signed(trunc_ln44_1_fu_208_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_360_p2 = (($signed(in_data_4_fu_218_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_408_p2 = (($signed(in_data_5_fu_228_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_318_p2 = (($signed(in_data_fu_194_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_10_fu_482_p2 = ((tmp_9_fu_472_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_11_fu_530_p2 = ((tmp_10_fu_520_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_578_p2 = ((tmp_11_fu_568_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_626_p2 = ((tmp_12_fu_616_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_674_p2 = ((tmp_13_fu_664_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_722_p2 = ((tmp_14_fu_712_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_16_fu_770_p2 = ((tmp_15_fu_760_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_17_fu_818_p2 = ((tmp_16_fu_808_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_18_fu_866_p2 = ((tmp_17_fu_856_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_19_fu_914_p2 = ((tmp_18_fu_904_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_386_p2 = ((tmp_7_fu_376_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_9_fu_434_p2 = ((tmp_8_fu_424_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_338_p2 = ((tmp_6_fu_328_p4 != 6'd0) ? 1'b1 : 1'b0);

assign in_data_4_fu_218_p4 = {{layer6_out_dout[31:16]}};

assign in_data_5_fu_228_p4 = {{layer6_out_dout[47:32]}};

assign in_data_6_fu_238_p4 = {{layer6_out_dout[63:48]}};

assign in_data_fu_194_p1 = layer6_out_dout[15:0];

assign layer8_out_din = {{{{{{{{{{{{{select_ln51_11_fu_928_p3}, {select_ln51_10_fu_880_p3}}, {select_ln51_9_fu_832_p3}}, {select_ln51_8_fu_784_p3}}, {select_ln51_7_fu_736_p3}}, {select_ln51_6_fu_688_p3}}, {select_ln51_5_fu_640_p3}}, {select_ln51_4_fu_592_p3}}, {select_ln51_fu_544_p3}}, {out_data_14_fu_496_p3}}, {out_data_12_fu_448_p3}}, {out_data_10_fu_400_p3}}, {out_data_8_fu_352_p3}};

assign out_data_10_fu_400_p3 = ((icmp_ln51_8_fu_360_p2[0:0] == 1'b1) ? out_data_9_fu_392_p3 : 10'd0);

assign out_data_11_fu_440_p3 = ((icmp_ln52_9_fu_434_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_9_fu_414_p4);

assign out_data_12_fu_448_p3 = ((icmp_ln51_9_fu_408_p2[0:0] == 1'b1) ? out_data_11_fu_440_p3 : 10'd0);

assign out_data_13_fu_488_p3 = ((icmp_ln52_10_fu_482_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_s_fu_462_p4);

assign out_data_14_fu_496_p3 = ((icmp_ln51_10_fu_456_p2[0:0] == 1'b1) ? out_data_13_fu_488_p3 : 10'd0);

assign out_data_8_fu_352_p3 = ((icmp_ln51_fu_318_p2[0:0] == 1'b1) ? out_data_fu_344_p3 : 10'd0);

assign out_data_9_fu_392_p3 = ((icmp_ln52_8_fu_386_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_8_fu_366_p4);

assign out_data_fu_344_p3 = ((icmp_ln52_fu_338_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_fu_324_p1);

assign select_ln51_10_fu_880_p3 = ((icmp_ln51_18_fu_840_p2[0:0] == 1'b1) ? select_ln52_10_fu_872_p3 : 10'd0);

assign select_ln51_11_fu_928_p3 = ((icmp_ln51_19_fu_888_p2[0:0] == 1'b1) ? select_ln52_11_fu_920_p3 : 10'd0);

assign select_ln51_4_fu_592_p3 = ((icmp_ln51_12_fu_552_p2[0:0] == 1'b1) ? select_ln52_4_fu_584_p3 : 10'd0);

assign select_ln51_5_fu_640_p3 = ((icmp_ln51_13_fu_600_p2[0:0] == 1'b1) ? select_ln52_5_fu_632_p3 : 10'd0);

assign select_ln51_6_fu_688_p3 = ((icmp_ln51_14_fu_648_p2[0:0] == 1'b1) ? select_ln52_6_fu_680_p3 : 10'd0);

assign select_ln51_7_fu_736_p3 = ((icmp_ln51_15_fu_696_p2[0:0] == 1'b1) ? select_ln52_7_fu_728_p3 : 10'd0);

assign select_ln51_8_fu_784_p3 = ((icmp_ln51_16_fu_744_p2[0:0] == 1'b1) ? select_ln52_8_fu_776_p3 : 10'd0);

assign select_ln51_9_fu_832_p3 = ((icmp_ln51_17_fu_792_p2[0:0] == 1'b1) ? select_ln52_9_fu_824_p3 : 10'd0);

assign select_ln51_fu_544_p3 = ((icmp_ln51_11_fu_504_p2[0:0] == 1'b1) ? select_ln52_fu_536_p3 : 10'd0);

assign select_ln52_10_fu_872_p3 = ((icmp_ln52_18_fu_866_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_10_fu_846_p4);

assign select_ln52_11_fu_920_p3 = ((icmp_ln52_19_fu_914_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_11_fu_894_p4);

assign select_ln52_4_fu_584_p3 = ((icmp_ln52_12_fu_578_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_2_fu_558_p4);

assign select_ln52_5_fu_632_p3 = ((icmp_ln52_13_fu_626_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_3_fu_606_p4);

assign select_ln52_6_fu_680_p3 = ((icmp_ln52_14_fu_674_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_4_fu_654_p4);

assign select_ln52_7_fu_728_p3 = ((icmp_ln52_15_fu_722_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_5_fu_702_p4);

assign select_ln52_8_fu_776_p3 = ((icmp_ln52_16_fu_770_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_6_fu_750_p4);

assign select_ln52_9_fu_824_p3 = ((icmp_ln52_17_fu_818_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_7_fu_798_p4);

assign select_ln52_fu_536_p3 = ((icmp_ln52_11_fu_530_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln52_1_fu_510_p4);

assign start_out = real_start;

assign tmp_10_fu_520_p4 = {{layer6_out_dout[79:74]}};

assign tmp_11_fu_568_p4 = {{layer6_out_dout[95:90]}};

assign tmp_12_fu_616_p4 = {{layer6_out_dout[111:106]}};

assign tmp_13_fu_664_p4 = {{layer6_out_dout[127:122]}};

assign tmp_14_fu_712_p4 = {{layer6_out_dout[143:138]}};

assign tmp_15_fu_760_p4 = {{layer6_out_dout[159:154]}};

assign tmp_16_fu_808_p4 = {{layer6_out_dout[175:170]}};

assign tmp_17_fu_856_p4 = {{layer6_out_dout[191:186]}};

assign tmp_18_fu_904_p4 = {{layer6_out_dout[207:202]}};

assign tmp_1_fu_268_p4 = {{layer6_out_dout[111:96]}};

assign tmp_2_fu_278_p4 = {{layer6_out_dout[127:112]}};

assign tmp_3_fu_288_p4 = {{layer6_out_dout[143:128]}};

assign tmp_4_fu_298_p4 = {{layer6_out_dout[159:144]}};

assign tmp_5_fu_308_p4 = {{layer6_out_dout[175:160]}};

assign tmp_6_fu_328_p4 = {{layer6_out_dout[15:10]}};

assign tmp_7_fu_376_p4 = {{layer6_out_dout[31:26]}};

assign tmp_8_fu_424_p4 = {{layer6_out_dout[47:42]}};

assign tmp_9_fu_472_p4 = {{layer6_out_dout[63:58]}};

assign tmp_fu_248_p4 = {{layer6_out_dout[79:64]}};

assign tmp_s_fu_258_p4 = {{layer6_out_dout[95:80]}};

assign trunc_ln44_1_fu_208_p4 = {{layer6_out_dout[207:192]}};

assign trunc_ln44_s_fu_198_p4 = {{layer6_out_dout[191:176]}};

assign trunc_ln52_10_fu_846_p4 = {{layer6_out_dout[185:176]}};

assign trunc_ln52_11_fu_894_p4 = {{layer6_out_dout[201:192]}};

assign trunc_ln52_1_fu_510_p4 = {{layer6_out_dout[73:64]}};

assign trunc_ln52_2_fu_558_p4 = {{layer6_out_dout[89:80]}};

assign trunc_ln52_3_fu_606_p4 = {{layer6_out_dout[105:96]}};

assign trunc_ln52_4_fu_654_p4 = {{layer6_out_dout[121:112]}};

assign trunc_ln52_5_fu_702_p4 = {{layer6_out_dout[137:128]}};

assign trunc_ln52_6_fu_750_p4 = {{layer6_out_dout[153:144]}};

assign trunc_ln52_7_fu_798_p4 = {{layer6_out_dout[169:160]}};

assign trunc_ln52_8_fu_366_p4 = {{layer6_out_dout[25:16]}};

assign trunc_ln52_9_fu_414_p4 = {{layer6_out_dout[41:32]}};

assign trunc_ln52_fu_324_p1 = layer6_out_dout[9:0];

assign trunc_ln52_s_fu_462_p4 = {{layer6_out_dout[57:48]}};

endmodule //myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config8_s
