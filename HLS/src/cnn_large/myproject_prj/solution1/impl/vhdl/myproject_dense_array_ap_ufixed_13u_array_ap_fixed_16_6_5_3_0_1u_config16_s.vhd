-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_ufixed_13u_array_ap_fixed_16_6_5_3_0_1u_config16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (129 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer16_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer16_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_full_n : IN STD_LOGIC;
    layer16_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_ufixed_13u_array_ap_fixed_16_6_5_3_0_1u_config16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv19_173 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000101110011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv20_FFE0D : STD_LOGIC_VECTOR (19 downto 0) := "11111111111000001101";
    constant ap_const_lv20_FFEB7 : STD_LOGIC_VECTOR (19 downto 0) := "11111111111010110111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv18_F2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011110010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv19_171 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000101110001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_192 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000110010010";
    constant ap_const_lv20_FFE11 : STD_LOGIC_VECTOR (19 downto 0) := "11111111111000010001";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv17_6F : STD_LOGIC_VECTOR (16 downto 0) := "00000000001101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv13_1FF0 : STD_LOGIC_VECTOR (12 downto 0) := "1111111110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal layer16_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_cast1_reg_580 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_reg_585 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_fu_493_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln53_reg_590 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln53_995_fu_499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_995_reg_595 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_998_fu_511_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln53_998_reg_600 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln53_1000_fu_517_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_1000_reg_605 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_fu_123_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_1_i_i_fu_217_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_1_i_i_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_1_i_i_fu_217_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_223_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_1_fu_133_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_2_i_i_fu_241_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_2_i_i_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_2_i_i_fu_241_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_2_fu_143_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_3_i_i_fu_261_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_3_i_i_fu_261_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_3_i_i_fu_261_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast2_fu_267_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln43_3_fu_153_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_281_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl2_cast_fu_289_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_i_i_4_i_i_fu_293_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast3_fu_299_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal data_3_fu_163_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_6_i_i_fu_317_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_6_i_i_fu_317_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_6_i_i_fu_317_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_4_fu_173_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_7_i_i_fu_337_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_7_i_i_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_7_i_i_fu_337_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_fu_343_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln43_6_fu_183_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_357_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_cast_fu_365_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_neg_fu_369_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_fu_379_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_neg_cast_fu_375_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl1_cast_fu_387_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_i_i_8_i_i_fu_391_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast_fu_397_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_5_fu_193_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_9_i_i_fu_415_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_9_i_i_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_9_i_i_fu_415_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_421_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_6_fu_203_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_10_i_i_fu_439_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_10_i_i_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_10_i_i_fu_439_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast4_fu_445_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal data_9_cast_fu_459_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_12_i_i_fu_473_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_12_i_i_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_12_i_i_fu_473_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_479_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv5_i_i_i_1_i_i_cast_cast_fu_233_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast16_cast29_fu_277_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast17_cast30_fu_309_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv5_i_i_i_9_i_i_cast_cast_fu_431_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln53_1_fu_489_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln53_997_fu_505_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv5_i_i_i_7_i_i_cast_cast_fu_353_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast23_cast_fu_455_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_cast_fu_407_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln53_fu_529_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast15_cast_fu_523_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_994_fu_532_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln53_596_fu_542_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln53_595_fu_538_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln53_996_fu_545_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv5_i_i_i_6_i_i_cast_cast_fu_526_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln53_597_fu_551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln53_598_fu_564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln53_999_fu_558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln53_1001_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal mul_i_i_10_i_i_fu_439_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_i_i_12_i_i_fu_473_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_i_i_1_i_i_fu_217_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_i_i_2_i_i_fu_241_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_i_i_3_i_i_fu_261_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_i_i_6_i_i_fu_317_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_i_i_7_i_i_fu_337_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_i_i_9_i_i_fu_415_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_10ns_10ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_10ns_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_10ns_9ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_10ns_8ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    mul_10ns_10ns_19_1_1_U1175 : component myproject_mul_10ns_10ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => mul_i_i_1_i_i_fu_217_p0,
        din1 => mul_i_i_1_i_i_fu_217_p1,
        dout => mul_i_i_1_i_i_fu_217_p2);

    mul_10ns_10s_20_1_1_U1176 : component myproject_mul_10ns_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_i_i_2_i_i_fu_241_p0,
        din1 => mul_i_i_2_i_i_fu_241_p1,
        dout => mul_i_i_2_i_i_fu_241_p2);

    mul_10ns_10s_20_1_1_U1177 : component myproject_mul_10ns_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_i_i_3_i_i_fu_261_p0,
        din1 => mul_i_i_3_i_i_fu_261_p1,
        dout => mul_i_i_3_i_i_fu_261_p2);

    mul_10ns_9ns_18_1_1_U1178 : component myproject_mul_10ns_9ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_i_i_6_i_i_fu_317_p0,
        din1 => mul_i_i_6_i_i_fu_317_p1,
        dout => mul_i_i_6_i_i_fu_317_p2);

    mul_10ns_10ns_19_1_1_U1179 : component myproject_mul_10ns_10ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => mul_i_i_7_i_i_fu_337_p0,
        din1 => mul_i_i_7_i_i_fu_337_p1,
        dout => mul_i_i_7_i_i_fu_337_p2);

    mul_10ns_10ns_19_1_1_U1180 : component myproject_mul_10ns_10ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => mul_i_i_9_i_i_fu_415_p0,
        din1 => mul_i_i_9_i_i_fu_415_p1,
        dout => mul_i_i_9_i_i_fu_415_p2);

    mul_10ns_10s_20_1_1_U1181 : component myproject_mul_10ns_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_i_i_10_i_i_fu_439_p0,
        din1 => mul_i_i_10_i_i_fu_439_p1,
        dout => mul_i_i_10_i_i_fu_439_p2);

    mul_10ns_8ns_17_1_1_U1182 : component myproject_mul_10ns_8ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => mul_i_i_12_i_i_fu_473_p0,
        din1 => mul_i_i_12_i_i_fu_473_p1,
        dout => mul_i_i_12_i_i_fu_473_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln53_1000_reg_605 <= add_ln53_1000_fu_517_p2;
                add_ln53_995_reg_595 <= add_ln53_995_fu_499_p2;
                add_ln53_998_reg_600 <= add_ln53_998_fu_511_p2;
                add_ln53_reg_590 <= add_ln53_fu_493_p2;
                p_cast1_reg_580 <= mul_i_i_2_i_i_fu_241_p2(19 downto 7);
                tmp_1_reg_585 <= mul_i_i_6_i_i_fu_317_p2(17 downto 7);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer15_out_empty_n, layer16_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln53_1000_fu_517_p2 <= std_logic_vector(signed(p_cast23_cast_fu_455_p1) + signed(p_cast_cast_fu_407_p1));
    add_ln53_1001_fu_567_p2 <= std_logic_vector(signed(sext_ln53_598_fu_564_p1) + signed(add_ln53_999_fu_558_p2));
    add_ln53_994_fu_532_p2 <= std_logic_vector(signed(sext_ln53_fu_529_p1) + signed(p_cast15_cast_fu_523_p1));
    add_ln53_995_fu_499_p2 <= std_logic_vector(signed(p_cast16_cast29_fu_277_p1) + signed(p_cast17_cast30_fu_309_p1));
    add_ln53_996_fu_545_p2 <= std_logic_vector(signed(sext_ln53_596_fu_542_p1) + signed(sext_ln53_595_fu_538_p1));
    add_ln53_997_fu_505_p2 <= std_logic_vector(unsigned(conv5_i_i_i_9_i_i_cast_cast_fu_431_p1) + unsigned(zext_ln53_1_fu_489_p1));
    add_ln53_998_fu_511_p2 <= std_logic_vector(unsigned(add_ln53_997_fu_505_p2) + unsigned(conv5_i_i_i_7_i_i_cast_cast_fu_353_p1));
    add_ln53_999_fu_558_p2 <= std_logic_vector(unsigned(conv5_i_i_i_6_i_i_cast_cast_fu_526_p1) + unsigned(sext_ln53_597_fu_551_p1));
    add_ln53_fu_493_p2 <= std_logic_vector(unsigned(conv5_i_i_i_1_i_i_cast_cast_fu_233_p1) + unsigned(ap_const_lv13_1FF0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer16_out_full_n)
    begin
        if ((layer16_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    conv5_i_i_i_1_i_i_cast_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_223_p4),13));
    conv5_i_i_i_6_i_i_cast_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_585),16));
    conv5_i_i_i_7_i_i_cast_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_343_p4),13));
    conv5_i_i_i_9_i_i_cast_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_421_p4),13));
    data_1_fu_133_p4 <= layer15_out_dout(29 downto 20);
    data_2_fu_143_p4 <= layer15_out_dout(39 downto 30);
    data_3_fu_163_p4 <= layer15_out_dout(69 downto 60);
    data_4_fu_173_p4 <= layer15_out_dout(79 downto 70);
    data_5_fu_193_p4 <= layer15_out_dout(99 downto 90);
    data_6_fu_203_p4 <= layer15_out_dout(109 downto 100);
    data_9_cast_fu_459_p4 <= layer15_out_dout(129 downto 120);
    data_fu_123_p4 <= layer15_out_dout(19 downto 10);

    internal_ap_ready_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer16_out_blk_n_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer16_out_blk_n <= layer16_out_full_n;
        else 
            layer16_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer16_out_din <= std_logic_vector(unsigned(add_ln53_1001_fu_567_p2) + unsigned(zext_ln53_fu_555_p1));

    layer16_out_write_assign_proc : process(layer16_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer16_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer16_out_write <= ap_const_logic_1;
        else 
            layer16_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_i_i_10_i_i_fu_439_p0 <= mul_i_i_10_i_i_fu_439_p00(10 - 1 downto 0);
    mul_i_i_10_i_i_fu_439_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_6_fu_203_p4),20));
    mul_i_i_10_i_i_fu_439_p1 <= ap_const_lv20_FFE11(10 - 1 downto 0);
    mul_i_i_12_i_i_fu_473_p0 <= mul_i_i_12_i_i_fu_473_p00(10 - 1 downto 0);
    mul_i_i_12_i_i_fu_473_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_9_cast_fu_459_p4),17));
    mul_i_i_12_i_i_fu_473_p1 <= ap_const_lv17_6F(8 - 1 downto 0);
    mul_i_i_1_i_i_fu_217_p0 <= mul_i_i_1_i_i_fu_217_p00(10 - 1 downto 0);
    mul_i_i_1_i_i_fu_217_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_fu_123_p4),19));
    mul_i_i_1_i_i_fu_217_p1 <= ap_const_lv19_173(10 - 1 downto 0);
    mul_i_i_2_i_i_fu_241_p0 <= mul_i_i_2_i_i_fu_241_p00(10 - 1 downto 0);
    mul_i_i_2_i_i_fu_241_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_1_fu_133_p4),20));
    mul_i_i_2_i_i_fu_241_p1 <= ap_const_lv20_FFE0D(10 - 1 downto 0);
    mul_i_i_3_i_i_fu_261_p0 <= mul_i_i_3_i_i_fu_261_p00(10 - 1 downto 0);
    mul_i_i_3_i_i_fu_261_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_2_fu_143_p4),20));
    mul_i_i_3_i_i_fu_261_p1 <= ap_const_lv20_FFEB7(10 - 1 downto 0);
    mul_i_i_4_i_i_fu_293_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(p_shl2_cast_fu_289_p1));
    mul_i_i_6_i_i_fu_317_p0 <= mul_i_i_6_i_i_fu_317_p00(10 - 1 downto 0);
    mul_i_i_6_i_i_fu_317_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_3_fu_163_p4),18));
    mul_i_i_6_i_i_fu_317_p1 <= ap_const_lv18_F2(9 - 1 downto 0);
    mul_i_i_7_i_i_fu_337_p0 <= mul_i_i_7_i_i_fu_337_p00(10 - 1 downto 0);
    mul_i_i_7_i_i_fu_337_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_4_fu_173_p4),19));
    mul_i_i_7_i_i_fu_337_p1 <= ap_const_lv19_171(10 - 1 downto 0);
    mul_i_i_8_i_i_fu_391_p2 <= std_logic_vector(signed(p_neg_cast_fu_375_p1) - signed(p_shl1_cast_fu_387_p1));
    mul_i_i_9_i_i_fu_415_p0 <= mul_i_i_9_i_i_fu_415_p00(10 - 1 downto 0);
    mul_i_i_9_i_i_fu_415_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_5_fu_193_p4),19));
    mul_i_i_9_i_i_fu_415_p1 <= ap_const_lv19_192(10 - 1 downto 0);
        p_cast15_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_reg_580),14));

        p_cast16_cast29_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_267_p4),14));

        p_cast17_cast30_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_299_p4),14));

        p_cast23_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast4_fu_445_p4),14));

    p_cast2_fu_267_p4 <= mul_i_i_3_i_i_fu_261_p2(19 downto 7);
    p_cast3_fu_299_p4 <= mul_i_i_4_i_i_fu_293_p2(19 downto 7);
    p_cast4_fu_445_p4 <= mul_i_i_10_i_i_fu_439_p2(19 downto 7);
        p_cast_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_397_p4),14));

    p_cast_fu_397_p4 <= mul_i_i_8_i_i_fu_391_p2(18 downto 7);
        p_neg_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_neg_fu_369_p2),19));

    p_neg_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(p_shl_cast_fu_365_p1));
    p_shl1_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_379_p3),19));
    p_shl1_fu_379_p3 <= (trunc_ln43_6_fu_183_p4 & ap_const_lv4_0);
    p_shl2_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_281_p3),20));
    p_shl2_fu_281_p3 <= (trunc_ln43_3_fu_153_p4 & ap_const_lv9_0);
    p_shl_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_357_p3),18));
    p_shl_fu_357_p3 <= (trunc_ln43_6_fu_183_p4 & ap_const_lv7_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln53_595_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_994_fu_532_p2),15));

        sext_ln53_596_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_995_reg_595),15));

        sext_ln53_597_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_996_fu_545_p2),16));

        sext_ln53_598_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_1000_reg_605),16));

        sext_ln53_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_reg_590),14));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_343_p4 <= mul_i_i_7_i_i_fu_337_p2(18 downto 7);
    tmp_3_fu_421_p4 <= mul_i_i_9_i_i_fu_415_p2(18 downto 7);
    tmp_4_fu_479_p4 <= mul_i_i_12_i_i_fu_473_p2(16 downto 7);
    tmp_fu_223_p4 <= mul_i_i_1_i_i_fu_217_p2(18 downto 7);
    trunc_ln43_3_fu_153_p4 <= layer15_out_dout(49 downto 40);
    trunc_ln43_6_fu_183_p4 <= layer15_out_dout(89 downto 80);
    zext_ln53_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_479_p4),13));
    zext_ln53_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_998_reg_600),16));
end behav;
