-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer13_out_dout : IN STD_LOGIC_VECTOR (207 downto 0);
    layer13_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_empty_n : IN STD_LOGIC;
    layer13_out_read : OUT STD_LOGIC;
    layer15_out_din : OUT STD_LOGIC_VECTOR (129 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_full_n : IN STD_LOGIC;
    layer15_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_13u_array_ap_ufixed_10_0_4_0_0_13u_relu_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer13_out_blk_n : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal in_data_fu_147_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_281_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_297_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_7_fu_171_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_329_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_20_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_319_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_20_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_12_fu_345_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_8_fu_181_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_377_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_21_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_12_fu_367_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_21_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_13_fu_393_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_data_9_fu_191_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_425_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_22_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_13_fu_415_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_22_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_14_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_201_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_473_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_23_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_14_fu_463_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_23_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_15_fu_489_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_521_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_24_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_15_fu_511_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_24_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_16_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_221_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_569_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_25_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_16_fu_559_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_25_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_17_fu_585_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_231_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_617_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_26_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_17_fu_607_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_26_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_18_fu_633_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_241_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_665_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_27_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_18_fu_655_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_27_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_19_fu_681_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_251_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_713_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_28_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_19_fu_703_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_28_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_20_fu_729_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_261_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_761_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_29_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_20_fu_751_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_29_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_21_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_s_fu_151_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_809_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_30_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_21_fu_799_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_30_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_22_fu_825_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_2_fu_161_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_857_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln52_31_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_22_fu_847_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_31_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_23_fu_873_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_23_fu_881_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_22_fu_833_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_21_fu_785_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_20_fu_737_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_19_fu_689_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_18_fu_641_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_17_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_16_fu_545_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_15_fu_497_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_14_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_13_fu_401_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_12_fu_353_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_fu_305_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer15_out_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n, layer15_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln51_20_fu_313_p2 <= "1" when (signed(in_data_7_fu_171_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_21_fu_361_p2 <= "1" when (signed(in_data_8_fu_181_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_22_fu_409_p2 <= "1" when (signed(in_data_9_fu_191_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_23_fu_457_p2 <= "1" when (signed(tmp_fu_201_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_24_fu_505_p2 <= "1" when (signed(tmp_s_fu_211_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_25_fu_553_p2 <= "1" when (signed(tmp_19_fu_221_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_26_fu_601_p2 <= "1" when (signed(tmp_20_fu_231_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_27_fu_649_p2 <= "1" when (signed(tmp_21_fu_241_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_28_fu_697_p2 <= "1" when (signed(tmp_22_fu_251_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_29_fu_745_p2 <= "1" when (signed(tmp_23_fu_261_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_30_fu_793_p2 <= "1" when (signed(trunc_ln44_s_fu_151_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_31_fu_841_p2 <= "1" when (signed(trunc_ln44_2_fu_161_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_271_p2 <= "1" when (signed(in_data_fu_147_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_20_fu_339_p2 <= "0" when (tmp_25_fu_329_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_21_fu_387_p2 <= "0" when (tmp_26_fu_377_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_22_fu_435_p2 <= "0" when (tmp_27_fu_425_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_23_fu_483_p2 <= "0" when (tmp_28_fu_473_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_24_fu_531_p2 <= "0" when (tmp_29_fu_521_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_25_fu_579_p2 <= "0" when (tmp_30_fu_569_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_26_fu_627_p2 <= "0" when (tmp_31_fu_617_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_27_fu_675_p2 <= "0" when (tmp_32_fu_665_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_28_fu_723_p2 <= "0" when (tmp_33_fu_713_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_29_fu_771_p2 <= "0" when (tmp_34_fu_761_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_30_fu_819_p2 <= "0" when (tmp_35_fu_809_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_31_fu_867_p2 <= "0" when (tmp_36_fu_857_p4 = ap_const_lv6_0) else "1";
    icmp_ln52_fu_291_p2 <= "0" when (tmp_24_fu_281_p4 = ap_const_lv6_0) else "1";
    in_data_7_fu_171_p4 <= layer13_out_dout(31 downto 16);
    in_data_8_fu_181_p4 <= layer13_out_dout(47 downto 32);
    in_data_9_fu_191_p4 <= layer13_out_dout(63 downto 48);
    in_data_fu_147_p1 <= layer13_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer13_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_blk_n <= layer13_out_empty_n;
        else 
            layer13_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer13_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_read <= ap_const_logic_1;
        else 
            layer13_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_full_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer15_out_din <= ((((((((((((select_ln51_23_fu_881_p3 & select_ln51_22_fu_833_p3) & select_ln51_21_fu_785_p3) & select_ln51_20_fu_737_p3) & select_ln51_19_fu_689_p3) & select_ln51_18_fu_641_p3) & select_ln51_17_fu_593_p3) & select_ln51_16_fu_545_p3) & select_ln51_15_fu_497_p3) & select_ln51_14_fu_449_p3) & select_ln51_13_fu_401_p3) & select_ln51_12_fu_353_p3) & select_ln51_fu_305_p3);

    layer15_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_full_n = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_write <= ap_const_logic_1;
        else 
            layer15_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_12_fu_353_p3 <= 
        select_ln52_12_fu_345_p3 when (icmp_ln51_20_fu_313_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_13_fu_401_p3 <= 
        select_ln52_13_fu_393_p3 when (icmp_ln51_21_fu_361_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_14_fu_449_p3 <= 
        select_ln52_14_fu_441_p3 when (icmp_ln51_22_fu_409_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_15_fu_497_p3 <= 
        select_ln52_15_fu_489_p3 when (icmp_ln51_23_fu_457_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_16_fu_545_p3 <= 
        select_ln52_16_fu_537_p3 when (icmp_ln51_24_fu_505_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_17_fu_593_p3 <= 
        select_ln52_17_fu_585_p3 when (icmp_ln51_25_fu_553_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_18_fu_641_p3 <= 
        select_ln52_18_fu_633_p3 when (icmp_ln51_26_fu_601_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_19_fu_689_p3 <= 
        select_ln52_19_fu_681_p3 when (icmp_ln51_27_fu_649_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_20_fu_737_p3 <= 
        select_ln52_20_fu_729_p3 when (icmp_ln51_28_fu_697_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_21_fu_785_p3 <= 
        select_ln52_21_fu_777_p3 when (icmp_ln51_29_fu_745_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_22_fu_833_p3 <= 
        select_ln52_22_fu_825_p3 when (icmp_ln51_30_fu_793_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_23_fu_881_p3 <= 
        select_ln52_23_fu_873_p3 when (icmp_ln51_31_fu_841_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln51_fu_305_p3 <= 
        select_ln52_fu_297_p3 when (icmp_ln51_fu_271_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln52_12_fu_345_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_20_fu_339_p2(0) = '1') else 
        trunc_ln52_s_fu_319_p4;
    select_ln52_13_fu_393_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_21_fu_387_p2(0) = '1') else 
        trunc_ln52_12_fu_367_p4;
    select_ln52_14_fu_441_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_22_fu_435_p2(0) = '1') else 
        trunc_ln52_13_fu_415_p4;
    select_ln52_15_fu_489_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_23_fu_483_p2(0) = '1') else 
        trunc_ln52_14_fu_463_p4;
    select_ln52_16_fu_537_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_24_fu_531_p2(0) = '1') else 
        trunc_ln52_15_fu_511_p4;
    select_ln52_17_fu_585_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_25_fu_579_p2(0) = '1') else 
        trunc_ln52_16_fu_559_p4;
    select_ln52_18_fu_633_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_26_fu_627_p2(0) = '1') else 
        trunc_ln52_17_fu_607_p4;
    select_ln52_19_fu_681_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_27_fu_675_p2(0) = '1') else 
        trunc_ln52_18_fu_655_p4;
    select_ln52_20_fu_729_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_28_fu_723_p2(0) = '1') else 
        trunc_ln52_19_fu_703_p4;
    select_ln52_21_fu_777_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_29_fu_771_p2(0) = '1') else 
        trunc_ln52_20_fu_751_p4;
    select_ln52_22_fu_825_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_30_fu_819_p2(0) = '1') else 
        trunc_ln52_21_fu_799_p4;
    select_ln52_23_fu_873_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_31_fu_867_p2(0) = '1') else 
        trunc_ln52_22_fu_847_p4;
    select_ln52_fu_297_p3 <= 
        ap_const_lv10_3FF when (icmp_ln52_fu_291_p2(0) = '1') else 
        trunc_ln52_fu_277_p1;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_221_p4 <= layer13_out_dout(111 downto 96);
    tmp_20_fu_231_p4 <= layer13_out_dout(127 downto 112);
    tmp_21_fu_241_p4 <= layer13_out_dout(143 downto 128);
    tmp_22_fu_251_p4 <= layer13_out_dout(159 downto 144);
    tmp_23_fu_261_p4 <= layer13_out_dout(175 downto 160);
    tmp_24_fu_281_p4 <= layer13_out_dout(15 downto 10);
    tmp_25_fu_329_p4 <= layer13_out_dout(31 downto 26);
    tmp_26_fu_377_p4 <= layer13_out_dout(47 downto 42);
    tmp_27_fu_425_p4 <= layer13_out_dout(63 downto 58);
    tmp_28_fu_473_p4 <= layer13_out_dout(79 downto 74);
    tmp_29_fu_521_p4 <= layer13_out_dout(95 downto 90);
    tmp_30_fu_569_p4 <= layer13_out_dout(111 downto 106);
    tmp_31_fu_617_p4 <= layer13_out_dout(127 downto 122);
    tmp_32_fu_665_p4 <= layer13_out_dout(143 downto 138);
    tmp_33_fu_713_p4 <= layer13_out_dout(159 downto 154);
    tmp_34_fu_761_p4 <= layer13_out_dout(175 downto 170);
    tmp_35_fu_809_p4 <= layer13_out_dout(191 downto 186);
    tmp_36_fu_857_p4 <= layer13_out_dout(207 downto 202);
    tmp_fu_201_p4 <= layer13_out_dout(79 downto 64);
    tmp_s_fu_211_p4 <= layer13_out_dout(95 downto 80);
    trunc_ln44_2_fu_161_p4 <= layer13_out_dout(207 downto 192);
    trunc_ln44_s_fu_151_p4 <= layer13_out_dout(191 downto 176);
    trunc_ln52_12_fu_367_p4 <= layer13_out_dout(41 downto 32);
    trunc_ln52_13_fu_415_p4 <= layer13_out_dout(57 downto 48);
    trunc_ln52_14_fu_463_p4 <= layer13_out_dout(73 downto 64);
    trunc_ln52_15_fu_511_p4 <= layer13_out_dout(89 downto 80);
    trunc_ln52_16_fu_559_p4 <= layer13_out_dout(105 downto 96);
    trunc_ln52_17_fu_607_p4 <= layer13_out_dout(121 downto 112);
    trunc_ln52_18_fu_655_p4 <= layer13_out_dout(137 downto 128);
    trunc_ln52_19_fu_703_p4 <= layer13_out_dout(153 downto 144);
    trunc_ln52_20_fu_751_p4 <= layer13_out_dout(169 downto 160);
    trunc_ln52_21_fu_799_p4 <= layer13_out_dout(185 downto 176);
    trunc_ln52_22_fu_847_p4 <= layer13_out_dout(201 downto 192);
    trunc_ln52_fu_277_p1 <= layer13_out_dout(10 - 1 downto 0);
    trunc_ln52_s_fu_319_p4 <= layer13_out_dout(25 downto 16);
end behav;
