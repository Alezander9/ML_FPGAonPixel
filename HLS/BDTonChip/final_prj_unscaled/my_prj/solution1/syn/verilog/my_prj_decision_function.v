// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function (
        ap_ready,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        ap_return
);


output   ap_ready;
input  [27:0] p_read1;
input  [27:0] p_read2;
input  [27:0] p_read3;
input  [27:0] p_read4;
input  [27:0] p_read5;
input  [27:0] p_read6;
input  [27:0] p_read7;
output  [27:0] ap_return;

wire   [0:0] icmp_ln1652_1_fu_126_p2;
wire   [0:0] icmp_ln1652_fu_120_p2;
wire   [0:0] icmp_ln1652_2_fu_132_p2;
wire   [0:0] xor_ln75_fu_180_p2;
wire   [0:0] and_ln73_8_fu_186_p2;
wire   [0:0] icmp_ln1652_3_fu_138_p2;
wire   [0:0] xor_ln75_1_fu_198_p2;
wire   [0:0] xor_ln75_2_fu_210_p2;
wire   [0:0] icmp_ln1652_4_fu_144_p2;
wire   [0:0] and_ln75_fu_216_p2;
wire   [0:0] icmp_ln1652_5_fu_150_p2;
wire   [0:0] and_ln73_3_fu_222_p2;
wire   [0:0] icmp_ln1652_6_fu_156_p2;
wire   [0:0] xor_ln75_3_fu_234_p2;
wire   [0:0] and_ln73_9_fu_240_p2;
wire   [0:0] xor_ln75_4_fu_252_p2;
wire   [0:0] icmp_ln1652_7_fu_162_p2;
wire   [0:0] and_ln75_1_fu_258_p2;
wire   [0:0] icmp_ln1652_8_fu_168_p2;
wire   [0:0] xor_ln75_5_fu_270_p2;
wire   [0:0] and_ln73_10_fu_276_p2;
wire   [0:0] and_ln73_fu_174_p2;
wire   [0:0] and_ln73_1_fu_192_p2;
wire   [0:0] and_ln73_2_fu_204_p2;
wire   [0:0] or_ln88_1_fu_294_p2;
wire   [0:0] and_ln73_4_fu_228_p2;
wire   [0:0] or_ln88_2_fu_300_p2;
wire   [0:0] and_ln73_5_fu_246_p2;
wire   [0:0] or_ln88_4_fu_312_p2;
wire   [0:0] and_ln73_6_fu_264_p2;
wire   [0:0] or_ln88_5_fu_318_p2;
wire   [0:0] and_ln73_7_fu_282_p2;
wire   [0:0] xor_ln89_fu_330_p2;
wire   [0:0] or_ln88_fu_288_p2;
wire   [1:0] zext_ln89_fu_336_p1;
wire   [1:0] select_ln89_fu_340_p3;
wire   [1:0] select_ln89_1_fu_348_p3;
wire   [2:0] zext_ln89_1_fu_356_p1;
wire   [2:0] select_ln89_2_fu_360_p3;
wire   [0:0] or_ln88_3_fu_306_p2;
wire   [2:0] select_ln89_3_fu_368_p3;
wire   [2:0] select_ln89_4_fu_376_p3;
wire   [2:0] select_ln89_5_fu_384_p3;
wire   [3:0] zext_ln89_2_fu_392_p1;
wire   [0:0] or_ln88_6_fu_324_p2;
wire   [3:0] select_ln89_6_fu_396_p3;
wire   [3:0] agg_result_fu_412_p11;
wire   [27:0] agg_result_fu_412_p12;
wire    ap_ce_reg;

my_prj_mux_104_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .din2_WIDTH( 28 ),
    .din3_WIDTH( 28 ),
    .din4_WIDTH( 28 ),
    .din5_WIDTH( 28 ),
    .din6_WIDTH( 28 ),
    .din7_WIDTH( 28 ),
    .din8_WIDTH( 28 ),
    .din9_WIDTH( 28 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 28 ))
mux_104_28_1_1_U1(
    .din0(28'd43),
    .din1(28'd268435447),
    .din2(28'd23),
    .din3(28'd23),
    .din4(28'd41),
    .din5(28'd16),
    .din6(28'd268435455),
    .din7(28'd13),
    .din8(28'd9),
    .din9(28'd268435447),
    .din10(agg_result_fu_412_p11),
    .dout(agg_result_fu_412_p12)
);

assign and_ln73_10_fu_276_p2 = (xor_ln75_5_fu_270_p2 & icmp_ln1652_8_fu_168_p2);

assign and_ln73_1_fu_192_p2 = (icmp_ln1652_fu_120_p2 & and_ln73_8_fu_186_p2);

assign and_ln73_2_fu_204_p2 = (xor_ln75_1_fu_198_p2 & icmp_ln1652_3_fu_138_p2);

assign and_ln73_3_fu_222_p2 = (icmp_ln1652_4_fu_144_p2 & and_ln75_fu_216_p2);

assign and_ln73_4_fu_228_p2 = (icmp_ln1652_5_fu_150_p2 & and_ln73_3_fu_222_p2);

assign and_ln73_5_fu_246_p2 = (and_ln73_9_fu_240_p2 & and_ln73_3_fu_222_p2);

assign and_ln73_6_fu_264_p2 = (icmp_ln1652_7_fu_162_p2 & and_ln75_1_fu_258_p2);

assign and_ln73_7_fu_282_p2 = (and_ln75_1_fu_258_p2 & and_ln73_10_fu_276_p2);

assign and_ln73_8_fu_186_p2 = (xor_ln75_fu_180_p2 & icmp_ln1652_2_fu_132_p2);

assign and_ln73_9_fu_240_p2 = (xor_ln75_3_fu_234_p2 & icmp_ln1652_6_fu_156_p2);

assign and_ln73_fu_174_p2 = (icmp_ln1652_fu_120_p2 & icmp_ln1652_1_fu_126_p2);

assign and_ln75_1_fu_258_p2 = (xor_ln75_4_fu_252_p2 & and_ln75_fu_216_p2);

assign and_ln75_fu_216_p2 = (xor_ln75_2_fu_210_p2 & xor_ln75_1_fu_198_p2);

assign ap_ready = 1'b1;

assign icmp_ln1652_1_fu_126_p2 = (($signed(p_read7) < $signed(28'd3488)) ? 1'b1 : 1'b0);

assign icmp_ln1652_2_fu_132_p2 = (($signed(p_read5) < $signed(28'd1178)) ? 1'b1 : 1'b0);

assign icmp_ln1652_5_fu_150_p2 = (($signed(p_read3) < $signed(28'd1895)) ? 1'b1 : 1'b0);

assign icmp_ln1652_6_fu_156_p2 = (($signed(p_read6) < $signed(28'd268435431)) ? 1'b1 : 1'b0);

assign or_ln88_1_fu_294_p2 = (icmp_ln1652_fu_120_p2 | and_ln73_2_fu_204_p2);

assign or_ln88_2_fu_300_p2 = (or_ln88_1_fu_294_p2 | and_ln73_4_fu_228_p2);

assign or_ln88_3_fu_306_p2 = (or_ln88_2_fu_300_p2 | and_ln73_5_fu_246_p2);

assign or_ln88_4_fu_312_p2 = (or_ln88_1_fu_294_p2 | and_ln73_3_fu_222_p2);

assign or_ln88_5_fu_318_p2 = (or_ln88_4_fu_312_p2 | and_ln73_6_fu_264_p2);

assign or_ln88_6_fu_324_p2 = (or_ln88_5_fu_318_p2 | and_ln73_7_fu_282_p2);

assign or_ln88_fu_288_p2 = (and_ln73_fu_174_p2 | and_ln73_1_fu_192_p2);

assign select_ln89_1_fu_348_p3 = ((icmp_ln1652_fu_120_p2[0:0] == 1'b1) ? select_ln89_fu_340_p3 : 2'd3);

assign select_ln89_2_fu_360_p3 = ((or_ln88_1_fu_294_p2[0:0] == 1'b1) ? zext_ln89_1_fu_356_p1 : 3'd4);

assign select_ln89_3_fu_368_p3 = ((or_ln88_2_fu_300_p2[0:0] == 1'b1) ? select_ln89_2_fu_360_p3 : 3'd5);

assign select_ln89_4_fu_376_p3 = ((or_ln88_3_fu_306_p2[0:0] == 1'b1) ? select_ln89_3_fu_368_p3 : 3'd6);

assign select_ln89_5_fu_384_p3 = ((or_ln88_4_fu_312_p2[0:0] == 1'b1) ? select_ln89_4_fu_376_p3 : 3'd7);

assign select_ln89_6_fu_396_p3 = ((or_ln88_5_fu_318_p2[0:0] == 1'b1) ? zext_ln89_2_fu_392_p1 : 4'd8);

assign select_ln89_fu_340_p3 = ((or_ln88_fu_288_p2[0:0] == 1'b1) ? zext_ln89_fu_336_p1 : 2'd2);

assign xor_ln75_1_fu_198_p2 = (icmp_ln1652_fu_120_p2 ^ 1'd1);

assign xor_ln75_2_fu_210_p2 = (icmp_ln1652_3_fu_138_p2 ^ 1'd1);

assign xor_ln75_3_fu_234_p2 = (icmp_ln1652_5_fu_150_p2 ^ 1'd1);

assign xor_ln75_4_fu_252_p2 = (icmp_ln1652_4_fu_144_p2 ^ 1'd1);

assign xor_ln75_5_fu_270_p2 = (icmp_ln1652_7_fu_162_p2 ^ 1'd1);

assign xor_ln75_fu_180_p2 = (icmp_ln1652_1_fu_126_p2 ^ 1'd1);

assign xor_ln89_fu_330_p2 = (1'd1 ^ and_ln73_fu_174_p2);

assign zext_ln89_1_fu_356_p1 = select_ln89_1_fu_348_p3;

assign zext_ln89_2_fu_392_p1 = select_ln89_5_fu_384_p3;

assign zext_ln89_fu_336_p1 = xor_ln89_fu_330_p2;

assign agg_result_fu_412_p11 = ((or_ln88_6_fu_324_p2[0:0] == 1'b1) ? select_ln89_6_fu_396_p3 : 4'd9);

assign ap_return = agg_result_fu_412_p12;

assign icmp_ln1652_3_fu_138_p2 = (($signed(p_read1) < $signed(28'd268231041)) ? 1'b1 : 1'b0);

assign icmp_ln1652_4_fu_144_p2 = (($signed(p_read7) < $signed(28'd3011)) ? 1'b1 : 1'b0);

assign icmp_ln1652_7_fu_162_p2 = (($signed(p_read5) < $signed(28'd268156084)) ? 1'b1 : 1'b0);

assign icmp_ln1652_8_fu_168_p2 = (($signed(p_read4) < $signed(28'd268171495)) ? 1'b1 : 1'b0);

assign icmp_ln1652_fu_120_p2 = (($signed(p_read2) < $signed(28'd268435354)) ? 1'b1 : 1'b0);

endmodule //my_prj_decision_function
