-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_2 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_3 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_4 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_5 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_6 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_7 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_8 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_9 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_10 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_11 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_12 : IN STD_LOGIC_VECTOR (27 downto 0);
    x_13 : IN STD_LOGIC_VECTOR (27 downto 0);
    score_0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    score_0_ap_vld : OUT STD_LOGIC;
    score_1 : IN STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of my_prj is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "my_prj_my_prj,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.878429,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=294,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ref_tmp_i_i_decision_function_fu_105_ap_ready : STD_LOGIC;
    signal ref_tmp_i_i_decision_function_fu_105_ap_return : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component my_prj_decision_function IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (27 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    ref_tmp_i_i_decision_function_fu_105 : component my_prj_decision_function
    port map (
        ap_ready => ref_tmp_i_i_decision_function_fu_105_ap_ready,
        p_read1 => x_2,
        p_read2 => x_3,
        p_read3 => x_4,
        p_read4 => x_6,
        p_read5 => x_8,
        p_read6 => x_10,
        p_read7 => x_13,
        ap_return => ref_tmp_i_i_decision_function_fu_105_ap_return);




    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    score_0 <= ref_tmp_i_i_decision_function_fu_105_ap_return;

    score_0_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            score_0_ap_vld <= ap_const_logic_1;
        else 
            score_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
